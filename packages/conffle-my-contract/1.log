1--------------------------------
2--------------------------------
3--------------------------------
at what:  0xb3247fa6b8e674f86055a74dfa8b35c6c339ddf9
xxxxxxxx
onchainCode: 0x608060405234801561001057600080fd5b50600436106100415760003560e01c80637bd703e81461004657806390b98a111461007e578063f8b2cb4f146100be575b600080fd5b61006c6004803603602081101561005c57600080fd5b50356001600160a01b03166100e4565b60408051918252519081900360200190f35b6100aa6004803603604081101561009457600080fd5b506001600160a01b038135169060200135610178565b604080519115158252519081900360200190f35b61006c600480360360208110156100d457600080fd5b50356001600160a01b0316610204565b600073e4daa3e81a8c7c67d868fe21d0070ba29d61e5c96396e4ee3d61010984610204565b60026040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b15801561014657600080fd5b505af415801561015a573d6000803e3d6000fd5b505050506040513d602081101561017057600080fd5b505192915050565b33600090815260208190526040812054821115610197575060006101fe565b33600081815260208181526040808320805487900390556001600160a01b03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060015b92915050565b6001600160a01b03166000908152602081905260409020549056fea265627a7a72315820310db1d04404089e87841dd6d1c86676b0704e804029956ec1c491d753d0f4bc64736f6c634300050c0032
signature: getBalanceInEth(address)
getBalanceInEth
signature: sendCoin(address,uint256)
sendCoin
signature: getBalance(address)
getBalance
--------------------------------
undefined
{ _fireError: [Function: _fireError],
  _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
  _flattenTypes: [Function: _flattenTypes],
  randomHex: [Function: randomHex],
  _:
   { [Function: _]
     _: [Circular],
     VERSION: '1.9.1',
     iteratee: [Function: builtinIteratee],
     forEach: [Function],
     each: [Function],
     collect: [Function],
     map: [Function],
     inject: [Function],
     foldl: [Function],
     reduce: [Function],
     foldr: [Function],
     reduceRight: [Function],
     detect: [Function],
     find: [Function],
     select: [Function],
     filter: [Function],
     reject: [Function],
     all: [Function],
     every: [Function],
     any: [Function],
     some: [Function],
     include: [Function],
     includes: [Function],
     contains: [Function],
     invoke: [Function],
     pluck: [Function],
     where: [Function],
     findWhere: [Function],
     max: [Function],
     min: [Function],
     shuffle: [Function],
     sample: [Function],
     sortBy: [Function],
     groupBy: [Function],
     indexBy: [Function],
     countBy: [Function],
     toArray: [Function],
     size: [Function],
     partition: [Function],
     take: [Function],
     head: [Function],
     first: [Function],
     initial: [Function],
     last: [Function],
     drop: [Function],
     tail: [Function],
     rest: [Function],
     compact: [Function],
     flatten: [Function],
     without: [Function],
     unique: [Function],
     uniq: [Function],
     union: [Function],
     intersection: [Function],
     difference: [Function],
     unzip: [Function],
     zip: [Function],
     object: [Function],
     findIndex: [Function],
     findLastIndex: [Function],
     sortedIndex: [Function],
     indexOf: [Function],
     lastIndexOf: [Function],
     range: [Function],
     chunk: [Function],
     bind: [Function],
     partial: { [Function] placeholder: [Circular] },
     bindAll: [Function],
     memoize: [Function],
     delay: [Function],
     defer: [Function: bound],
     throttle: [Function],
     debounce: [Function],
     wrap: [Function],
     negate: [Function],
     compose: [Function],
     after: [Function],
     before: [Function],
     once: [Function: bound],
     restArguments: [Function: restArguments],
     keys: [Function],
     allKeys: [Function],
     values: [Function],
     mapObject: [Function],
     pairs: [Function],
     invert: [Function],
     methods: [Function],
     functions: [Function],
     extend: [Function],
     assign: [Function],
     extendOwn: [Function],
     findKey: [Function],
     pick: [Function],
     omit: [Function],
     defaults: [Function],
     create: [Function],
     clone: [Function],
     tap: [Function],
     isMatch: [Function],
     isEqual: [Function],
     isEmpty: [Function],
     isElement: [Function],
     isArray: [Function: isArray],
     isObject: [Function],
     isArguments: [Function],
     isFunction: [Function],
     isString: [Function],
     isNumber: [Function],
     isDate: [Function],
     isRegExp: [Function],
     isError: [Function],
     isSymbol: [Function],
     isMap: [Function],
     isWeakMap: [Function],
     isSet: [Function],
     isWeakSet: [Function],
     isFinite: [Function],
     isNaN: [Function],
     isBoolean: [Function],
     isNull: [Function],
     isUndefined: [Function],
     has: [Function],
     noConflict: [Function],
     identity: [Function],
     constant: [Function],
     noop: [Function],
     property: [Function],
     propertyOf: [Function],
     matches: [Function],
     matcher: [Function],
     times: [Function],
     random: [Function],
     now: [Function: now],
     escape: [Function],
     unescape: [Function],
     result: [Function],
     uniqueId: [Function],
     templateSettings:
      { evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g },
     template: [Function],
     chain: [Function],
     mixin: [Function] },
  BN:
   { [Function: BN]
     BN: [Circular],
     wordSize: 26,
     isBN: [Function: isBN],
     max: [Function: max],
     min: [Function: min],
     red: [Function: red],
     _prime: [Function: prime],
     mont: [Function: mont] },
  isBN: [Function: isBN],
  isBigNumber: [Function: isBigNumber],
  isHex: [Function: isHex],
  isHexStrict: [Function: isHexStrict],
  sha3:
   { [Function: sha3]
     _Hash:
      { keccak256: [Function],
        keccak512: [Function],
        keccak256s: [Function],
        keccak512s: [Function] } },
  keccak256:
   { [Function: sha3]
     _Hash:
      { keccak256: [Function],
        keccak512: [Function],
        keccak256s: [Function],
        keccak512s: [Function] } },
  soliditySha3: [Function: soliditySha3],
  isAddress: [Function: isAddress],
  checkAddressChecksum: [Function: checkAddressChecksum],
  toChecksumAddress: [Function: toChecksumAddress],
  toHex: [Function: toHex],
  toBN: [Function: toBN],
  bytesToHex: [Function: bytesToHex],
  hexToBytes: [Function: hexToBytes],
  hexToNumberString: [Function: hexToNumberString],
  hexToNumber: [Function: hexToNumber],
  toDecimal: [Function: hexToNumber],
  numberToHex: [Function: numberToHex],
  fromDecimal: [Function: numberToHex],
  hexToUtf8: [Function: hexToUtf8],
  hexToString: [Function: hexToUtf8],
  toUtf8: [Function: hexToUtf8],
  utf8ToHex: [Function: utf8ToHex],
  stringToHex: [Function: utf8ToHex],
  fromUtf8: [Function: utf8ToHex],
  hexToAscii: [Function: hexToAscii],
  toAscii: [Function: hexToAscii],
  asciiToHex: [Function: asciiToHex],
  fromAscii: [Function: asciiToHex],
  unitMap:
   { noether: '0',
     wei: '1',
     kwei: '1000',
     Kwei: '1000',
     babbage: '1000',
     femtoether: '1000',
     mwei: '1000000',
     Mwei: '1000000',
     lovelace: '1000000',
     picoether: '1000000',
     gwei: '1000000000',
     Gwei: '1000000000',
     shannon: '1000000000',
     nanoether: '1000000000',
     nano: '1000000000',
     szabo: '1000000000000',
     microether: '1000000000000',
     micro: '1000000000000',
     finney: '1000000000000000',
     milliether: '1000000000000000',
     milli: '1000000000000000',
     ether: '1000000000000000000',
     kether: '1000000000000000000000',
     grand: '1000000000000000000000',
     mether: '1000000000000000000000000',
     gether: '1000000000000000000000000000',
     tether: '1000000000000000000000000000000' },
  toWei: [Function: toWei],
  fromWei: [Function: fromWei],
  padLeft: [Function: leftPad],
  leftPad: [Function: leftPad],
  padRight: [Function: rightPad],
  rightPad: [Function: rightPad],
  toTwosComplement: [Function: toTwosComplement] }
--------------------------------
