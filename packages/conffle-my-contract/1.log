1--------------------------------
2--------------------------------
3--------------------------------
at what:  0xb3247fa6b8e674f86055a74dfa8b35c6c339ddf9
onchainCode: 0x608060405234801561001057600080fd5b50600436106100415760003560e01c80637bd703e81461004657806390b98a111461007e578063f8b2cb4f146100be575b600080fd5b61006c6004803603602081101561005c57600080fd5b50356001600160a01b03166100e4565b60408051918252519081900360200190f35b6100aa6004803603604081101561009457600080fd5b506001600160a01b038135169060200135610178565b604080519115158252519081900360200190f35b61006c600480360360208110156100d457600080fd5b50356001600160a01b0316610204565b600073e4daa3e81a8c7c67d868fe21d0070ba29d61e5c96396e4ee3d61010984610204565b60026040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b15801561014657600080fd5b505af415801561015a573d6000803e3d6000fd5b505050506040513d602081101561017057600080fd5b505192915050565b33600090815260208190526040812054821115610197575060006101fe565b33600081815260208181526040808320805487900390556001600160a01b03871680845292819020805487019055805186815290519293927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060015b92915050565b6001600160a01b03166000908152602081905260409020549056fea265627a7a72315820310db1d04404089e87841dd6d1c86676b0704e804029956ec1c491d753d0f4bc64736f6c634300050c0032
signature: getBalanceInEth(address)
getBalanceInEth
signature: sendCoin(address,uint256)
sendCoin
signature: getBalance(address)
getBalance
--------------------------------
TruffleContract {
  constructor:
   { [Function: TruffleContract]
     _constructorMethods:
      { setProvider: [Function: setProvider],
        at: [AsyncFunction: at],
        clone: [Function: clone],
        addProp: [Function: addProp],
        toJSON: [Function: toJSON] },
     _properties:
      { contract_name: { get: [Function: get], set: [Function: set] },
        contractName: { get: [Function: get], set: [Function: set] },
        abi: { get: [Function: get], set: [Function: set] },
        address: { get: [Function: get], set: [Function: set] },
        bytecode: { get: [Function: get], set: [Function: set] } },
     _property_values: {},
     _json:
      { contractName: 'MetaCoin',
        abi:
         [ { constant: false,
             inputs: [ { name: 'addr', type: 'address' } ],
             name: 'getBalanceInEth',
             outputs: [ { name: '', type: 'uint256' } ],
             payable: false,
             type: 'function',
             signature: '0x7bd703e8' },
           { constant: false,
             inputs:
              [ { name: 'receiver', type: 'address' },
                { name: 'amount', type: 'uint256' } ],
             name: 'sendCoin',
             outputs: [ { name: 'sufficient', type: 'bool' } ],
             payable: false,
             type: 'function',
             signature: '0x90b98a11' },
           { constant: false,
             inputs: [ { name: 'addr', type: 'address' } ],
             name: 'getBalance',
             outputs: [ { name: '', type: 'uint256' } ],
             payable: false,
             type: 'function',
             signature: '0xf8b2cb4f' },
           { inputs: [],
             payable: false,
             type: 'constructor',
             constant: undefined },
           { anonymous: false,
             inputs:
              [ { indexed: true, name: '_from', type: 'address' },
                { indexed: true, name: '_to', type: 'address' },
                { indexed: false, name: '_value', type: 'uint256' } ],
             name: 'Transfer',
             type: 'event',
             constant: undefined,
             payable: undefined,
             signature:
              '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' } ],
        bytecode:
         '0x606060405234610000575b600160a060020a033216600090815260208190526040902061271090555b5b610223806100386000396000f300606060405263ffffffff60e060020a6000350416637bd703e8811461003a57806390b98a1114610065578063f8b2cb4f14610095575b610000565b3461000057610053600160a060020a03600435166100c0565b60408051918252519081900360200190f35b3461000057610081600160a060020a0360043516602435610140565b604080519115158252519081900360200190f35b3461000057610053600160a060020a03600435166101d8565b60408051918252519081900360200190f35b600073__ConvertLib____________________________6396e4ee3d6100e5846101d8565b60026000604051602001526040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b156100005760325a03f415610000575050604051519150505b919050565b600160a060020a03331660009081526020819052604081205482901015610169575060006101d2565b600160a060020a0333811660008181526020818152604080832080548890039055938716808352918490208054870190558351868152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35060015b92915050565b600160a060020a0381166000908152602081905260409020545b9190505600a165627a7a72305820cf090381bfbdddfc64b5e2924b8503d4958a90d7edd3a9011b8a82f5ea3b52600029',
        deployedBytecode: undefined,
        sourceMap: undefined,
        deployedSourceMap: undefined,
        source: undefined,
        sourcePath: undefined,
        ast: undefined,
        legacyAST: undefined,
        compiler: undefined,
        networks: {},
        schemaVersion: '2.0.3',
        updatedAt: undefined },
     setProvider: [Function: bound setProvider],
     at: [AsyncFunction: bound at],
     clone: [Function: bound clone],
     addProp: [Function: bound addProp],
     toJSON: [Function: bound toJSON],
     web3:
      ConfluxWeb {
        currentProvider: [Getter/Setter],
        _requestManager:
         RequestManager {
           provider:
            Provider {
              provider:
               HttpProvider {
                 host: 'http://localhost:12537',
                 httpAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { keepAlive: true, path: null },
                    requests: {},
                    sockets:
                     { 'localhost:12537:':
                        [ Socket {
                            connecting: false,
                            _hadError: false,
                            _handle:
                             TCP {
                               reading: true,
                               onread: [Function: onStreamRead],
                               onconnection: null,
                               [Symbol(owner)]: [Circular] },
                            _parent: null,
                            _host: 'localhost',
                            _readableState:
                             ReadableState {
                               objectMode: false,
                               highWaterMark: 16384,
                               buffer: BufferList { head: null, tail: null, length: 0 },
                               length: 0,
                               pipes: null,
                               pipesCount: 0,
                               flowing: true,
                               ended: false,
                               endEmitted: false,
                               reading: true,
                               sync: false,
                               needReadable: true,
                               emittedReadable: false,
                               readableListening: false,
                               resumeScheduled: false,
                               paused: false,
                               emitClose: false,
                               destroyed: false,
                               defaultEncoding: 'utf8',
                               awaitDrain: 0,
                               readingMore: false,
                               decoder: null,
                               encoding: null },
                            readable: true,
                            _events:
                             [Object: null prototype] {
                               end: [Function: onReadableStreamEnd],
                               free: [Function: onFree],
                               close: [ [Function: onClose], [Function: socketCloseListener] ],
                               agentRemove: [Function: onRemove],
                               drain: [Function: ondrain],
                               error: [Function: socketErrorListener],
                               finish:
                                { [Function: bound onceWrapper] listener: [Function: destroy] } },
                            _eventsCount: 7,
                            _maxListeners: undefined,
                            _writableState:
                             WritableState {
                               objectMode: false,
                               highWaterMark: 16384,
                               finalCalled: true,
                               needDrain: false,
                               ending: true,
                               ended: true,
                               finished: false,
                               destroyed: false,
                               decodeStrings: false,
                               defaultEncoding: 'utf8',
                               length: 0,
                               writing: false,
                               corked: 0,
                               sync: false,
                               bufferProcessing: false,
                               onwrite: [Function: bound onwrite],
                               writecb: null,
                               writelen: 0,
                               bufferedRequest: null,
                               lastBufferedRequest: null,
                               pendingcb: 1,
                               prefinished: false,
                               errorEmitted: false,
                               emitClose: false,
                               bufferedRequestCount: 0,
                               corkedRequestsFree:
                                { next:
                                   { next: null,
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] },
                                  entry: null,
                                  finish: [Function: bound onCorkedFinish] } },
                            writable: false,
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: null,
                            _server: null,
                            parser: null,
                            _httpMessage:
                             ClientRequest {
                               _events:
                                [Object: null prototype] {
                                  response: [Function],
                                  error: [Function],
                                  prefinish: [Function: requestOnPrefinish] },
                               _eventsCount: 3,
                               _maxListeners: undefined,
                               output: [],
                               outputEncodings: [],
                               outputCallbacks: [],
                               outputSize: 0,
                               writable: true,
                               _last: false,
                               chunkedEncoding: false,
                               shouldKeepAlive: false,
                               useChunkedEncodingByDefault: true,
                               sendDate: false,
                               _removedConnection: false,
                               _removedContLen: false,
                               _removedTE: false,
                               _contentLength: null,
                               _hasBody: true,
                               _trailer: '',
                               finished: true,
                               _headerSent: true,
                               socket: [Circular],
                               connection: [Circular],
                               _header:
                                'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                               _onPendingData: [Function: noopPendingOutput],
                               agent: [Circular],
                               socketPath: undefined,
                               timeout: undefined,
                               method: 'POST',
                               path: '/',
                               _ended: true,
                               res:
                                IncomingMessage {
                                  _readableState:
                                   ReadableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     buffer: BufferList { head: null, tail: null, length: 0 },
                                     length: 0,
                                     pipes: null,
                                     pipesCount: 0,
                                     flowing: true,
                                     ended: true,
                                     endEmitted: true,
                                     reading: false,
                                     sync: true,
                                     needReadable: false,
                                     emittedReadable: false,
                                     readableListening: false,
                                     resumeScheduled: false,
                                     paused: false,
                                     emitClose: true,
                                     destroyed: false,
                                     defaultEncoding: 'utf8',
                                     awaitDrain: 0,
                                     readingMore: true,
                                     decoder: null,
                                     encoding: null },
                                  readable: false,
                                  _events:
                                   [Object: null prototype] {
                                     end: [ [Function: responseOnEnd], [Function] ],
                                     data: [Function],
                                     close: [Function] },
                                  _eventsCount: 3,
                                  _maxListeners: undefined,
                                  socket: [Circular],
                                  connection: [Circular],
                                  httpVersionMajor: 1,
                                  httpVersionMinor: 1,
                                  httpVersion: '1.1',
                                  complete: true,
                                  headers:
                                   { 'content-type': 'application/json; charset=utf-8',
                                     connection: 'close',
                                     'content-length': '1231',
                                     date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                  rawHeaders:
                                   [ 'content-type',
                                     'application/json; charset=utf-8',
                                     'connection',
                                     'close',
                                     'content-length',
                                     '1231',
                                     'date',
                                     'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                  trailers: {},
                                  rawTrailers: [],
                                  aborted: false,
                                  upgrade: false,
                                  url: '',
                                  method: null,
                                  statusCode: 200,
                                  statusMessage: 'OK',
                                  client: [Circular],
                                  _consuming: false,
                                  _dumped: false,
                                  req: [Circular] },
                               aborted: undefined,
                               timeoutCb: null,
                               upgradeOrConnect: false,
                               parser: null,
                               maxHeadersCount: null,
                               [Symbol(isCorked)]: false,
                               [Symbol(outHeadersKey)]:
                                [Object: null prototype] {
                                  'content-type': [ 'Content-Type', 'application/json' ],
                                  connection: [ 'Connection', 'keep-alive' ],
                                  host: [ 'Host', 'localhost:12537' ],
                                  'user-agent':
                                   [ 'User-Agent',
                                     'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                  'content-length': [ 'Content-Length', '118' ],
                                  cookie2: [ 'cookie2', '' ],
                                  cookie: [ 'cookie', '' ] } },
                            [Symbol(asyncId)]: 8,
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: null,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0 } ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 timeout: 0,
                 headers: undefined,
                 connected: true,
                 sendAsync: [Function] } },
           providers:
            { WebsocketProvider: [Function: WebsocketProvider],
              HttpProvider: [Function: HttpProvider],
              IpcProvider: [Function: IpcProvider] },
           subscriptions: {} },
        givenProvider: null,
        providers:
         { WebsocketProvider: [Function: WebsocketProvider],
           HttpProvider: [Function: HttpProvider],
           IpcProvider: [Function: IpcProvider] },
        _provider:
         Provider {
           provider:
            HttpProvider {
              host: 'http://localhost:12537',
              httpAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 80,
                 protocol: 'http:',
                 options: { keepAlive: true, path: null },
                 requests: {},
                 sockets:
                  { 'localhost:12537:':
                     [ Socket {
                         connecting: false,
                         _hadError: false,
                         _handle:
                          TCP {
                            reading: true,
                            onread: [Function: onStreamRead],
                            onconnection: null,
                            [Symbol(owner)]: [Circular] },
                         _parent: null,
                         _host: 'localhost',
                         _readableState:
                          ReadableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: null,
                            pipesCount: 0,
                            flowing: true,
                            ended: false,
                            endEmitted: false,
                            reading: true,
                            sync: false,
                            needReadable: true,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            paused: false,
                            emitClose: false,
                            destroyed: false,
                            defaultEncoding: 'utf8',
                            awaitDrain: 0,
                            readingMore: false,
                            decoder: null,
                            encoding: null },
                         readable: true,
                         _events:
                          [Object: null prototype] {
                            end: [Function: onReadableStreamEnd],
                            free: [Function: onFree],
                            close: [ [Function: onClose], [Function: socketCloseListener] ],
                            agentRemove: [Function: onRemove],
                            drain: [Function: ondrain],
                            error: [Function: socketErrorListener],
                            finish:
                             { [Function: bound onceWrapper] listener: [Function: destroy] } },
                         _eventsCount: 7,
                         _maxListeners: undefined,
                         _writableState:
                          WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: true,
                            needDrain: false,
                            ending: true,
                            ended: true,
                            finished: false,
                            destroyed: false,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: false,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            bufferedRequest: null,
                            lastBufferedRequest: null,
                            pendingcb: 1,
                            prefinished: false,
                            errorEmitted: false,
                            emitClose: false,
                            bufferedRequestCount: 0,
                            corkedRequestsFree:
                             { next:
                                { next: null,
                                  entry: null,
                                  finish: [Function: bound onCorkedFinish] },
                               entry: null,
                               finish: [Function: bound onCorkedFinish] } },
                         writable: false,
                         allowHalfOpen: false,
                         _sockname: null,
                         _pendingData: null,
                         _pendingEncoding: '',
                         server: null,
                         _server: null,
                         parser: null,
                         _httpMessage:
                          ClientRequest {
                            _events:
                             [Object: null prototype] {
                               response: [Function],
                               error: [Function],
                               prefinish: [Function: requestOnPrefinish] },
                            _eventsCount: 3,
                            _maxListeners: undefined,
                            output: [],
                            outputEncodings: [],
                            outputCallbacks: [],
                            outputSize: 0,
                            writable: true,
                            _last: false,
                            chunkedEncoding: false,
                            shouldKeepAlive: false,
                            useChunkedEncodingByDefault: true,
                            sendDate: false,
                            _removedConnection: false,
                            _removedContLen: false,
                            _removedTE: false,
                            _contentLength: null,
                            _hasBody: true,
                            _trailer: '',
                            finished: true,
                            _headerSent: true,
                            socket: [Circular],
                            connection: [Circular],
                            _header:
                             'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                            _onPendingData: [Function: noopPendingOutput],
                            agent: [Circular],
                            socketPath: undefined,
                            timeout: undefined,
                            method: 'POST',
                            path: '/',
                            _ended: true,
                            res:
                             IncomingMessage {
                               _readableState:
                                ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: null,
                                  pipesCount: 0,
                                  flowing: true,
                                  ended: true,
                                  endEmitted: true,
                                  reading: false,
                                  sync: true,
                                  needReadable: false,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  paused: false,
                                  emitClose: true,
                                  destroyed: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrain: 0,
                                  readingMore: true,
                                  decoder: null,
                                  encoding: null },
                               readable: false,
                               _events:
                                [Object: null prototype] {
                                  end: [ [Function: responseOnEnd], [Function] ],
                                  data: [Function],
                                  close: [Function] },
                               _eventsCount: 3,
                               _maxListeners: undefined,
                               socket: [Circular],
                               connection: [Circular],
                               httpVersionMajor: 1,
                               httpVersionMinor: 1,
                               httpVersion: '1.1',
                               complete: true,
                               headers:
                                { 'content-type': 'application/json; charset=utf-8',
                                  connection: 'close',
                                  'content-length': '1231',
                                  date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                               rawHeaders:
                                [ 'content-type',
                                  'application/json; charset=utf-8',
                                  'connection',
                                  'close',
                                  'content-length',
                                  '1231',
                                  'date',
                                  'Fri, 29 Nov 2019 07:43:06 GMT' ],
                               trailers: {},
                               rawTrailers: [],
                               aborted: false,
                               upgrade: false,
                               url: '',
                               method: null,
                               statusCode: 200,
                               statusMessage: 'OK',
                               client: [Circular],
                               _consuming: false,
                               _dumped: false,
                               req: [Circular] },
                            aborted: undefined,
                            timeoutCb: null,
                            upgradeOrConnect: false,
                            parser: null,
                            maxHeadersCount: null,
                            [Symbol(isCorked)]: false,
                            [Symbol(outHeadersKey)]:
                             [Object: null prototype] {
                               'content-type': [ 'Content-Type', 'application/json' ],
                               connection: [ 'Connection', 'keep-alive' ],
                               host: [ 'Host', 'localhost:12537' ],
                               'user-agent':
                                [ 'User-Agent',
                                  'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                               'content-length': [ 'Content-Length', '118' ],
                               cookie2: [ 'cookie2', '' ],
                               cookie: [ 'cookie', '' ] } },
                         [Symbol(asyncId)]: 8,
                         [Symbol(lastWriteQueueSize)]: 0,
                         [Symbol(timeout)]: null,
                         [Symbol(kBytesRead)]: 0,
                         [Symbol(kBytesWritten)]: 0 } ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: true,
                 maxSockets: Infinity,
                 maxFreeSockets: 256 },
              timeout: 0,
              headers: undefined,
              connected: true,
              sendAsync: [Function] } },
        setProvider: [Function],
        BatchRequest: [Function: bound Batch],
        extend:
         { [Function: ex]
           formatters:
            { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
              inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
              inputCallFormatter: [Function: inputCallFormatter],
              inputTransactionFormatter: [Function: inputTransactionFormatter],
              inputAddressFormatter: [Function: inputAddressFormatter],
              inputPostFormatter: [Function: inputPostFormatter],
              inputLogFormatter: [Function: inputLogFormatter],
              inputSignFormatter: [Function: inputSignFormatter],
              outputBigNumberFormatter: [Function: outputBigNumberFormatter],
              outputTransactionFormatter: [Function: outputTransactionFormatter],
              outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
              outputBlockFormatter: [Function: outputBlockFormatter],
              outputLogFormatter: [Function: outputLogFormatter],
              outputPostFormatter: [Function: outputPostFormatter],
              outputSyncingFormatter: [Function: outputSyncingFormatter] },
           utils:
            { _fireError: [Function: _fireError],
              _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
              _flattenTypes: [Function: _flattenTypes],
              randomHex: [Function: randomHex],
              _:
               { [Function: _]
                 _: [Circular],
                 VERSION: '1.9.1',
                 iteratee: [Function: builtinIteratee],
                 forEach: [Function],
                 each: [Function],
                 collect: [Function],
                 map: [Function],
                 inject: [Function],
                 foldl: [Function],
                 reduce: [Function],
                 foldr: [Function],
                 reduceRight: [Function],
                 detect: [Function],
                 find: [Function],
                 select: [Function],
                 filter: [Function],
                 reject: [Function],
                 all: [Function],
                 every: [Function],
                 any: [Function],
                 some: [Function],
                 include: [Function],
                 includes: [Function],
                 contains: [Function],
                 invoke: [Function],
                 pluck: [Function],
                 where: [Function],
                 findWhere: [Function],
                 max: [Function],
                 min: [Function],
                 shuffle: [Function],
                 sample: [Function],
                 sortBy: [Function],
                 groupBy: [Function],
                 indexBy: [Function],
                 countBy: [Function],
                 toArray: [Function],
                 size: [Function],
                 partition: [Function],
                 take: [Function],
                 head: [Function],
                 first: [Function],
                 initial: [Function],
                 last: [Function],
                 drop: [Function],
                 tail: [Function],
                 rest: [Function],
                 compact: [Function],
                 flatten: [Function],
                 without: [Function],
                 unique: [Function],
                 uniq: [Function],
                 union: [Function],
                 intersection: [Function],
                 difference: [Function],
                 unzip: [Function],
                 zip: [Function],
                 object: [Function],
                 findIndex: [Function],
                 findLastIndex: [Function],
                 sortedIndex: [Function],
                 indexOf: [Function],
                 lastIndexOf: [Function],
                 range: [Function],
                 chunk: [Function],
                 bind: [Function],
                 partial: { [Function] placeholder: [Circular] },
                 bindAll: [Function],
                 memoize: [Function],
                 delay: [Function],
                 defer: [Function: bound],
                 throttle: [Function],
                 debounce: [Function],
                 wrap: [Function],
                 negate: [Function],
                 compose: [Function],
                 after: [Function],
                 before: [Function],
                 once: [Function: bound],
                 restArguments: [Function: restArguments],
                 keys: [Function],
                 allKeys: [Function],
                 values: [Function],
                 mapObject: [Function],
                 pairs: [Function],
                 invert: [Function],
                 methods: [Function],
                 functions: [Function],
                 extend: [Function],
                 assign: [Function],
                 extendOwn: [Function],
                 findKey: [Function],
                 pick: [Function],
                 omit: [Function],
                 defaults: [Function],
                 create: [Function],
                 clone: [Function],
                 tap: [Function],
                 isMatch: [Function],
                 isEqual: [Function],
                 isEmpty: [Function],
                 isElement: [Function],
                 isArray: [Function: isArray],
                 isObject: [Function],
                 isArguments: [Function],
                 isFunction: [Function],
                 isString: [Function],
                 isNumber: [Function],
                 isDate: [Function],
                 isRegExp: [Function],
                 isError: [Function],
                 isSymbol: [Function],
                 isMap: [Function],
                 isWeakMap: [Function],
                 isSet: [Function],
                 isWeakSet: [Function],
                 isFinite: [Function],
                 isNaN: [Function],
                 isBoolean: [Function],
                 isNull: [Function],
                 isUndefined: [Function],
                 has: [Function],
                 noConflict: [Function],
                 identity: [Function],
                 constant: [Function],
                 noop: [Function],
                 property: [Function],
                 propertyOf: [Function],
                 matches: [Function],
                 matcher: [Function],
                 times: [Function],
                 random: [Function],
                 now: [Function: now],
                 escape: [Function],
                 unescape: [Function],
                 result: [Function],
                 uniqueId: [Function],
                 templateSettings:
                  { evaluate: /<%([\s\S]+?)%>/g,
                    interpolate: /<%=([\s\S]+?)%>/g,
                    escape: /<%-([\s\S]+?)%>/g },
                 template: [Function],
                 chain: [Function],
                 mixin: [Function] },
              BN:
               { [Function: BN]
                 BN: [Circular],
                 wordSize: 26,
                 isBN: [Function: isBN],
                 max: [Function: max],
                 min: [Function: min],
                 red: [Function: red],
                 _prime: [Function: prime],
                 mont: [Function: mont] },
              isBN: [Function: isBN],
              isBigNumber: [Function: isBigNumber],
              isHex: [Function: isHex],
              isHexStrict: [Function: isHexStrict],
              sha3:
               { [Function: sha3]
                 _Hash:
                  { keccak256: [Function],
                    keccak512: [Function],
                    keccak256s: [Function],
                    keccak512s: [Function] } },
              keccak256:
               { [Function: sha3]
                 _Hash:
                  { keccak256: [Function],
                    keccak512: [Function],
                    keccak256s: [Function],
                    keccak512s: [Function] } },
              soliditySha3: [Function: soliditySha3],
              isAddress: [Function: isAddress],
              checkAddressChecksum: [Function: checkAddressChecksum],
              toChecksumAddress: [Function: toChecksumAddress],
              toHex: [Function: toHex],
              toBN: [Function: toBN],
              bytesToHex: [Function: bytesToHex],
              hexToBytes: [Function: hexToBytes],
              hexToNumberString: [Function: hexToNumberString],
              hexToNumber: [Function: hexToNumber],
              toDecimal: [Function: hexToNumber],
              numberToHex: [Function: numberToHex],
              fromDecimal: [Function: numberToHex],
              hexToUtf8: [Function: hexToUtf8],
              hexToString: [Function: hexToUtf8],
              toUtf8: [Function: hexToUtf8],
              utf8ToHex: [Function: utf8ToHex],
              stringToHex: [Function: utf8ToHex],
              fromUtf8: [Function: utf8ToHex],
              hexToAscii: [Function: hexToAscii],
              toAscii: [Function: hexToAscii],
              asciiToHex: [Function: asciiToHex],
              fromAscii: [Function: asciiToHex],
              unitMap:
               { noether: '0',
                 wei: '1',
                 kwei: '1000',
                 Kwei: '1000',
                 babbage: '1000',
                 femtoether: '1000',
                 mwei: '1000000',
                 Mwei: '1000000',
                 lovelace: '1000000',
                 picoether: '1000000',
                 gwei: '1000000000',
                 Gwei: '1000000000',
                 shannon: '1000000000',
                 nanoether: '1000000000',
                 nano: '1000000000',
                 szabo: '1000000000000',
                 microether: '1000000000000',
                 micro: '1000000000000',
                 finney: '1000000000000000',
                 milliether: '1000000000000000',
                 milli: '1000000000000000',
                 ether: '1000000000000000000',
                 kether: '1000000000000000000000',
                 grand: '1000000000000000000000',
                 mether: '1000000000000000000000000',
                 gether: '1000000000000000000000000000',
                 tether: '1000000000000000000000000000000' },
              toWei: [Function: toWei],
              fromWei: [Function: fromWei],
              padLeft: [Function: leftPad],
              leftPad: [Function: leftPad],
              padRight: [Function: rightPad],
              rightPad: [Function: rightPad],
              toTwosComplement: [Function: toTwosComplement] },
           Method: [Function: Method] },
        version: '1.2.2-alpha.0',
        utils:
         { _fireError: [Function: _fireError],
           _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
           _flattenTypes: [Function: _flattenTypes],
           randomHex: [Function: randomHex],
           _:
            { [Function: _]
              _: [Circular],
              VERSION: '1.9.1',
              iteratee: [Function: builtinIteratee],
              forEach: [Function],
              each: [Function],
              collect: [Function],
              map: [Function],
              inject: [Function],
              foldl: [Function],
              reduce: [Function],
              foldr: [Function],
              reduceRight: [Function],
              detect: [Function],
              find: [Function],
              select: [Function],
              filter: [Function],
              reject: [Function],
              all: [Function],
              every: [Function],
              any: [Function],
              some: [Function],
              include: [Function],
              includes: [Function],
              contains: [Function],
              invoke: [Function],
              pluck: [Function],
              where: [Function],
              findWhere: [Function],
              max: [Function],
              min: [Function],
              shuffle: [Function],
              sample: [Function],
              sortBy: [Function],
              groupBy: [Function],
              indexBy: [Function],
              countBy: [Function],
              toArray: [Function],
              size: [Function],
              partition: [Function],
              take: [Function],
              head: [Function],
              first: [Function],
              initial: [Function],
              last: [Function],
              drop: [Function],
              tail: [Function],
              rest: [Function],
              compact: [Function],
              flatten: [Function],
              without: [Function],
              unique: [Function],
              uniq: [Function],
              union: [Function],
              intersection: [Function],
              difference: [Function],
              unzip: [Function],
              zip: [Function],
              object: [Function],
              findIndex: [Function],
              findLastIndex: [Function],
              sortedIndex: [Function],
              indexOf: [Function],
              lastIndexOf: [Function],
              range: [Function],
              chunk: [Function],
              bind: [Function],
              partial: { [Function] placeholder: [Circular] },
              bindAll: [Function],
              memoize: [Function],
              delay: [Function],
              defer: [Function: bound],
              throttle: [Function],
              debounce: [Function],
              wrap: [Function],
              negate: [Function],
              compose: [Function],
              after: [Function],
              before: [Function],
              once: [Function: bound],
              restArguments: [Function: restArguments],
              keys: [Function],
              allKeys: [Function],
              values: [Function],
              mapObject: [Function],
              pairs: [Function],
              invert: [Function],
              methods: [Function],
              functions: [Function],
              extend: [Function],
              assign: [Function],
              extendOwn: [Function],
              findKey: [Function],
              pick: [Function],
              omit: [Function],
              defaults: [Function],
              create: [Function],
              clone: [Function],
              tap: [Function],
              isMatch: [Function],
              isEqual: [Function],
              isEmpty: [Function],
              isElement: [Function],
              isArray: [Function: isArray],
              isObject: [Function],
              isArguments: [Function],
              isFunction: [Function],
              isString: [Function],
              isNumber: [Function],
              isDate: [Function],
              isRegExp: [Function],
              isError: [Function],
              isSymbol: [Function],
              isMap: [Function],
              isWeakMap: [Function],
              isSet: [Function],
              isWeakSet: [Function],
              isFinite: [Function],
              isNaN: [Function],
              isBoolean: [Function],
              isNull: [Function],
              isUndefined: [Function],
              has: [Function],
              noConflict: [Function],
              identity: [Function],
              constant: [Function],
              noop: [Function],
              property: [Function],
              propertyOf: [Function],
              matches: [Function],
              matcher: [Function],
              times: [Function],
              random: [Function],
              now: [Function: now],
              escape: [Function],
              unescape: [Function],
              result: [Function],
              uniqueId: [Function],
              templateSettings:
               { evaluate: /<%([\s\S]+?)%>/g,
                 interpolate: /<%=([\s\S]+?)%>/g,
                 escape: /<%-([\s\S]+?)%>/g },
              template: [Function],
              chain: [Function],
              mixin: [Function] },
           BN:
            { [Function: BN]
              BN: [Circular],
              wordSize: 26,
              isBN: [Function: isBN],
              max: [Function: max],
              min: [Function: min],
              red: [Function: red],
              _prime: [Function: prime],
              mont: [Function: mont] },
           isBN: [Function: isBN],
           isBigNumber: [Function: isBigNumber],
           isHex: [Function: isHex],
           isHexStrict: [Function: isHexStrict],
           sha3:
            { [Function: sha3]
              _Hash:
               { keccak256: [Function],
                 keccak512: [Function],
                 keccak256s: [Function],
                 keccak512s: [Function] } },
           keccak256:
            { [Function: sha3]
              _Hash:
               { keccak256: [Function],
                 keccak512: [Function],
                 keccak256s: [Function],
                 keccak512s: [Function] } },
           soliditySha3: [Function: soliditySha3],
           isAddress: [Function: isAddress],
           checkAddressChecksum: [Function: checkAddressChecksum],
           toChecksumAddress: [Function: toChecksumAddress],
           toHex: [Function: toHex],
           toBN: [Function: toBN],
           bytesToHex: [Function: bytesToHex],
           hexToBytes: [Function: hexToBytes],
           hexToNumberString: [Function: hexToNumberString],
           hexToNumber: [Function: hexToNumber],
           toDecimal: [Function: hexToNumber],
           numberToHex: [Function: numberToHex],
           fromDecimal: [Function: numberToHex],
           hexToUtf8: [Function: hexToUtf8],
           hexToString: [Function: hexToUtf8],
           toUtf8: [Function: hexToUtf8],
           utf8ToHex: [Function: utf8ToHex],
           stringToHex: [Function: utf8ToHex],
           fromUtf8: [Function: utf8ToHex],
           hexToAscii: [Function: hexToAscii],
           toAscii: [Function: hexToAscii],
           asciiToHex: [Function: asciiToHex],
           fromAscii: [Function: asciiToHex],
           unitMap:
            { noether: '0',
              wei: '1',
              kwei: '1000',
              Kwei: '1000',
              babbage: '1000',
              femtoether: '1000',
              mwei: '1000000',
              Mwei: '1000000',
              lovelace: '1000000',
              picoether: '1000000',
              gwei: '1000000000',
              Gwei: '1000000000',
              shannon: '1000000000',
              nanoether: '1000000000',
              nano: '1000000000',
              szabo: '1000000000000',
              microether: '1000000000000',
              micro: '1000000000000',
              finney: '1000000000000000',
              milliether: '1000000000000000',
              milli: '1000000000000000',
              ether: '1000000000000000000',
              kether: '1000000000000000000000',
              grand: '1000000000000000000000',
              mether: '1000000000000000000000000',
              gether: '1000000000000000000000000000',
              tether: '1000000000000000000000000000000' },
           toWei: [Function: toWei],
           fromWei: [Function: fromWei],
           padLeft: [Function: leftPad],
           leftPad: [Function: leftPad],
           padRight: [Function: rightPad],
           rightPad: [Function: rightPad],
           toTwosComplement: [Function: toTwosComplement] },
        cfx:
         Cfx {
           currentProvider: [Getter/Setter],
           _requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets:
                        { 'localhost:12537:':
                           [ Socket {
                               connecting: false,
                               _hadError: false,
                               _handle:
                                TCP {
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parent: null,
                               _host: 'localhost',
                               _readableState:
                                ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: null,
                                  pipesCount: 0,
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  paused: false,
                                  emitClose: false,
                                  destroyed: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrain: 0,
                                  readingMore: false,
                                  decoder: null,
                                  encoding: null },
                               readable: true,
                               _events:
                                [Object: null prototype] {
                                  end: [Function: onReadableStreamEnd],
                                  free: [Function: onFree],
                                  close: [ [Function: onClose], [Function: socketCloseListener] ],
                                  agentRemove: [Function: onRemove],
                                  drain: [Function: ondrain],
                                  error: [Function: socketErrorListener],
                                  finish:
                                   { [Function: bound onceWrapper] listener: [Function: destroy] } },
                               _eventsCount: 7,
                               _maxListeners: undefined,
                               _writableState:
                                WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: true,
                                  needDrain: false,
                                  ending: true,
                                  ended: true,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  bufferedRequest: null,
                                  lastBufferedRequest: null,
                                  pendingcb: 1,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  bufferedRequestCount: 0,
                                  corkedRequestsFree:
                                   { next:
                                      { next: null,
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] },
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] } },
                               writable: false,
                               allowHalfOpen: false,
                               _sockname: null,
                               _pendingData: null,
                               _pendingEncoding: '',
                               server: null,
                               _server: null,
                               parser: null,
                               _httpMessage:
                                ClientRequest {
                                  _events:
                                   [Object: null prototype] {
                                     response: [Function],
                                     error: [Function],
                                     prefinish: [Function: requestOnPrefinish] },
                                  _eventsCount: 3,
                                  _maxListeners: undefined,
                                  output: [],
                                  outputEncodings: [],
                                  outputCallbacks: [],
                                  outputSize: 0,
                                  writable: true,
                                  _last: false,
                                  chunkedEncoding: false,
                                  shouldKeepAlive: false,
                                  useChunkedEncodingByDefault: true,
                                  sendDate: false,
                                  _removedConnection: false,
                                  _removedContLen: false,
                                  _removedTE: false,
                                  _contentLength: null,
                                  _hasBody: true,
                                  _trailer: '',
                                  finished: true,
                                  _headerSent: true,
                                  socket: [Circular],
                                  connection: [Circular],
                                  _header:
                                   'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                  _onPendingData: [Function: noopPendingOutput],
                                  agent: [Circular],
                                  socketPath: undefined,
                                  timeout: undefined,
                                  method: 'POST',
                                  path: '/',
                                  _ended: true,
                                  res:
                                   IncomingMessage {
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: true,
                                        endEmitted: true,
                                        reading: false,
                                        sync: true,
                                        needReadable: false,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: true,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: true,
                                        decoder: null,
                                        encoding: null },
                                     readable: false,
                                     _events:
                                      [Object: null prototype] {
                                        end: [ [Function: responseOnEnd], [Function] ],
                                        data: [Function],
                                        close: [Function] },
                                     _eventsCount: 3,
                                     _maxListeners: undefined,
                                     socket: [Circular],
                                     connection: [Circular],
                                     httpVersionMajor: 1,
                                     httpVersionMinor: 1,
                                     httpVersion: '1.1',
                                     complete: true,
                                     headers:
                                      { 'content-type': 'application/json; charset=utf-8',
                                        connection: 'close',
                                        'content-length': '1231',
                                        date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                     rawHeaders:
                                      [ 'content-type',
                                        'application/json; charset=utf-8',
                                        'connection',
                                        'close',
                                        'content-length',
                                        '1231',
                                        'date',
                                        'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                     trailers: {},
                                     rawTrailers: [],
                                     aborted: false,
                                     upgrade: false,
                                     url: '',
                                     method: null,
                                     statusCode: 200,
                                     statusMessage: 'OK',
                                     client: [Circular],
                                     _consuming: false,
                                     _dumped: false,
                                     req: [Circular] },
                                  aborted: undefined,
                                  timeoutCb: null,
                                  upgradeOrConnect: false,
                                  parser: null,
                                  maxHeadersCount: null,
                                  [Symbol(isCorked)]: false,
                                  [Symbol(outHeadersKey)]:
                                   [Object: null prototype] {
                                     'content-type': [ 'Content-Type', 'application/json' ],
                                     connection: [ 'Connection', 'keep-alive' ],
                                     host: [ 'Host', 'localhost:12537' ],
                                     'user-agent':
                                      [ 'User-Agent',
                                        'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                     'content-length': [ 'Content-Length', '118' ],
                                     cookie2: [ 'cookie2', '' ],
                                     cookie: [ 'cookie', '' ] } },
                               [Symbol(asyncId)]: 8,
                               [Symbol(lastWriteQueueSize)]: 0,
                               [Symbol(timeout)]: null,
                               [Symbol(kBytesRead)]: 0,
                               [Symbol(kBytesWritten)]: 0 } ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: true,
                    sendAsync: [Function] } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           givenProvider: null,
           providers:
            { WebsocketProvider: [Function: WebsocketProvider],
              HttpProvider: [Function: HttpProvider],
              IpcProvider: [Function: IpcProvider] },
           _provider:
            Provider {
              provider:
               HttpProvider {
                 host: 'http://localhost:12537',
                 httpAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { keepAlive: true, path: null },
                    requests: {},
                    sockets:
                     { 'localhost:12537:':
                        [ Socket {
                            connecting: false,
                            _hadError: false,
                            _handle:
                             TCP {
                               reading: true,
                               onread: [Function: onStreamRead],
                               onconnection: null,
                               [Symbol(owner)]: [Circular] },
                            _parent: null,
                            _host: 'localhost',
                            _readableState:
                             ReadableState {
                               objectMode: false,
                               highWaterMark: 16384,
                               buffer: BufferList { head: null, tail: null, length: 0 },
                               length: 0,
                               pipes: null,
                               pipesCount: 0,
                               flowing: true,
                               ended: false,
                               endEmitted: false,
                               reading: true,
                               sync: false,
                               needReadable: true,
                               emittedReadable: false,
                               readableListening: false,
                               resumeScheduled: false,
                               paused: false,
                               emitClose: false,
                               destroyed: false,
                               defaultEncoding: 'utf8',
                               awaitDrain: 0,
                               readingMore: false,
                               decoder: null,
                               encoding: null },
                            readable: true,
                            _events:
                             [Object: null prototype] {
                               end: [Function: onReadableStreamEnd],
                               free: [Function: onFree],
                               close: [ [Function: onClose], [Function: socketCloseListener] ],
                               agentRemove: [Function: onRemove],
                               drain: [Function: ondrain],
                               error: [Function: socketErrorListener],
                               finish:
                                { [Function: bound onceWrapper] listener: [Function: destroy] } },
                            _eventsCount: 7,
                            _maxListeners: undefined,
                            _writableState:
                             WritableState {
                               objectMode: false,
                               highWaterMark: 16384,
                               finalCalled: true,
                               needDrain: false,
                               ending: true,
                               ended: true,
                               finished: false,
                               destroyed: false,
                               decodeStrings: false,
                               defaultEncoding: 'utf8',
                               length: 0,
                               writing: false,
                               corked: 0,
                               sync: false,
                               bufferProcessing: false,
                               onwrite: [Function: bound onwrite],
                               writecb: null,
                               writelen: 0,
                               bufferedRequest: null,
                               lastBufferedRequest: null,
                               pendingcb: 1,
                               prefinished: false,
                               errorEmitted: false,
                               emitClose: false,
                               bufferedRequestCount: 0,
                               corkedRequestsFree:
                                { next:
                                   { next: null,
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] },
                                  entry: null,
                                  finish: [Function: bound onCorkedFinish] } },
                            writable: false,
                            allowHalfOpen: false,
                            _sockname: null,
                            _pendingData: null,
                            _pendingEncoding: '',
                            server: null,
                            _server: null,
                            parser: null,
                            _httpMessage:
                             ClientRequest {
                               _events:
                                [Object: null prototype] {
                                  response: [Function],
                                  error: [Function],
                                  prefinish: [Function: requestOnPrefinish] },
                               _eventsCount: 3,
                               _maxListeners: undefined,
                               output: [],
                               outputEncodings: [],
                               outputCallbacks: [],
                               outputSize: 0,
                               writable: true,
                               _last: false,
                               chunkedEncoding: false,
                               shouldKeepAlive: false,
                               useChunkedEncodingByDefault: true,
                               sendDate: false,
                               _removedConnection: false,
                               _removedContLen: false,
                               _removedTE: false,
                               _contentLength: null,
                               _hasBody: true,
                               _trailer: '',
                               finished: true,
                               _headerSent: true,
                               socket: [Circular],
                               connection: [Circular],
                               _header:
                                'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                               _onPendingData: [Function: noopPendingOutput],
                               agent: [Circular],
                               socketPath: undefined,
                               timeout: undefined,
                               method: 'POST',
                               path: '/',
                               _ended: true,
                               res:
                                IncomingMessage {
                                  _readableState:
                                   ReadableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     buffer: BufferList { head: null, tail: null, length: 0 },
                                     length: 0,
                                     pipes: null,
                                     pipesCount: 0,
                                     flowing: true,
                                     ended: true,
                                     endEmitted: true,
                                     reading: false,
                                     sync: true,
                                     needReadable: false,
                                     emittedReadable: false,
                                     readableListening: false,
                                     resumeScheduled: false,
                                     paused: false,
                                     emitClose: true,
                                     destroyed: false,
                                     defaultEncoding: 'utf8',
                                     awaitDrain: 0,
                                     readingMore: true,
                                     decoder: null,
                                     encoding: null },
                                  readable: false,
                                  _events:
                                   [Object: null prototype] {
                                     end: [ [Function: responseOnEnd], [Function] ],
                                     data: [Function],
                                     close: [Function] },
                                  _eventsCount: 3,
                                  _maxListeners: undefined,
                                  socket: [Circular],
                                  connection: [Circular],
                                  httpVersionMajor: 1,
                                  httpVersionMinor: 1,
                                  httpVersion: '1.1',
                                  complete: true,
                                  headers:
                                   { 'content-type': 'application/json; charset=utf-8',
                                     connection: 'close',
                                     'content-length': '1231',
                                     date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                  rawHeaders:
                                   [ 'content-type',
                                     'application/json; charset=utf-8',
                                     'connection',
                                     'close',
                                     'content-length',
                                     '1231',
                                     'date',
                                     'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                  trailers: {},
                                  rawTrailers: [],
                                  aborted: false,
                                  upgrade: false,
                                  url: '',
                                  method: null,
                                  statusCode: 200,
                                  statusMessage: 'OK',
                                  client: [Circular],
                                  _consuming: false,
                                  _dumped: false,
                                  req: [Circular] },
                               aborted: undefined,
                               timeoutCb: null,
                               upgradeOrConnect: false,
                               parser: null,
                               maxHeadersCount: null,
                               [Symbol(isCorked)]: false,
                               [Symbol(outHeadersKey)]:
                                [Object: null prototype] {
                                  'content-type': [ 'Content-Type', 'application/json' ],
                                  connection: [ 'Connection', 'keep-alive' ],
                                  host: [ 'Host', 'localhost:12537' ],
                                  'user-agent':
                                   [ 'User-Agent',
                                     'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                  'content-length': [ 'Content-Length', '118' ],
                                  cookie2: [ 'cookie2', '' ],
                                  cookie: [ 'cookie', '' ] } },
                            [Symbol(asyncId)]: 8,
                            [Symbol(lastWriteQueueSize)]: 0,
                            [Symbol(timeout)]: null,
                            [Symbol(kBytesRead)]: 0,
                            [Symbol(kBytesWritten)]: 0 } ] },
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 timeout: 0,
                 headers: undefined,
                 connected: true,
                 sendAsync: [Function] } },
           setProvider: [Function],
           BatchRequest: [Function: bound Batch],
           extend:
            { [Function: ex]
              formatters:
               { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
                 inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
                 inputCallFormatter: [Function: inputCallFormatter],
                 inputTransactionFormatter: [Function: inputTransactionFormatter],
                 inputAddressFormatter: [Function: inputAddressFormatter],
                 inputPostFormatter: [Function: inputPostFormatter],
                 inputLogFormatter: [Function: inputLogFormatter],
                 inputSignFormatter: [Function: inputSignFormatter],
                 outputBigNumberFormatter: [Function: outputBigNumberFormatter],
                 outputTransactionFormatter: [Function: outputTransactionFormatter],
                 outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
                 outputBlockFormatter: [Function: outputBlockFormatter],
                 outputLogFormatter: [Function: outputLogFormatter],
                 outputPostFormatter: [Function: outputPostFormatter],
                 outputSyncingFormatter: [Function: outputSyncingFormatter] },
              utils:
               { _fireError: [Function: _fireError],
                 _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
                 _flattenTypes: [Function: _flattenTypes],
                 randomHex: [Function: randomHex],
                 _:
                  { [Function: _]
                    _: [Circular],
                    VERSION: '1.9.1',
                    iteratee: [Function: builtinIteratee],
                    forEach: [Function],
                    each: [Function],
                    collect: [Function],
                    map: [Function],
                    inject: [Function],
                    foldl: [Function],
                    reduce: [Function],
                    foldr: [Function],
                    reduceRight: [Function],
                    detect: [Function],
                    find: [Function],
                    select: [Function],
                    filter: [Function],
                    reject: [Function],
                    all: [Function],
                    every: [Function],
                    any: [Function],
                    some: [Function],
                    include: [Function],
                    includes: [Function],
                    contains: [Function],
                    invoke: [Function],
                    pluck: [Function],
                    where: [Function],
                    findWhere: [Function],
                    max: [Function],
                    min: [Function],
                    shuffle: [Function],
                    sample: [Function],
                    sortBy: [Function],
                    groupBy: [Function],
                    indexBy: [Function],
                    countBy: [Function],
                    toArray: [Function],
                    size: [Function],
                    partition: [Function],
                    take: [Function],
                    head: [Function],
                    first: [Function],
                    initial: [Function],
                    last: [Function],
                    drop: [Function],
                    tail: [Function],
                    rest: [Function],
                    compact: [Function],
                    flatten: [Function],
                    without: [Function],
                    unique: [Function],
                    uniq: [Function],
                    union: [Function],
                    intersection: [Function],
                    difference: [Function],
                    unzip: [Function],
                    zip: [Function],
                    object: [Function],
                    findIndex: [Function],
                    findLastIndex: [Function],
                    sortedIndex: [Function],
                    indexOf: [Function],
                    lastIndexOf: [Function],
                    range: [Function],
                    chunk: [Function],
                    bind: [Function],
                    partial: { [Function] placeholder: [Circular] },
                    bindAll: [Function],
                    memoize: [Function],
                    delay: [Function],
                    defer: [Function: bound],
                    throttle: [Function],
                    debounce: [Function],
                    wrap: [Function],
                    negate: [Function],
                    compose: [Function],
                    after: [Function],
                    before: [Function],
                    once: [Function: bound],
                    restArguments: [Function: restArguments],
                    keys: [Function],
                    allKeys: [Function],
                    values: [Function],
                    mapObject: [Function],
                    pairs: [Function],
                    invert: [Function],
                    methods: [Function],
                    functions: [Function],
                    extend: [Function],
                    assign: [Function],
                    extendOwn: [Function],
                    findKey: [Function],
                    pick: [Function],
                    omit: [Function],
                    defaults: [Function],
                    create: [Function],
                    clone: [Function],
                    tap: [Function],
                    isMatch: [Function],
                    isEqual: [Function],
                    isEmpty: [Function],
                    isElement: [Function],
                    isArray: [Function: isArray],
                    isObject: [Function],
                    isArguments: [Function],
                    isFunction: [Function],
                    isString: [Function],
                    isNumber: [Function],
                    isDate: [Function],
                    isRegExp: [Function],
                    isError: [Function],
                    isSymbol: [Function],
                    isMap: [Function],
                    isWeakMap: [Function],
                    isSet: [Function],
                    isWeakSet: [Function],
                    isFinite: [Function],
                    isNaN: [Function],
                    isBoolean: [Function],
                    isNull: [Function],
                    isUndefined: [Function],
                    has: [Function],
                    noConflict: [Function],
                    identity: [Function],
                    constant: [Function],
                    noop: [Function],
                    property: [Function],
                    propertyOf: [Function],
                    matches: [Function],
                    matcher: [Function],
                    times: [Function],
                    random: [Function],
                    now: [Function: now],
                    escape: [Function],
                    unescape: [Function],
                    result: [Function],
                    uniqueId: [Function],
                    templateSettings:
                     { evaluate: /<%([\s\S]+?)%>/g,
                       interpolate: /<%=([\s\S]+?)%>/g,
                       escape: /<%-([\s\S]+?)%>/g },
                    template: [Function],
                    chain: [Function],
                    mixin: [Function] },
                 BN:
                  { [Function: BN]
                    BN: [Circular],
                    wordSize: 26,
                    isBN: [Function: isBN],
                    max: [Function: max],
                    min: [Function: min],
                    red: [Function: red],
                    _prime: [Function: prime],
                    mont: [Function: mont] },
                 isBN: [Function: isBN],
                 isBigNumber: [Function: isBigNumber],
                 isHex: [Function: isHex],
                 isHexStrict: [Function: isHexStrict],
                 sha3:
                  { [Function: sha3]
                    _Hash:
                     { keccak256: [Function],
                       keccak512: [Function],
                       keccak256s: [Function],
                       keccak512s: [Function] } },
                 keccak256:
                  { [Function: sha3]
                    _Hash:
                     { keccak256: [Function],
                       keccak512: [Function],
                       keccak256s: [Function],
                       keccak512s: [Function] } },
                 soliditySha3: [Function: soliditySha3],
                 isAddress: [Function: isAddress],
                 checkAddressChecksum: [Function: checkAddressChecksum],
                 toChecksumAddress: [Function: toChecksumAddress],
                 toHex: [Function: toHex],
                 toBN: [Function: toBN],
                 bytesToHex: [Function: bytesToHex],
                 hexToBytes: [Function: hexToBytes],
                 hexToNumberString: [Function: hexToNumberString],
                 hexToNumber: [Function: hexToNumber],
                 toDecimal: [Function: hexToNumber],
                 numberToHex: [Function: numberToHex],
                 fromDecimal: [Function: numberToHex],
                 hexToUtf8: [Function: hexToUtf8],
                 hexToString: [Function: hexToUtf8],
                 toUtf8: [Function: hexToUtf8],
                 utf8ToHex: [Function: utf8ToHex],
                 stringToHex: [Function: utf8ToHex],
                 fromUtf8: [Function: utf8ToHex],
                 hexToAscii: [Function: hexToAscii],
                 toAscii: [Function: hexToAscii],
                 asciiToHex: [Function: asciiToHex],
                 fromAscii: [Function: asciiToHex],
                 unitMap:
                  { noether: '0',
                    wei: '1',
                    kwei: '1000',
                    Kwei: '1000',
                    babbage: '1000',
                    femtoether: '1000',
                    mwei: '1000000',
                    Mwei: '1000000',
                    lovelace: '1000000',
                    picoether: '1000000',
                    gwei: '1000000000',
                    Gwei: '1000000000',
                    shannon: '1000000000',
                    nanoether: '1000000000',
                    nano: '1000000000',
                    szabo: '1000000000000',
                    microether: '1000000000000',
                    micro: '1000000000000',
                    finney: '1000000000000000',
                    milliether: '1000000000000000',
                    milli: '1000000000000000',
                    ether: '1000000000000000000',
                    kether: '1000000000000000000000',
                    grand: '1000000000000000000000',
                    mether: '1000000000000000000000000',
                    gether: '1000000000000000000000000000',
                    tether: '1000000000000000000000000000000' },
                 toWei: [Function: toWei],
                 fromWei: [Function: fromWei],
                 padLeft: [Function: leftPad],
                 leftPad: [Function: leftPad],
                 padRight: [Function: rightPad],
                 rightPad: [Function: rightPad],
                 toTwosComplement: [Function: toTwosComplement] },
              Method: [Function: Method] },
           defaultAccount: [Getter/Setter],
           defaultBlock: [Getter/Setter],
           clearSubscriptions: [Function],
           net:
            Net {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets:
                           { 'localhost:12537:':
                              [ Socket {
                                  connecting: false,
                                  _hadError: false,
                                  _handle:
                                   TCP {
                                     reading: true,
                                     onread: [Function: onStreamRead],
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parent: null,
                                  _host: 'localhost',
                                  _readableState:
                                   ReadableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     buffer: BufferList { head: null, tail: null, length: 0 },
                                     length: 0,
                                     pipes: null,
                                     pipesCount: 0,
                                     flowing: true,
                                     ended: false,
                                     endEmitted: false,
                                     reading: true,
                                     sync: false,
                                     needReadable: true,
                                     emittedReadable: false,
                                     readableListening: false,
                                     resumeScheduled: false,
                                     paused: false,
                                     emitClose: false,
                                     destroyed: false,
                                     defaultEncoding: 'utf8',
                                     awaitDrain: 0,
                                     readingMore: false,
                                     decoder: null,
                                     encoding: null },
                                  readable: true,
                                  _events:
                                   [Object: null prototype] {
                                     end: [Function: onReadableStreamEnd],
                                     free: [Function: onFree],
                                     close: [ [Function: onClose], [Function: socketCloseListener] ],
                                     agentRemove: [Function: onRemove],
                                     drain: [Function: ondrain],
                                     error: [Function: socketErrorListener],
                                     finish:
                                      { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                  _eventsCount: 7,
                                  _maxListeners: undefined,
                                  _writableState:
                                   WritableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     finalCalled: true,
                                     needDrain: false,
                                     ending: true,
                                     ended: true,
                                     finished: false,
                                     destroyed: false,
                                     decodeStrings: false,
                                     defaultEncoding: 'utf8',
                                     length: 0,
                                     writing: false,
                                     corked: 0,
                                     sync: false,
                                     bufferProcessing: false,
                                     onwrite: [Function: bound onwrite],
                                     writecb: null,
                                     writelen: 0,
                                     bufferedRequest: null,
                                     lastBufferedRequest: null,
                                     pendingcb: 1,
                                     prefinished: false,
                                     errorEmitted: false,
                                     emitClose: false,
                                     bufferedRequestCount: 0,
                                     corkedRequestsFree:
                                      { next:
                                         { next: null,
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] },
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] } },
                                  writable: false,
                                  allowHalfOpen: false,
                                  _sockname: null,
                                  _pendingData: null,
                                  _pendingEncoding: '',
                                  server: null,
                                  _server: null,
                                  parser: null,
                                  _httpMessage:
                                   ClientRequest {
                                     _events:
                                      [Object: null prototype] {
                                        response: [Function],
                                        error: [Function],
                                        prefinish: [Function: requestOnPrefinish] },
                                     _eventsCount: 3,
                                     _maxListeners: undefined,
                                     output: [],
                                     outputEncodings: [],
                                     outputCallbacks: [],
                                     outputSize: 0,
                                     writable: true,
                                     _last: false,
                                     chunkedEncoding: false,
                                     shouldKeepAlive: false,
                                     useChunkedEncodingByDefault: true,
                                     sendDate: false,
                                     _removedConnection: false,
                                     _removedContLen: false,
                                     _removedTE: false,
                                     _contentLength: null,
                                     _hasBody: true,
                                     _trailer: '',
                                     finished: true,
                                     _headerSent: true,
                                     socket: [Circular],
                                     connection: [Circular],
                                     _header:
                                      'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                     _onPendingData: [Function: noopPendingOutput],
                                     agent: [Circular],
                                     socketPath: undefined,
                                     timeout: undefined,
                                     method: 'POST',
                                     path: '/',
                                     _ended: true,
                                     res:
                                      IncomingMessage {
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: true,
                                           endEmitted: true,
                                           reading: false,
                                           sync: true,
                                           needReadable: false,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: true,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: true,
                                           decoder: null,
                                           encoding: null },
                                        readable: false,
                                        _events:
                                         [Object: null prototype] {
                                           end: [ [Function: responseOnEnd], [Function] ],
                                           data: [Function],
                                           close: [Function] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        socket: [Circular],
                                        connection: [Circular],
                                        httpVersionMajor: 1,
                                        httpVersionMinor: 1,
                                        httpVersion: '1.1',
                                        complete: true,
                                        headers:
                                         { 'content-type': 'application/json; charset=utf-8',
                                           connection: 'close',
                                           'content-length': '1231',
                                           date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                        rawHeaders:
                                         [ 'content-type',
                                           'application/json; charset=utf-8',
                                           'connection',
                                           'close',
                                           'content-length',
                                           '1231',
                                           'date',
                                           'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                        trailers: {},
                                        rawTrailers: [],
                                        aborted: false,
                                        upgrade: false,
                                        url: '',
                                        method: null,
                                        statusCode: 200,
                                        statusMessage: 'OK',
                                        client: [Circular],
                                        _consuming: false,
                                        _dumped: false,
                                        req: [Circular] },
                                     aborted: undefined,
                                     timeoutCb: null,
                                     upgradeOrConnect: false,
                                     parser: null,
                                     maxHeadersCount: null,
                                     [Symbol(isCorked)]: false,
                                     [Symbol(outHeadersKey)]:
                                      [Object: null prototype] {
                                        'content-type': [ 'Content-Type', 'application/json' ],
                                        connection: [ 'Connection', 'keep-alive' ],
                                        host: [ 'Host', 'localhost:12537' ],
                                        'user-agent':
                                         [ 'User-Agent',
                                           'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                        'content-length': [ 'Content-Length', '118' ],
                                        cookie2: [ 'cookie2', '' ],
                                        cookie: [ 'cookie', '' ] } },
                                  [Symbol(asyncId)]: 8,
                                  [Symbol(lastWriteQueueSize)]: 0,
                                  [Symbol(timeout)]: null,
                                  [Symbol(kBytesRead)]: 0,
                                  [Symbol(kBytesWritten)]: 0 } ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: true,
                       sendAsync: [Function] } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets:
                        { 'localhost:12537:':
                           [ Socket {
                               connecting: false,
                               _hadError: false,
                               _handle:
                                TCP {
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parent: null,
                               _host: 'localhost',
                               _readableState:
                                ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: null,
                                  pipesCount: 0,
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  paused: false,
                                  emitClose: false,
                                  destroyed: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrain: 0,
                                  readingMore: false,
                                  decoder: null,
                                  encoding: null },
                               readable: true,
                               _events:
                                [Object: null prototype] {
                                  end: [Function: onReadableStreamEnd],
                                  free: [Function: onFree],
                                  close: [ [Function: onClose], [Function: socketCloseListener] ],
                                  agentRemove: [Function: onRemove],
                                  drain: [Function: ondrain],
                                  error: [Function: socketErrorListener],
                                  finish:
                                   { [Function: bound onceWrapper] listener: [Function: destroy] } },
                               _eventsCount: 7,
                               _maxListeners: undefined,
                               _writableState:
                                WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: true,
                                  needDrain: false,
                                  ending: true,
                                  ended: true,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  bufferedRequest: null,
                                  lastBufferedRequest: null,
                                  pendingcb: 1,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  bufferedRequestCount: 0,
                                  corkedRequestsFree:
                                   { next:
                                      { next: null,
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] },
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] } },
                               writable: false,
                               allowHalfOpen: false,
                               _sockname: null,
                               _pendingData: null,
                               _pendingEncoding: '',
                               server: null,
                               _server: null,
                               parser: null,
                               _httpMessage:
                                ClientRequest {
                                  _events:
                                   [Object: null prototype] {
                                     response: [Function],
                                     error: [Function],
                                     prefinish: [Function: requestOnPrefinish] },
                                  _eventsCount: 3,
                                  _maxListeners: undefined,
                                  output: [],
                                  outputEncodings: [],
                                  outputCallbacks: [],
                                  outputSize: 0,
                                  writable: true,
                                  _last: false,
                                  chunkedEncoding: false,
                                  shouldKeepAlive: false,
                                  useChunkedEncodingByDefault: true,
                                  sendDate: false,
                                  _removedConnection: false,
                                  _removedContLen: false,
                                  _removedTE: false,
                                  _contentLength: null,
                                  _hasBody: true,
                                  _trailer: '',
                                  finished: true,
                                  _headerSent: true,
                                  socket: [Circular],
                                  connection: [Circular],
                                  _header:
                                   'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                  _onPendingData: [Function: noopPendingOutput],
                                  agent: [Circular],
                                  socketPath: undefined,
                                  timeout: undefined,
                                  method: 'POST',
                                  path: '/',
                                  _ended: true,
                                  res:
                                   IncomingMessage {
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: true,
                                        endEmitted: true,
                                        reading: false,
                                        sync: true,
                                        needReadable: false,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: true,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: true,
                                        decoder: null,
                                        encoding: null },
                                     readable: false,
                                     _events:
                                      [Object: null prototype] {
                                        end: [ [Function: responseOnEnd], [Function] ],
                                        data: [Function],
                                        close: [Function] },
                                     _eventsCount: 3,
                                     _maxListeners: undefined,
                                     socket: [Circular],
                                     connection: [Circular],
                                     httpVersionMajor: 1,
                                     httpVersionMinor: 1,
                                     httpVersion: '1.1',
                                     complete: true,
                                     headers:
                                      { 'content-type': 'application/json; charset=utf-8',
                                        connection: 'close',
                                        'content-length': '1231',
                                        date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                     rawHeaders:
                                      [ 'content-type',
                                        'application/json; charset=utf-8',
                                        'connection',
                                        'close',
                                        'content-length',
                                        '1231',
                                        'date',
                                        'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                     trailers: {},
                                     rawTrailers: [],
                                     aborted: false,
                                     upgrade: false,
                                     url: '',
                                     method: null,
                                     statusCode: 200,
                                     statusMessage: 'OK',
                                     client: [Circular],
                                     _consuming: false,
                                     _dumped: false,
                                     req: [Circular] },
                                  aborted: undefined,
                                  timeoutCb: null,
                                  upgradeOrConnect: false,
                                  parser: null,
                                  maxHeadersCount: null,
                                  [Symbol(isCorked)]: false,
                                  [Symbol(outHeadersKey)]:
                                   [Object: null prototype] {
                                     'content-type': [ 'Content-Type', 'application/json' ],
                                     connection: [ 'Connection', 'keep-alive' ],
                                     host: [ 'Host', 'localhost:12537' ],
                                     'user-agent':
                                      [ 'User-Agent',
                                        'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                     'content-length': [ 'Content-Length', '118' ],
                                     cookie2: [ 'cookie2', '' ],
                                     cookie: [ 'cookie', '' ] } },
                               [Symbol(asyncId)]: 8,
                               [Symbol(lastWriteQueueSize)]: 0,
                               [Symbol(timeout)]: null,
                               [Symbol(kBytesRead)]: 0,
                               [Symbol(kBytesWritten)]: 0 } ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: true,
                    sendAsync: [Function] } },
              setProvider: [Function],
              BatchRequest: [Function: bound Batch],
              extend:
               { [Function: ex]
                 formatters:
                  { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
                    inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
                    inputCallFormatter: [Function: inputCallFormatter],
                    inputTransactionFormatter: [Function: inputTransactionFormatter],
                    inputAddressFormatter: [Function: inputAddressFormatter],
                    inputPostFormatter: [Function: inputPostFormatter],
                    inputLogFormatter: [Function: inputLogFormatter],
                    inputSignFormatter: [Function: inputSignFormatter],
                    outputBigNumberFormatter: [Function: outputBigNumberFormatter],
                    outputTransactionFormatter: [Function: outputTransactionFormatter],
                    outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
                    outputBlockFormatter: [Function: outputBlockFormatter],
                    outputLogFormatter: [Function: outputLogFormatter],
                    outputPostFormatter: [Function: outputPostFormatter],
                    outputSyncingFormatter: [Function: outputSyncingFormatter] },
                 utils:
                  { _fireError: [Function: _fireError],
                    _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
                    _flattenTypes: [Function: _flattenTypes],
                    randomHex: [Function: randomHex],
                    _:
                     { [Function: _]
                       _: [Circular],
                       VERSION: '1.9.1',
                       iteratee: [Function: builtinIteratee],
                       forEach: [Function],
                       each: [Function],
                       collect: [Function],
                       map: [Function],
                       inject: [Function],
                       foldl: [Function],
                       reduce: [Function],
                       foldr: [Function],
                       reduceRight: [Function],
                       detect: [Function],
                       find: [Function],
                       select: [Function],
                       filter: [Function],
                       reject: [Function],
                       all: [Function],
                       every: [Function],
                       any: [Function],
                       some: [Function],
                       include: [Function],
                       includes: [Function],
                       contains: [Function],
                       invoke: [Function],
                       pluck: [Function],
                       where: [Function],
                       findWhere: [Function],
                       max: [Function],
                       min: [Function],
                       shuffle: [Function],
                       sample: [Function],
                       sortBy: [Function],
                       groupBy: [Function],
                       indexBy: [Function],
                       countBy: [Function],
                       toArray: [Function],
                       size: [Function],
                       partition: [Function],
                       take: [Function],
                       head: [Function],
                       first: [Function],
                       initial: [Function],
                       last: [Function],
                       drop: [Function],
                       tail: [Function],
                       rest: [Function],
                       compact: [Function],
                       flatten: [Function],
                       without: [Function],
                       unique: [Function],
                       uniq: [Function],
                       union: [Function],
                       intersection: [Function],
                       difference: [Function],
                       unzip: [Function],
                       zip: [Function],
                       object: [Function],
                       findIndex: [Function],
                       findLastIndex: [Function],
                       sortedIndex: [Function],
                       indexOf: [Function],
                       lastIndexOf: [Function],
                       range: [Function],
                       chunk: [Function],
                       bind: [Function],
                       partial: { [Function] placeholder: [Circular] },
                       bindAll: [Function],
                       memoize: [Function],
                       delay: [Function],
                       defer: [Function: bound],
                       throttle: [Function],
                       debounce: [Function],
                       wrap: [Function],
                       negate: [Function],
                       compose: [Function],
                       after: [Function],
                       before: [Function],
                       once: [Function: bound],
                       restArguments: [Function: restArguments],
                       keys: [Function],
                       allKeys: [Function],
                       values: [Function],
                       mapObject: [Function],
                       pairs: [Function],
                       invert: [Function],
                       methods: [Function],
                       functions: [Function],
                       extend: [Function],
                       assign: [Function],
                       extendOwn: [Function],
                       findKey: [Function],
                       pick: [Function],
                       omit: [Function],
                       defaults: [Function],
                       create: [Function],
                       clone: [Function],
                       tap: [Function],
                       isMatch: [Function],
                       isEqual: [Function],
                       isEmpty: [Function],
                       isElement: [Function],
                       isArray: [Function: isArray],
                       isObject: [Function],
                       isArguments: [Function],
                       isFunction: [Function],
                       isString: [Function],
                       isNumber: [Function],
                       isDate: [Function],
                       isRegExp: [Function],
                       isError: [Function],
                       isSymbol: [Function],
                       isMap: [Function],
                       isWeakMap: [Function],
                       isSet: [Function],
                       isWeakSet: [Function],
                       isFinite: [Function],
                       isNaN: [Function],
                       isBoolean: [Function],
                       isNull: [Function],
                       isUndefined: [Function],
                       has: [Function],
                       noConflict: [Function],
                       identity: [Function],
                       constant: [Function],
                       noop: [Function],
                       property: [Function],
                       propertyOf: [Function],
                       matches: [Function],
                       matcher: [Function],
                       times: [Function],
                       random: [Function],
                       now: [Function: now],
                       escape: [Function],
                       unescape: [Function],
                       result: [Function],
                       uniqueId: [Function],
                       templateSettings:
                        { evaluate: /<%([\s\S]+?)%>/g,
                          interpolate: /<%=([\s\S]+?)%>/g,
                          escape: /<%-([\s\S]+?)%>/g },
                       template: [Function],
                       chain: [Function],
                       mixin: [Function] },
                    BN:
                     { [Function: BN]
                       BN: [Circular],
                       wordSize: 26,
                       isBN: [Function: isBN],
                       max: [Function: max],
                       min: [Function: min],
                       red: [Function: red],
                       _prime: [Function: prime],
                       mont: [Function: mont] },
                    isBN: [Function: isBN],
                    isBigNumber: [Function: isBigNumber],
                    isHex: [Function: isHex],
                    isHexStrict: [Function: isHexStrict],
                    sha3:
                     { [Function: sha3]
                       _Hash:
                        { keccak256: [Function],
                          keccak512: [Function],
                          keccak256s: [Function],
                          keccak512s: [Function] } },
                    keccak256:
                     { [Function: sha3]
                       _Hash:
                        { keccak256: [Function],
                          keccak512: [Function],
                          keccak256s: [Function],
                          keccak512s: [Function] } },
                    soliditySha3: [Function: soliditySha3],
                    isAddress: [Function: isAddress],
                    checkAddressChecksum: [Function: checkAddressChecksum],
                    toChecksumAddress: [Function: toChecksumAddress],
                    toHex: [Function: toHex],
                    toBN: [Function: toBN],
                    bytesToHex: [Function: bytesToHex],
                    hexToBytes: [Function: hexToBytes],
                    hexToNumberString: [Function: hexToNumberString],
                    hexToNumber: [Function: hexToNumber],
                    toDecimal: [Function: hexToNumber],
                    numberToHex: [Function: numberToHex],
                    fromDecimal: [Function: numberToHex],
                    hexToUtf8: [Function: hexToUtf8],
                    hexToString: [Function: hexToUtf8],
                    toUtf8: [Function: hexToUtf8],
                    utf8ToHex: [Function: utf8ToHex],
                    stringToHex: [Function: utf8ToHex],
                    fromUtf8: [Function: utf8ToHex],
                    hexToAscii: [Function: hexToAscii],
                    toAscii: [Function: hexToAscii],
                    asciiToHex: [Function: asciiToHex],
                    fromAscii: [Function: asciiToHex],
                    unitMap:
                     { noether: '0',
                       wei: '1',
                       kwei: '1000',
                       Kwei: '1000',
                       babbage: '1000',
                       femtoether: '1000',
                       mwei: '1000000',
                       Mwei: '1000000',
                       lovelace: '1000000',
                       picoether: '1000000',
                       gwei: '1000000000',
                       Gwei: '1000000000',
                       shannon: '1000000000',
                       nanoether: '1000000000',
                       nano: '1000000000',
                       szabo: '1000000000000',
                       microether: '1000000000000',
                       micro: '1000000000000',
                       finney: '1000000000000000',
                       milliether: '1000000000000000',
                       milli: '1000000000000000',
                       ether: '1000000000000000000',
                       kether: '1000000000000000000000',
                       grand: '1000000000000000000000',
                       mether: '1000000000000000000000000',
                       gether: '1000000000000000000000000000',
                       tether: '1000000000000000000000000000000' },
                    toWei: [Function: toWei],
                    fromWei: [Function: fromWei],
                    padLeft: [Function: leftPad],
                    leftPad: [Function: leftPad],
                    padRight: [Function: rightPad],
                    rightPad: [Function: rightPad],
                    toTwosComplement: [Function: toTwosComplement] },
                 Method: [Function: Method] },
              getId:
               { [Function: send]
                 method:
                  Method {
                    name: 'getId',
                    call: 'net_version',
                    params: 0,
                    inputFormatter: undefined,
                    outputFormatter: [Function: hexToNumber],
                    transformPayload: undefined,
                    extraFormatters: undefined,
                    requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    accounts: undefined,
                    defaultBlock: 'latest_state',
                    defaultAccount: null },
                 request: [Function: bound ],
                 call: 'net_version' },
              isListening:
               { [Function: send]
                 method:
                  Method {
                    name: 'isListening',
                    call: 'net_listening',
                    params: 0,
                    inputFormatter: undefined,
                    outputFormatter: undefined,
                    transformPayload: undefined,
                    extraFormatters: undefined,
                    requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    accounts: undefined,
                    defaultBlock: 'latest_state',
                    defaultAccount: null },
                 request: [Function: bound ],
                 call: 'net_listening' },
              getPeerCount:
               { [Function: send]
                 method:
                  Method {
                    name: 'getPeerCount',
                    call: 'net_peerCount',
                    params: 0,
                    inputFormatter: undefined,
                    outputFormatter: [Function: hexToNumber],
                    transformPayload: undefined,
                    extraFormatters: undefined,
                    requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    accounts: undefined,
                    defaultBlock: 'latest_state',
                    defaultAccount: null },
                 request: [Function: bound ],
                 call: 'net_peerCount' },
              getNetworkType: [Function: bound getNetworkType] },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets:
                           { 'localhost:12537:':
                              [ Socket {
                                  connecting: false,
                                  _hadError: false,
                                  _handle:
                                   TCP {
                                     reading: true,
                                     onread: [Function: onStreamRead],
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parent: null,
                                  _host: 'localhost',
                                  _readableState:
                                   ReadableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     buffer: BufferList { head: null, tail: null, length: 0 },
                                     length: 0,
                                     pipes: null,
                                     pipesCount: 0,
                                     flowing: true,
                                     ended: false,
                                     endEmitted: false,
                                     reading: true,
                                     sync: false,
                                     needReadable: true,
                                     emittedReadable: false,
                                     readableListening: false,
                                     resumeScheduled: false,
                                     paused: false,
                                     emitClose: false,
                                     destroyed: false,
                                     defaultEncoding: 'utf8',
                                     awaitDrain: 0,
                                     readingMore: false,
                                     decoder: null,
                                     encoding: null },
                                  readable: true,
                                  _events:
                                   [Object: null prototype] {
                                     end: [Function: onReadableStreamEnd],
                                     free: [Function: onFree],
                                     close: [ [Function: onClose], [Function: socketCloseListener] ],
                                     agentRemove: [Function: onRemove],
                                     drain: [Function: ondrain],
                                     error: [Function: socketErrorListener],
                                     finish:
                                      { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                  _eventsCount: 7,
                                  _maxListeners: undefined,
                                  _writableState:
                                   WritableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     finalCalled: true,
                                     needDrain: false,
                                     ending: true,
                                     ended: true,
                                     finished: false,
                                     destroyed: false,
                                     decodeStrings: false,
                                     defaultEncoding: 'utf8',
                                     length: 0,
                                     writing: false,
                                     corked: 0,
                                     sync: false,
                                     bufferProcessing: false,
                                     onwrite: [Function: bound onwrite],
                                     writecb: null,
                                     writelen: 0,
                                     bufferedRequest: null,
                                     lastBufferedRequest: null,
                                     pendingcb: 1,
                                     prefinished: false,
                                     errorEmitted: false,
                                     emitClose: false,
                                     bufferedRequestCount: 0,
                                     corkedRequestsFree:
                                      { next:
                                         { next: null,
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] },
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] } },
                                  writable: false,
                                  allowHalfOpen: false,
                                  _sockname: null,
                                  _pendingData: null,
                                  _pendingEncoding: '',
                                  server: null,
                                  _server: null,
                                  parser: null,
                                  _httpMessage:
                                   ClientRequest {
                                     _events:
                                      [Object: null prototype] {
                                        response: [Function],
                                        error: [Function],
                                        prefinish: [Function: requestOnPrefinish] },
                                     _eventsCount: 3,
                                     _maxListeners: undefined,
                                     output: [],
                                     outputEncodings: [],
                                     outputCallbacks: [],
                                     outputSize: 0,
                                     writable: true,
                                     _last: false,
                                     chunkedEncoding: false,
                                     shouldKeepAlive: false,
                                     useChunkedEncodingByDefault: true,
                                     sendDate: false,
                                     _removedConnection: false,
                                     _removedContLen: false,
                                     _removedTE: false,
                                     _contentLength: null,
                                     _hasBody: true,
                                     _trailer: '',
                                     finished: true,
                                     _headerSent: true,
                                     socket: [Circular],
                                     connection: [Circular],
                                     _header:
                                      'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                     _onPendingData: [Function: noopPendingOutput],
                                     agent: [Circular],
                                     socketPath: undefined,
                                     timeout: undefined,
                                     method: 'POST',
                                     path: '/',
                                     _ended: true,
                                     res:
                                      IncomingMessage {
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: true,
                                           endEmitted: true,
                                           reading: false,
                                           sync: true,
                                           needReadable: false,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: true,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: true,
                                           decoder: null,
                                           encoding: null },
                                        readable: false,
                                        _events:
                                         [Object: null prototype] {
                                           end: [ [Function: responseOnEnd], [Function] ],
                                           data: [Function],
                                           close: [Function] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        socket: [Circular],
                                        connection: [Circular],
                                        httpVersionMajor: 1,
                                        httpVersionMinor: 1,
                                        httpVersion: '1.1',
                                        complete: true,
                                        headers:
                                         { 'content-type': 'application/json; charset=utf-8',
                                           connection: 'close',
                                           'content-length': '1231',
                                           date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                        rawHeaders:
                                         [ 'content-type',
                                           'application/json; charset=utf-8',
                                           'connection',
                                           'close',
                                           'content-length',
                                           '1231',
                                           'date',
                                           'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                        trailers: {},
                                        rawTrailers: [],
                                        aborted: false,
                                        upgrade: false,
                                        url: '',
                                        method: null,
                                        statusCode: 200,
                                        statusMessage: 'OK',
                                        client: [Circular],
                                        _consuming: false,
                                        _dumped: false,
                                        req: [Circular] },
                                     aborted: undefined,
                                     timeoutCb: null,
                                     upgradeOrConnect: false,
                                     parser: null,
                                     maxHeadersCount: null,
                                     [Symbol(isCorked)]: false,
                                     [Symbol(outHeadersKey)]:
                                      [Object: null prototype] {
                                        'content-type': [ 'Content-Type', 'application/json' ],
                                        connection: [ 'Connection', 'keep-alive' ],
                                        host: [ 'Host', 'localhost:12537' ],
                                        'user-agent':
                                         [ 'User-Agent',
                                           'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                        'content-length': [ 'Content-Length', '118' ],
                                        cookie2: [ 'cookie2', '' ],
                                        cookie: [ 'cookie', '' ] } },
                                  [Symbol(asyncId)]: 8,
                                  [Symbol(lastWriteQueueSize)]: 0,
                                  [Symbol(timeout)]: null,
                                  [Symbol(kBytesRead)]: 0,
                                  [Symbol(kBytesWritten)]: 0 } ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: true,
                       sendAsync: [Function] } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets:
                        { 'localhost:12537:':
                           [ Socket {
                               connecting: false,
                               _hadError: false,
                               _handle:
                                TCP {
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parent: null,
                               _host: 'localhost',
                               _readableState:
                                ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: null,
                                  pipesCount: 0,
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  paused: false,
                                  emitClose: false,
                                  destroyed: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrain: 0,
                                  readingMore: false,
                                  decoder: null,
                                  encoding: null },
                               readable: true,
                               _events:
                                [Object: null prototype] {
                                  end: [Function: onReadableStreamEnd],
                                  free: [Function: onFree],
                                  close: [ [Function: onClose], [Function: socketCloseListener] ],
                                  agentRemove: [Function: onRemove],
                                  drain: [Function: ondrain],
                                  error: [Function: socketErrorListener],
                                  finish:
                                   { [Function: bound onceWrapper] listener: [Function: destroy] } },
                               _eventsCount: 7,
                               _maxListeners: undefined,
                               _writableState:
                                WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: true,
                                  needDrain: false,
                                  ending: true,
                                  ended: true,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  bufferedRequest: null,
                                  lastBufferedRequest: null,
                                  pendingcb: 1,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  bufferedRequestCount: 0,
                                  corkedRequestsFree:
                                   { next:
                                      { next: null,
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] },
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] } },
                               writable: false,
                               allowHalfOpen: false,
                               _sockname: null,
                               _pendingData: null,
                               _pendingEncoding: '',
                               server: null,
                               _server: null,
                               parser: null,
                               _httpMessage:
                                ClientRequest {
                                  _events:
                                   [Object: null prototype] {
                                     response: [Function],
                                     error: [Function],
                                     prefinish: [Function: requestOnPrefinish] },
                                  _eventsCount: 3,
                                  _maxListeners: undefined,
                                  output: [],
                                  outputEncodings: [],
                                  outputCallbacks: [],
                                  outputSize: 0,
                                  writable: true,
                                  _last: false,
                                  chunkedEncoding: false,
                                  shouldKeepAlive: false,
                                  useChunkedEncodingByDefault: true,
                                  sendDate: false,
                                  _removedConnection: false,
                                  _removedContLen: false,
                                  _removedTE: false,
                                  _contentLength: null,
                                  _hasBody: true,
                                  _trailer: '',
                                  finished: true,
                                  _headerSent: true,
                                  socket: [Circular],
                                  connection: [Circular],
                                  _header:
                                   'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                  _onPendingData: [Function: noopPendingOutput],
                                  agent: [Circular],
                                  socketPath: undefined,
                                  timeout: undefined,
                                  method: 'POST',
                                  path: '/',
                                  _ended: true,
                                  res:
                                   IncomingMessage {
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: true,
                                        endEmitted: true,
                                        reading: false,
                                        sync: true,
                                        needReadable: false,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: true,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: true,
                                        decoder: null,
                                        encoding: null },
                                     readable: false,
                                     _events:
                                      [Object: null prototype] {
                                        end: [ [Function: responseOnEnd], [Function] ],
                                        data: [Function],
                                        close: [Function] },
                                     _eventsCount: 3,
                                     _maxListeners: undefined,
                                     socket: [Circular],
                                     connection: [Circular],
                                     httpVersionMajor: 1,
                                     httpVersionMinor: 1,
                                     httpVersion: '1.1',
                                     complete: true,
                                     headers:
                                      { 'content-type': 'application/json; charset=utf-8',
                                        connection: 'close',
                                        'content-length': '1231',
                                        date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                     rawHeaders:
                                      [ 'content-type',
                                        'application/json; charset=utf-8',
                                        'connection',
                                        'close',
                                        'content-length',
                                        '1231',
                                        'date',
                                        'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                     trailers: {},
                                     rawTrailers: [],
                                     aborted: false,
                                     upgrade: false,
                                     url: '',
                                     method: null,
                                     statusCode: 200,
                                     statusMessage: 'OK',
                                     client: [Circular],
                                     _consuming: false,
                                     _dumped: false,
                                     req: [Circular] },
                                  aborted: undefined,
                                  timeoutCb: null,
                                  upgradeOrConnect: false,
                                  parser: null,
                                  maxHeadersCount: null,
                                  [Symbol(isCorked)]: false,
                                  [Symbol(outHeadersKey)]:
                                   [Object: null prototype] {
                                     'content-type': [ 'Content-Type', 'application/json' ],
                                     connection: [ 'Connection', 'keep-alive' ],
                                     host: [ 'Host', 'localhost:12537' ],
                                     'user-agent':
                                      [ 'User-Agent',
                                        'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                     'content-length': [ 'Content-Length', '118' ],
                                     cookie2: [ 'cookie2', '' ],
                                     cookie: [ 'cookie', '' ] } },
                               [Symbol(asyncId)]: 8,
                               [Symbol(lastWriteQueueSize)]: 0,
                               [Symbol(timeout)]: null,
                               [Symbol(kBytesRead)]: 0,
                               [Symbol(kBytesWritten)]: 0 } ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: true,
                    sendAsync: [Function] } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets:
                                    { 'localhost:12537:':
                                       [ Socket {
                                           connecting: false,
                                           _hadError: false,
                                           _handle:
                                            TCP {
                                              reading: true,
                                              onread: [Function: onStreamRead],
                                              onconnection: null,
                                              [Symbol(owner)]: [Circular] },
                                           _parent: null,
                                           _host: 'localhost',
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: false,
                                              endEmitted: false,
                                              reading: true,
                                              sync: false,
                                              needReadable: true,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: false,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: false,
                                              decoder: null,
                                              encoding: null },
                                           readable: true,
                                           _events:
                                            [Object: null prototype] {
                                              end: [Function: onReadableStreamEnd],
                                              free: [Function: onFree],
                                              close: [ [Function: onClose], [Function: socketCloseListener] ],
                                              agentRemove: [Function: onRemove],
                                              drain: [Function: ondrain],
                                              error: [Function: socketErrorListener],
                                              finish:
                                               { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                           _eventsCount: 7,
                                           _maxListeners: undefined,
                                           _writableState:
                                            WritableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              finalCalled: true,
                                              needDrain: false,
                                              ending: true,
                                              ended: true,
                                              finished: false,
                                              destroyed: false,
                                              decodeStrings: false,
                                              defaultEncoding: 'utf8',
                                              length: 0,
                                              writing: false,
                                              corked: 0,
                                              sync: false,
                                              bufferProcessing: false,
                                              onwrite: [Function: bound onwrite],
                                              writecb: null,
                                              writelen: 0,
                                              bufferedRequest: null,
                                              lastBufferedRequest: null,
                                              pendingcb: 1,
                                              prefinished: false,
                                              errorEmitted: false,
                                              emitClose: false,
                                              bufferedRequestCount: 0,
                                              corkedRequestsFree:
                                               { next:
                                                  { next: null,
                                                    entry: null,
                                                    finish: [Function: bound onCorkedFinish] },
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] } },
                                           writable: false,
                                           allowHalfOpen: false,
                                           _sockname: null,
                                           _pendingData: null,
                                           _pendingEncoding: '',
                                           server: null,
                                           _server: null,
                                           parser: null,
                                           _httpMessage:
                                            ClientRequest {
                                              _events:
                                               [Object: null prototype] {
                                                 response: [Function],
                                                 error: [Function],
                                                 prefinish: [Function: requestOnPrefinish] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              output: [],
                                              outputEncodings: [],
                                              outputCallbacks: [],
                                              outputSize: 0,
                                              writable: true,
                                              _last: false,
                                              chunkedEncoding: false,
                                              shouldKeepAlive: false,
                                              useChunkedEncodingByDefault: true,
                                              sendDate: false,
                                              _removedConnection: false,
                                              _removedContLen: false,
                                              _removedTE: false,
                                              _contentLength: null,
                                              _hasBody: true,
                                              _trailer: '',
                                              finished: true,
                                              _headerSent: true,
                                              socket: [Circular],
                                              connection: [Circular],
                                              _header:
                                               'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                              _onPendingData: [Function: noopPendingOutput],
                                              agent: [Circular],
                                              socketPath: undefined,
                                              timeout: undefined,
                                              method: 'POST',
                                              path: '/',
                                              _ended: true,
                                              res:
                                               IncomingMessage {
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: true,
                                                    endEmitted: true,
                                                    reading: false,
                                                    sync: true,
                                                    needReadable: false,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: true,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: true,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: false,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [ [Function: responseOnEnd], [Function] ],
                                                    data: [Function],
                                                    close: [Function] },
                                                 _eventsCount: 3,
                                                 _maxListeners: undefined,
                                                 socket: [Circular],
                                                 connection: [Circular],
                                                 httpVersionMajor: 1,
                                                 httpVersionMinor: 1,
                                                 httpVersion: '1.1',
                                                 complete: true,
                                                 headers:
                                                  { 'content-type': 'application/json; charset=utf-8',
                                                    connection: 'close',
                                                    'content-length': '1231',
                                                    date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                 rawHeaders:
                                                  [ 'content-type',
                                                    'application/json; charset=utf-8',
                                                    'connection',
                                                    'close',
                                                    'content-length',
                                                    '1231',
                                                    'date',
                                                    'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                 trailers: {},
                                                 rawTrailers: [],
                                                 aborted: false,
                                                 upgrade: false,
                                                 url: '',
                                                 method: null,
                                                 statusCode: 200,
                                                 statusMessage: 'OK',
                                                 client: [Circular],
                                                 _consuming: false,
                                                 _dumped: false,
                                                 req: [Circular] },
                                              aborted: undefined,
                                              timeoutCb: null,
                                              upgradeOrConnect: false,
                                              parser: null,
                                              maxHeadersCount: null,
                                              [Symbol(isCorked)]: false,
                                              [Symbol(outHeadersKey)]:
                                               [Object: null prototype] {
                                                 'content-type': [ 'Content-Type', 'application/json' ],
                                                 connection: [ 'Connection', 'keep-alive' ],
                                                 host: [ 'Host', 'localhost:12537' ],
                                                 'user-agent':
                                                  [ 'User-Agent',
                                                    'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                 'content-length': [ 'Content-Length', '118' ],
                                                 cookie2: [ 'cookie2', '' ],
                                                 cookie: [ 'cookie', '' ] } },
                                           [Symbol(asyncId)]: 8,
                                           [Symbol(lastWriteQueueSize)]: 0,
                                           [Symbol(timeout)]: null,
                                           [Symbol(kBytesRead)]: 0,
                                           [Symbol(kBytesWritten)]: 0 } ] },
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: true,
                                sendAsync: [Function] } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets:
                                    { 'localhost:12537:':
                                       [ Socket {
                                           connecting: false,
                                           _hadError: false,
                                           _handle:
                                            TCP {
                                              reading: true,
                                              onread: [Function: onStreamRead],
                                              onconnection: null,
                                              [Symbol(owner)]: [Circular] },
                                           _parent: null,
                                           _host: 'localhost',
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: false,
                                              endEmitted: false,
                                              reading: true,
                                              sync: false,
                                              needReadable: true,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: false,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: false,
                                              decoder: null,
                                              encoding: null },
                                           readable: true,
                                           _events:
                                            [Object: null prototype] {
                                              end: [Function: onReadableStreamEnd],
                                              free: [Function: onFree],
                                              close: [ [Function: onClose], [Function: socketCloseListener] ],
                                              agentRemove: [Function: onRemove],
                                              drain: [Function: ondrain],
                                              error: [Function: socketErrorListener],
                                              finish:
                                               { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                           _eventsCount: 7,
                                           _maxListeners: undefined,
                                           _writableState:
                                            WritableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              finalCalled: true,
                                              needDrain: false,
                                              ending: true,
                                              ended: true,
                                              finished: false,
                                              destroyed: false,
                                              decodeStrings: false,
                                              defaultEncoding: 'utf8',
                                              length: 0,
                                              writing: false,
                                              corked: 0,
                                              sync: false,
                                              bufferProcessing: false,
                                              onwrite: [Function: bound onwrite],
                                              writecb: null,
                                              writelen: 0,
                                              bufferedRequest: null,
                                              lastBufferedRequest: null,
                                              pendingcb: 1,
                                              prefinished: false,
                                              errorEmitted: false,
                                              emitClose: false,
                                              bufferedRequestCount: 0,
                                              corkedRequestsFree:
                                               { next:
                                                  { next: null,
                                                    entry: null,
                                                    finish: [Function: bound onCorkedFinish] },
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] } },
                                           writable: false,
                                           allowHalfOpen: false,
                                           _sockname: null,
                                           _pendingData: null,
                                           _pendingEncoding: '',
                                           server: null,
                                           _server: null,
                                           parser: null,
                                           _httpMessage:
                                            ClientRequest {
                                              _events:
                                               [Object: null prototype] {
                                                 response: [Function],
                                                 error: [Function],
                                                 prefinish: [Function: requestOnPrefinish] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              output: [],
                                              outputEncodings: [],
                                              outputCallbacks: [],
                                              outputSize: 0,
                                              writable: true,
                                              _last: false,
                                              chunkedEncoding: false,
                                              shouldKeepAlive: false,
                                              useChunkedEncodingByDefault: true,
                                              sendDate: false,
                                              _removedConnection: false,
                                              _removedContLen: false,
                                              _removedTE: false,
                                              _contentLength: null,
                                              _hasBody: true,
                                              _trailer: '',
                                              finished: true,
                                              _headerSent: true,
                                              socket: [Circular],
                                              connection: [Circular],
                                              _header:
                                               'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                              _onPendingData: [Function: noopPendingOutput],
                                              agent: [Circular],
                                              socketPath: undefined,
                                              timeout: undefined,
                                              method: 'POST',
                                              path: '/',
                                              _ended: true,
                                              res:
                                               IncomingMessage {
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: true,
                                                    endEmitted: true,
                                                    reading: false,
                                                    sync: true,
                                                    needReadable: false,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: true,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: true,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: false,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [ [Function: responseOnEnd], [Function] ],
                                                    data: [Function],
                                                    close: [Function] },
                                                 _eventsCount: 3,
                                                 _maxListeners: undefined,
                                                 socket: [Circular],
                                                 connection: [Circular],
                                                 httpVersionMajor: 1,
                                                 httpVersionMinor: 1,
                                                 httpVersion: '1.1',
                                                 complete: true,
                                                 headers:
                                                  { 'content-type': 'application/json; charset=utf-8',
                                                    connection: 'close',
                                                    'content-length': '1231',
                                                    date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                 rawHeaders:
                                                  [ 'content-type',
                                                    'application/json; charset=utf-8',
                                                    'connection',
                                                    'close',
                                                    'content-length',
                                                    '1231',
                                                    'date',
                                                    'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                 trailers: {},
                                                 rawTrailers: [],
                                                 aborted: false,
                                                 upgrade: false,
                                                 url: '',
                                                 method: null,
                                                 statusCode: 200,
                                                 statusMessage: 'OK',
                                                 client: [Circular],
                                                 _consuming: false,
                                                 _dumped: false,
                                                 req: [Circular] },
                                              aborted: undefined,
                                              timeoutCb: null,
                                              upgradeOrConnect: false,
                                              parser: null,
                                              maxHeadersCount: null,
                                              [Symbol(isCorked)]: false,
                                              [Symbol(outHeadersKey)]:
                                               [Object: null prototype] {
                                                 'content-type': [ 'Content-Type', 'application/json' ],
                                                 connection: [ 'Connection', 'keep-alive' ],
                                                 host: [ 'Host', 'localhost:12537' ],
                                                 'user-agent':
                                                  [ 'User-Agent',
                                                    'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                 'content-length': [ 'Content-Length', '118' ],
                                                 cookie2: [ 'cookie2', '' ],
                                                 cookie: [ 'cookie', '' ] } },
                                           [Symbol(asyncId)]: 8,
                                           [Symbol(lastWriteQueueSize)]: 0,
                                           [Symbol(timeout)]: null,
                                           [Symbol(kBytesRead)]: 0,
                                           [Symbol(kBytesWritten)]: 0 } ] },
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: true,
                                sendAsync: [Function] } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets:
                                    { 'localhost:12537:':
                                       [ Socket {
                                           connecting: false,
                                           _hadError: false,
                                           _handle:
                                            TCP {
                                              reading: true,
                                              onread: [Function: onStreamRead],
                                              onconnection: null,
                                              [Symbol(owner)]: [Circular] },
                                           _parent: null,
                                           _host: 'localhost',
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: false,
                                              endEmitted: false,
                                              reading: true,
                                              sync: false,
                                              needReadable: true,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: false,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: false,
                                              decoder: null,
                                              encoding: null },
                                           readable: true,
                                           _events:
                                            [Object: null prototype] {
                                              end: [Function: onReadableStreamEnd],
                                              free: [Function: onFree],
                                              close: [ [Function: onClose], [Function: socketCloseListener] ],
                                              agentRemove: [Function: onRemove],
                                              drain: [Function: ondrain],
                                              error: [Function: socketErrorListener],
                                              finish:
                                               { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                           _eventsCount: 7,
                                           _maxListeners: undefined,
                                           _writableState:
                                            WritableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              finalCalled: true,
                                              needDrain: false,
                                              ending: true,
                                              ended: true,
                                              finished: false,
                                              destroyed: false,
                                              decodeStrings: false,
                                              defaultEncoding: 'utf8',
                                              length: 0,
                                              writing: false,
                                              corked: 0,
                                              sync: false,
                                              bufferProcessing: false,
                                              onwrite: [Function: bound onwrite],
                                              writecb: null,
                                              writelen: 0,
                                              bufferedRequest: null,
                                              lastBufferedRequest: null,
                                              pendingcb: 1,
                                              prefinished: false,
                                              errorEmitted: false,
                                              emitClose: false,
                                              bufferedRequestCount: 0,
                                              corkedRequestsFree:
                                               { next:
                                                  { next: null,
                                                    entry: null,
                                                    finish: [Function: bound onCorkedFinish] },
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] } },
                                           writable: false,
                                           allowHalfOpen: false,
                                           _sockname: null,
                                           _pendingData: null,
                                           _pendingEncoding: '',
                                           server: null,
                                           _server: null,
                                           parser: null,
                                           _httpMessage:
                                            ClientRequest {
                                              _events:
                                               [Object: null prototype] {
                                                 response: [Function],
                                                 error: [Function],
                                                 prefinish: [Function: requestOnPrefinish] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              output: [],
                                              outputEncodings: [],
                                              outputCallbacks: [],
                                              outputSize: 0,
                                              writable: true,
                                              _last: false,
                                              chunkedEncoding: false,
                                              shouldKeepAlive: false,
                                              useChunkedEncodingByDefault: true,
                                              sendDate: false,
                                              _removedConnection: false,
                                              _removedContLen: false,
                                              _removedTE: false,
                                              _contentLength: null,
                                              _hasBody: true,
                                              _trailer: '',
                                              finished: true,
                                              _headerSent: true,
                                              socket: [Circular],
                                              connection: [Circular],
                                              _header:
                                               'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                              _onPendingData: [Function: noopPendingOutput],
                                              agent: [Circular],
                                              socketPath: undefined,
                                              timeout: undefined,
                                              method: 'POST',
                                              path: '/',
                                              _ended: true,
                                              res:
                                               IncomingMessage {
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: true,
                                                    endEmitted: true,
                                                    reading: false,
                                                    sync: true,
                                                    needReadable: false,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: true,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: true,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: false,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [ [Function: responseOnEnd], [Function] ],
                                                    data: [Function],
                                                    close: [Function] },
                                                 _eventsCount: 3,
                                                 _maxListeners: undefined,
                                                 socket: [Circular],
                                                 connection: [Circular],
                                                 httpVersionMajor: 1,
                                                 httpVersionMinor: 1,
                                                 httpVersion: '1.1',
                                                 complete: true,
                                                 headers:
                                                  { 'content-type': 'application/json; charset=utf-8',
                                                    connection: 'close',
                                                    'content-length': '1231',
                                                    date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                 rawHeaders:
                                                  [ 'content-type',
                                                    'application/json; charset=utf-8',
                                                    'connection',
                                                    'close',
                                                    'content-length',
                                                    '1231',
                                                    'date',
                                                    'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                 trailers: {},
                                                 rawTrailers: [],
                                                 aborted: false,
                                                 upgrade: false,
                                                 url: '',
                                                 method: null,
                                                 statusCode: 200,
                                                 statusMessage: 'OK',
                                                 client: [Circular],
                                                 _consuming: false,
                                                 _dumped: false,
                                                 req: [Circular] },
                                              aborted: undefined,
                                              timeoutCb: null,
                                              upgradeOrConnect: false,
                                              parser: null,
                                              maxHeadersCount: null,
                                              [Symbol(isCorked)]: false,
                                              [Symbol(outHeadersKey)]:
                                               [Object: null prototype] {
                                                 'content-type': [ 'Content-Type', 'application/json' ],
                                                 connection: [ 'Connection', 'keep-alive' ],
                                                 host: [ 'Host', 'localhost:12537' ],
                                                 'user-agent':
                                                  [ 'User-Agent',
                                                    'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                 'content-length': [ 'Content-Length', '118' ],
                                                 cookie2: [ 'cookie2', '' ],
                                                 cookie: [ 'cookie', '' ] } },
                                           [Symbol(asyncId)]: 8,
                                           [Symbol(lastWriteQueueSize)]: 0,
                                           [Symbol(timeout)]: null,
                                           [Symbol(kBytesRead)]: 0,
                                           [Symbol(kBytesWritten)]: 0 } ] },
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: true,
                                sendAsync: [Function] } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           Contract:
            { [Function: Contract]
              setProvider: [Function],
              defaultAccount: null,
              defaultBlock: 'latest_state',
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets:
                           { 'localhost:12537:':
                              [ Socket {
                                  connecting: false,
                                  _hadError: false,
                                  _handle:
                                   TCP {
                                     reading: true,
                                     onread: [Function: onStreamRead],
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parent: null,
                                  _host: 'localhost',
                                  _readableState:
                                   ReadableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     buffer: BufferList { head: null, tail: null, length: 0 },
                                     length: 0,
                                     pipes: null,
                                     pipesCount: 0,
                                     flowing: true,
                                     ended: false,
                                     endEmitted: false,
                                     reading: true,
                                     sync: false,
                                     needReadable: true,
                                     emittedReadable: false,
                                     readableListening: false,
                                     resumeScheduled: false,
                                     paused: false,
                                     emitClose: false,
                                     destroyed: false,
                                     defaultEncoding: 'utf8',
                                     awaitDrain: 0,
                                     readingMore: false,
                                     decoder: null,
                                     encoding: null },
                                  readable: true,
                                  _events:
                                   [Object: null prototype] {
                                     end: [Function: onReadableStreamEnd],
                                     free: [Function: onFree],
                                     close: [ [Function: onClose], [Function: socketCloseListener] ],
                                     agentRemove: [Function: onRemove],
                                     drain: [Function: ondrain],
                                     error: [Function: socketErrorListener],
                                     finish:
                                      { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                  _eventsCount: 7,
                                  _maxListeners: undefined,
                                  _writableState:
                                   WritableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     finalCalled: true,
                                     needDrain: false,
                                     ending: true,
                                     ended: true,
                                     finished: false,
                                     destroyed: false,
                                     decodeStrings: false,
                                     defaultEncoding: 'utf8',
                                     length: 0,
                                     writing: false,
                                     corked: 0,
                                     sync: false,
                                     bufferProcessing: false,
                                     onwrite: [Function: bound onwrite],
                                     writecb: null,
                                     writelen: 0,
                                     bufferedRequest: null,
                                     lastBufferedRequest: null,
                                     pendingcb: 1,
                                     prefinished: false,
                                     errorEmitted: false,
                                     emitClose: false,
                                     bufferedRequestCount: 0,
                                     corkedRequestsFree:
                                      { next:
                                         { next: null,
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] },
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] } },
                                  writable: false,
                                  allowHalfOpen: false,
                                  _sockname: null,
                                  _pendingData: null,
                                  _pendingEncoding: '',
                                  server: null,
                                  _server: null,
                                  parser: null,
                                  _httpMessage:
                                   ClientRequest {
                                     _events:
                                      [Object: null prototype] {
                                        response: [Function],
                                        error: [Function],
                                        prefinish: [Function: requestOnPrefinish] },
                                     _eventsCount: 3,
                                     _maxListeners: undefined,
                                     output: [],
                                     outputEncodings: [],
                                     outputCallbacks: [],
                                     outputSize: 0,
                                     writable: true,
                                     _last: false,
                                     chunkedEncoding: false,
                                     shouldKeepAlive: false,
                                     useChunkedEncodingByDefault: true,
                                     sendDate: false,
                                     _removedConnection: false,
                                     _removedContLen: false,
                                     _removedTE: false,
                                     _contentLength: null,
                                     _hasBody: true,
                                     _trailer: '',
                                     finished: true,
                                     _headerSent: true,
                                     socket: [Circular],
                                     connection: [Circular],
                                     _header:
                                      'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                     _onPendingData: [Function: noopPendingOutput],
                                     agent: [Circular],
                                     socketPath: undefined,
                                     timeout: undefined,
                                     method: 'POST',
                                     path: '/',
                                     _ended: true,
                                     res:
                                      IncomingMessage {
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: true,
                                           endEmitted: true,
                                           reading: false,
                                           sync: true,
                                           needReadable: false,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: true,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: true,
                                           decoder: null,
                                           encoding: null },
                                        readable: false,
                                        _events:
                                         [Object: null prototype] {
                                           end: [ [Function: responseOnEnd], [Function] ],
                                           data: [Function],
                                           close: [Function] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        socket: [Circular],
                                        connection: [Circular],
                                        httpVersionMajor: 1,
                                        httpVersionMinor: 1,
                                        httpVersion: '1.1',
                                        complete: true,
                                        headers:
                                         { 'content-type': 'application/json; charset=utf-8',
                                           connection: 'close',
                                           'content-length': '1231',
                                           date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                        rawHeaders:
                                         [ 'content-type',
                                           'application/json; charset=utf-8',
                                           'connection',
                                           'close',
                                           'content-length',
                                           '1231',
                                           'date',
                                           'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                        trailers: {},
                                        rawTrailers: [],
                                        aborted: false,
                                        upgrade: false,
                                        url: '',
                                        method: null,
                                        statusCode: 200,
                                        statusMessage: 'OK',
                                        client: [Circular],
                                        _consuming: false,
                                        _dumped: false,
                                        req: [Circular] },
                                     aborted: undefined,
                                     timeoutCb: null,
                                     upgradeOrConnect: false,
                                     parser: null,
                                     maxHeadersCount: null,
                                     [Symbol(isCorked)]: false,
                                     [Symbol(outHeadersKey)]:
                                      [Object: null prototype] {
                                        'content-type': [ 'Content-Type', 'application/json' ],
                                        connection: [ 'Connection', 'keep-alive' ],
                                        host: [ 'Host', 'localhost:12537' ],
                                        'user-agent':
                                         [ 'User-Agent',
                                           'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                        'content-length': [ 'Content-Length', '118' ],
                                        cookie2: [ 'cookie2', '' ],
                                        cookie: [ 'cookie', '' ] } },
                                  [Symbol(asyncId)]: 8,
                                  [Symbol(lastWriteQueueSize)]: 0,
                                  [Symbol(timeout)]: null,
                                  [Symbol(kBytesRead)]: 0,
                                  [Symbol(kBytesWritten)]: 0 } ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: true,
                       sendAsync: [Function] } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets:
                        { 'localhost:12537:':
                           [ Socket {
                               connecting: false,
                               _hadError: false,
                               _handle:
                                TCP {
                                  reading: true,
                                  onread: [Function: onStreamRead],
                                  onconnection: null,
                                  [Symbol(owner)]: [Circular] },
                               _parent: null,
                               _host: 'localhost',
                               _readableState:
                                ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: null,
                                  pipesCount: 0,
                                  flowing: true,
                                  ended: false,
                                  endEmitted: false,
                                  reading: true,
                                  sync: false,
                                  needReadable: true,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  paused: false,
                                  emitClose: false,
                                  destroyed: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrain: 0,
                                  readingMore: false,
                                  decoder: null,
                                  encoding: null },
                               readable: true,
                               _events:
                                [Object: null prototype] {
                                  end: [Function: onReadableStreamEnd],
                                  free: [Function: onFree],
                                  close: [ [Function: onClose], [Function: socketCloseListener] ],
                                  agentRemove: [Function: onRemove],
                                  drain: [Function: ondrain],
                                  error: [Function: socketErrorListener],
                                  finish:
                                   { [Function: bound onceWrapper] listener: [Function: destroy] } },
                               _eventsCount: 7,
                               _maxListeners: undefined,
                               _writableState:
                                WritableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  finalCalled: true,
                                  needDrain: false,
                                  ending: true,
                                  ended: true,
                                  finished: false,
                                  destroyed: false,
                                  decodeStrings: false,
                                  defaultEncoding: 'utf8',
                                  length: 0,
                                  writing: false,
                                  corked: 0,
                                  sync: false,
                                  bufferProcessing: false,
                                  onwrite: [Function: bound onwrite],
                                  writecb: null,
                                  writelen: 0,
                                  bufferedRequest: null,
                                  lastBufferedRequest: null,
                                  pendingcb: 1,
                                  prefinished: false,
                                  errorEmitted: false,
                                  emitClose: false,
                                  bufferedRequestCount: 0,
                                  corkedRequestsFree:
                                   { next:
                                      { next: null,
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] },
                                     entry: null,
                                     finish: [Function: bound onCorkedFinish] } },
                               writable: false,
                               allowHalfOpen: false,
                               _sockname: null,
                               _pendingData: null,
                               _pendingEncoding: '',
                               server: null,
                               _server: null,
                               parser: null,
                               _httpMessage:
                                ClientRequest {
                                  _events:
                                   [Object: null prototype] {
                                     response: [Function],
                                     error: [Function],
                                     prefinish: [Function: requestOnPrefinish] },
                                  _eventsCount: 3,
                                  _maxListeners: undefined,
                                  output: [],
                                  outputEncodings: [],
                                  outputCallbacks: [],
                                  outputSize: 0,
                                  writable: true,
                                  _last: false,
                                  chunkedEncoding: false,
                                  shouldKeepAlive: false,
                                  useChunkedEncodingByDefault: true,
                                  sendDate: false,
                                  _removedConnection: false,
                                  _removedContLen: false,
                                  _removedTE: false,
                                  _contentLength: null,
                                  _hasBody: true,
                                  _trailer: '',
                                  finished: true,
                                  _headerSent: true,
                                  socket: [Circular],
                                  connection: [Circular],
                                  _header:
                                   'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                  _onPendingData: [Function: noopPendingOutput],
                                  agent: [Circular],
                                  socketPath: undefined,
                                  timeout: undefined,
                                  method: 'POST',
                                  path: '/',
                                  _ended: true,
                                  res:
                                   IncomingMessage {
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: true,
                                        endEmitted: true,
                                        reading: false,
                                        sync: true,
                                        needReadable: false,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: true,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: true,
                                        decoder: null,
                                        encoding: null },
                                     readable: false,
                                     _events:
                                      [Object: null prototype] {
                                        end: [ [Function: responseOnEnd], [Function] ],
                                        data: [Function],
                                        close: [Function] },
                                     _eventsCount: 3,
                                     _maxListeners: undefined,
                                     socket: [Circular],
                                     connection: [Circular],
                                     httpVersionMajor: 1,
                                     httpVersionMinor: 1,
                                     httpVersion: '1.1',
                                     complete: true,
                                     headers:
                                      { 'content-type': 'application/json; charset=utf-8',
                                        connection: 'close',
                                        'content-length': '1231',
                                        date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                     rawHeaders:
                                      [ 'content-type',
                                        'application/json; charset=utf-8',
                                        'connection',
                                        'close',
                                        'content-length',
                                        '1231',
                                        'date',
                                        'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                     trailers: {},
                                     rawTrailers: [],
                                     aborted: false,
                                     upgrade: false,
                                     url: '',
                                     method: null,
                                     statusCode: 200,
                                     statusMessage: 'OK',
                                     client: [Circular],
                                     _consuming: false,
                                     _dumped: false,
                                     req: [Circular] },
                                  aborted: undefined,
                                  timeoutCb: null,
                                  upgradeOrConnect: false,
                                  parser: null,
                                  maxHeadersCount: null,
                                  [Symbol(isCorked)]: false,
                                  [Symbol(outHeadersKey)]:
                                   [Object: null prototype] {
                                     'content-type': [ 'Content-Type', 'application/json' ],
                                     connection: [ 'Connection', 'keep-alive' ],
                                     host: [ 'Host', 'localhost:12537' ],
                                     'user-agent':
                                      [ 'User-Agent',
                                        'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                     'content-length': [ 'Content-Length', '118' ],
                                     cookie2: [ 'cookie2', '' ],
                                     cookie: [ 'cookie', '' ] } },
                               [Symbol(asyncId)]: 8,
                               [Symbol(lastWriteQueueSize)]: 0,
                               [Symbol(timeout)]: null,
                               [Symbol(kBytesRead)]: 0,
                               [Symbol(kBytesWritten)]: 0 } ] },
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: true,
                    sendAsync: [Function] } },
              BatchRequest: [Function: bound Batch],
              extend:
               { [Function: ex]
                 formatters:
                  { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
                    inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
                    inputCallFormatter: [Function: inputCallFormatter],
                    inputTransactionFormatter: [Function: inputTransactionFormatter],
                    inputAddressFormatter: [Function: inputAddressFormatter],
                    inputPostFormatter: [Function: inputPostFormatter],
                    inputLogFormatter: [Function: inputLogFormatter],
                    inputSignFormatter: [Function: inputSignFormatter],
                    outputBigNumberFormatter: [Function: outputBigNumberFormatter],
                    outputTransactionFormatter: [Function: outputTransactionFormatter],
                    outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
                    outputBlockFormatter: [Function: outputBlockFormatter],
                    outputLogFormatter: [Function: outputLogFormatter],
                    outputPostFormatter: [Function: outputPostFormatter],
                    outputSyncingFormatter: [Function: outputSyncingFormatter] },
                 utils:
                  { _fireError: [Function: _fireError],
                    _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
                    _flattenTypes: [Function: _flattenTypes],
                    randomHex: [Function: randomHex],
                    _:
                     { [Function: _]
                       _: [Circular],
                       VERSION: '1.9.1',
                       iteratee: [Function: builtinIteratee],
                       forEach: [Function],
                       each: [Function],
                       collect: [Function],
                       map: [Function],
                       inject: [Function],
                       foldl: [Function],
                       reduce: [Function],
                       foldr: [Function],
                       reduceRight: [Function],
                       detect: [Function],
                       find: [Function],
                       select: [Function],
                       filter: [Function],
                       reject: [Function],
                       all: [Function],
                       every: [Function],
                       any: [Function],
                       some: [Function],
                       include: [Function],
                       includes: [Function],
                       contains: [Function],
                       invoke: [Function],
                       pluck: [Function],
                       where: [Function],
                       findWhere: [Function],
                       max: [Function],
                       min: [Function],
                       shuffle: [Function],
                       sample: [Function],
                       sortBy: [Function],
                       groupBy: [Function],
                       indexBy: [Function],
                       countBy: [Function],
                       toArray: [Function],
                       size: [Function],
                       partition: [Function],
                       take: [Function],
                       head: [Function],
                       first: [Function],
                       initial: [Function],
                       last: [Function],
                       drop: [Function],
                       tail: [Function],
                       rest: [Function],
                       compact: [Function],
                       flatten: [Function],
                       without: [Function],
                       unique: [Function],
                       uniq: [Function],
                       union: [Function],
                       intersection: [Function],
                       difference: [Function],
                       unzip: [Function],
                       zip: [Function],
                       object: [Function],
                       findIndex: [Function],
                       findLastIndex: [Function],
                       sortedIndex: [Function],
                       indexOf: [Function],
                       lastIndexOf: [Function],
                       range: [Function],
                       chunk: [Function],
                       bind: [Function],
                       partial: { [Function] placeholder: [Circular] },
                       bindAll: [Function],
                       memoize: [Function],
                       delay: [Function],
                       defer: [Function: bound],
                       throttle: [Function],
                       debounce: [Function],
                       wrap: [Function],
                       negate: [Function],
                       compose: [Function],
                       after: [Function],
                       before: [Function],
                       once: [Function: bound],
                       restArguments: [Function: restArguments],
                       keys: [Function],
                       allKeys: [Function],
                       values: [Function],
                       mapObject: [Function],
                       pairs: [Function],
                       invert: [Function],
                       methods: [Function],
                       functions: [Function],
                       extend: [Function],
                       assign: [Function],
                       extendOwn: [Function],
                       findKey: [Function],
                       pick: [Function],
                       omit: [Function],
                       defaults: [Function],
                       create: [Function],
                       clone: [Function],
                       tap: [Function],
                       isMatch: [Function],
                       isEqual: [Function],
                       isEmpty: [Function],
                       isElement: [Function],
                       isArray: [Function: isArray],
                       isObject: [Function],
                       isArguments: [Function],
                       isFunction: [Function],
                       isString: [Function],
                       isNumber: [Function],
                       isDate: [Function],
                       isRegExp: [Function],
                       isError: [Function],
                       isSymbol: [Function],
                       isMap: [Function],
                       isWeakMap: [Function],
                       isSet: [Function],
                       isWeakSet: [Function],
                       isFinite: [Function],
                       isNaN: [Function],
                       isBoolean: [Function],
                       isNull: [Function],
                       isUndefined: [Function],
                       has: [Function],
                       noConflict: [Function],
                       identity: [Function],
                       constant: [Function],
                       noop: [Function],
                       property: [Function],
                       propertyOf: [Function],
                       matches: [Function],
                       matcher: [Function],
                       times: [Function],
                       random: [Function],
                       now: [Function: now],
                       escape: [Function],
                       unescape: [Function],
                       result: [Function],
                       uniqueId: [Function],
                       templateSettings:
                        { evaluate: /<%([\s\S]+?)%>/g,
                          interpolate: /<%=([\s\S]+?)%>/g,
                          escape: /<%-([\s\S]+?)%>/g },
                       template: [Function],
                       chain: [Function],
                       mixin: [Function] },
                    BN:
                     { [Function: BN]
                       BN: [Circular],
                       wordSize: 26,
                       isBN: [Function: isBN],
                       max: [Function: max],
                       min: [Function: min],
                       red: [Function: red],
                       _prime: [Function: prime],
                       mont: [Function: mont] },
                    isBN: [Function: isBN],
                    isBigNumber: [Function: isBigNumber],
                    isHex: [Function: isHex],
                    isHexStrict: [Function: isHexStrict],
                    sha3:
                     { [Function: sha3]
                       _Hash:
                        { keccak256: [Function],
                          keccak512: [Function],
                          keccak256s: [Function],
                          keccak512s: [Function] } },
                    keccak256:
                     { [Function: sha3]
                       _Hash:
                        { keccak256: [Function],
                          keccak512: [Function],
                          keccak256s: [Function],
                          keccak512s: [Function] } },
                    soliditySha3: [Function: soliditySha3],
                    isAddress: [Function: isAddress],
                    checkAddressChecksum: [Function: checkAddressChecksum],
                    toChecksumAddress: [Function: toChecksumAddress],
                    toHex: [Function: toHex],
                    toBN: [Function: toBN],
                    bytesToHex: [Function: bytesToHex],
                    hexToBytes: [Function: hexToBytes],
                    hexToNumberString: [Function: hexToNumberString],
                    hexToNumber: [Function: hexToNumber],
                    toDecimal: [Function: hexToNumber],
                    numberToHex: [Function: numberToHex],
                    fromDecimal: [Function: numberToHex],
                    hexToUtf8: [Function: hexToUtf8],
                    hexToString: [Function: hexToUtf8],
                    toUtf8: [Function: hexToUtf8],
                    utf8ToHex: [Function: utf8ToHex],
                    stringToHex: [Function: utf8ToHex],
                    fromUtf8: [Function: utf8ToHex],
                    hexToAscii: [Function: hexToAscii],
                    toAscii: [Function: hexToAscii],
                    asciiToHex: [Function: asciiToHex],
                    fromAscii: [Function: asciiToHex],
                    unitMap:
                     { noether: '0',
                       wei: '1',
                       kwei: '1000',
                       Kwei: '1000',
                       babbage: '1000',
                       femtoether: '1000',
                       mwei: '1000000',
                       Mwei: '1000000',
                       lovelace: '1000000',
                       picoether: '1000000',
                       gwei: '1000000000',
                       Gwei: '1000000000',
                       shannon: '1000000000',
                       nanoether: '1000000000',
                       nano: '1000000000',
                       szabo: '1000000000000',
                       microether: '1000000000000',
                       micro: '1000000000000',
                       finney: '1000000000000000',
                       milliether: '1000000000000000',
                       milli: '1000000000000000',
                       ether: '1000000000000000000',
                       kether: '1000000000000000000000',
                       grand: '1000000000000000000000',
                       mether: '1000000000000000000000000',
                       gether: '1000000000000000000000000000',
                       tether: '1000000000000000000000000000000' },
                    toWei: [Function: toWei],
                    fromWei: [Function: fromWei],
                    padLeft: [Function: leftPad],
                    leftPad: [Function: leftPad],
                    padRight: [Function: rightPad],
                    rightPad: [Function: rightPad],
                    toTwosComplement: [Function: toTwosComplement] },
                 Method: [Function: Method] },
              _ethAccounts:
               Accounts {
                 currentProvider: [Getter/Setter],
                 _requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 givenProvider: null,
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 _provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets:
                           { 'localhost:12537:':
                              [ Socket {
                                  connecting: false,
                                  _hadError: false,
                                  _handle:
                                   TCP {
                                     reading: true,
                                     onread: [Function: onStreamRead],
                                     onconnection: null,
                                     [Symbol(owner)]: [Circular] },
                                  _parent: null,
                                  _host: 'localhost',
                                  _readableState:
                                   ReadableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     buffer: BufferList { head: null, tail: null, length: 0 },
                                     length: 0,
                                     pipes: null,
                                     pipesCount: 0,
                                     flowing: true,
                                     ended: false,
                                     endEmitted: false,
                                     reading: true,
                                     sync: false,
                                     needReadable: true,
                                     emittedReadable: false,
                                     readableListening: false,
                                     resumeScheduled: false,
                                     paused: false,
                                     emitClose: false,
                                     destroyed: false,
                                     defaultEncoding: 'utf8',
                                     awaitDrain: 0,
                                     readingMore: false,
                                     decoder: null,
                                     encoding: null },
                                  readable: true,
                                  _events:
                                   [Object: null prototype] {
                                     end: [Function: onReadableStreamEnd],
                                     free: [Function: onFree],
                                     close: [ [Function: onClose], [Function: socketCloseListener] ],
                                     agentRemove: [Function: onRemove],
                                     drain: [Function: ondrain],
                                     error: [Function: socketErrorListener],
                                     finish:
                                      { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                  _eventsCount: 7,
                                  _maxListeners: undefined,
                                  _writableState:
                                   WritableState {
                                     objectMode: false,
                                     highWaterMark: 16384,
                                     finalCalled: true,
                                     needDrain: false,
                                     ending: true,
                                     ended: true,
                                     finished: false,
                                     destroyed: false,
                                     decodeStrings: false,
                                     defaultEncoding: 'utf8',
                                     length: 0,
                                     writing: false,
                                     corked: 0,
                                     sync: false,
                                     bufferProcessing: false,
                                     onwrite: [Function: bound onwrite],
                                     writecb: null,
                                     writelen: 0,
                                     bufferedRequest: null,
                                     lastBufferedRequest: null,
                                     pendingcb: 1,
                                     prefinished: false,
                                     errorEmitted: false,
                                     emitClose: false,
                                     bufferedRequestCount: 0,
                                     corkedRequestsFree:
                                      { next:
                                         { next: null,
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] },
                                        entry: null,
                                        finish: [Function: bound onCorkedFinish] } },
                                  writable: false,
                                  allowHalfOpen: false,
                                  _sockname: null,
                                  _pendingData: null,
                                  _pendingEncoding: '',
                                  server: null,
                                  _server: null,
                                  parser: null,
                                  _httpMessage:
                                   ClientRequest {
                                     _events:
                                      [Object: null prototype] {
                                        response: [Function],
                                        error: [Function],
                                        prefinish: [Function: requestOnPrefinish] },
                                     _eventsCount: 3,
                                     _maxListeners: undefined,
                                     output: [],
                                     outputEncodings: [],
                                     outputCallbacks: [],
                                     outputSize: 0,
                                     writable: true,
                                     _last: false,
                                     chunkedEncoding: false,
                                     shouldKeepAlive: false,
                                     useChunkedEncodingByDefault: true,
                                     sendDate: false,
                                     _removedConnection: false,
                                     _removedContLen: false,
                                     _removedTE: false,
                                     _contentLength: null,
                                     _hasBody: true,
                                     _trailer: '',
                                     finished: true,
                                     _headerSent: true,
                                     socket: [Circular],
                                     connection: [Circular],
                                     _header:
                                      'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                     _onPendingData: [Function: noopPendingOutput],
                                     agent: [Circular],
                                     socketPath: undefined,
                                     timeout: undefined,
                                     method: 'POST',
                                     path: '/',
                                     _ended: true,
                                     res:
                                      IncomingMessage {
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: true,
                                           endEmitted: true,
                                           reading: false,
                                           sync: true,
                                           needReadable: false,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: true,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: true,
                                           decoder: null,
                                           encoding: null },
                                        readable: false,
                                        _events:
                                         [Object: null prototype] {
                                           end: [ [Function: responseOnEnd], [Function] ],
                                           data: [Function],
                                           close: [Function] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        socket: [Circular],
                                        connection: [Circular],
                                        httpVersionMajor: 1,
                                        httpVersionMinor: 1,
                                        httpVersion: '1.1',
                                        complete: true,
                                        headers:
                                         { 'content-type': 'application/json; charset=utf-8',
                                           connection: 'close',
                                           'content-length': '1231',
                                           date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                        rawHeaders:
                                         [ 'content-type',
                                           'application/json; charset=utf-8',
                                           'connection',
                                           'close',
                                           'content-length',
                                           '1231',
                                           'date',
                                           'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                        trailers: {},
                                        rawTrailers: [],
                                        aborted: false,
                                        upgrade: false,
                                        url: '',
                                        method: null,
                                        statusCode: 200,
                                        statusMessage: 'OK',
                                        client: [Circular],
                                        _consuming: false,
                                        _dumped: false,
                                        req: [Circular] },
                                     aborted: undefined,
                                     timeoutCb: null,
                                     upgradeOrConnect: false,
                                     parser: null,
                                     maxHeadersCount: null,
                                     [Symbol(isCorked)]: false,
                                     [Symbol(outHeadersKey)]:
                                      [Object: null prototype] {
                                        'content-type': [ 'Content-Type', 'application/json' ],
                                        connection: [ 'Connection', 'keep-alive' ],
                                        host: [ 'Host', 'localhost:12537' ],
                                        'user-agent':
                                         [ 'User-Agent',
                                           'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                        'content-length': [ 'Content-Length', '118' ],
                                        cookie2: [ 'cookie2', '' ],
                                        cookie: [ 'cookie', '' ] } },
                                  [Symbol(asyncId)]: 8,
                                  [Symbol(lastWriteQueueSize)]: 0,
                                  [Symbol(timeout)]: null,
                                  [Symbol(kBytesRead)]: 0,
                                  [Symbol(kBytesWritten)]: 0 } ] },
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: true,
                       sendAsync: [Function] } },
                 setProvider: [Function],
                 _ethereumCall:
                  { getId:
                     { [Function: send]
                       method:
                        Method {
                          name: 'getId',
                          call: 'net_version',
                          params: 0,
                          inputFormatter: undefined,
                          outputFormatter: [Function: hexToNumber],
                          transformPayload: undefined,
                          extraFormatters: undefined,
                          requestManager:
                           RequestManager {
                             provider:
                              Provider {
                                provider:
                                 HttpProvider {
                                   host: 'http://localhost:12537',
                                   httpAgent:
                                    Agent {
                                      _events: [Object: null prototype] { free: [Function] },
                                      _eventsCount: 1,
                                      _maxListeners: undefined,
                                      defaultPort: 80,
                                      protocol: 'http:',
                                      options: { keepAlive: true, path: null },
                                      requests: {},
                                      sockets:
                                       { 'localhost:12537:':
                                          [ Socket {
                                              connecting: false,
                                              _hadError: false,
                                              _handle:
                                               TCP {
                                                 reading: true,
                                                 onread: [Function: onStreamRead],
                                                 onconnection: null,
                                                 [Symbol(owner)]: [Circular] },
                                              _parent: null,
                                              _host: 'localhost',
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: false,
                                                 endEmitted: false,
                                                 reading: true,
                                                 sync: false,
                                                 needReadable: true,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: false,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: false,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: true,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [Function: onReadableStreamEnd],
                                                 free: [Function: onFree],
                                                 close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                 agentRemove: [Function: onRemove],
                                                 drain: [Function: ondrain],
                                                 error: [Function: socketErrorListener],
                                                 finish:
                                                  { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                              _eventsCount: 7,
                                              _maxListeners: undefined,
                                              _writableState:
                                               WritableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 finalCalled: true,
                                                 needDrain: false,
                                                 ending: true,
                                                 ended: true,
                                                 finished: false,
                                                 destroyed: false,
                                                 decodeStrings: false,
                                                 defaultEncoding: 'utf8',
                                                 length: 0,
                                                 writing: false,
                                                 corked: 0,
                                                 sync: false,
                                                 bufferProcessing: false,
                                                 onwrite: [Function: bound onwrite],
                                                 writecb: null,
                                                 writelen: 0,
                                                 bufferedRequest: null,
                                                 lastBufferedRequest: null,
                                                 pendingcb: 1,
                                                 prefinished: false,
                                                 errorEmitted: false,
                                                 emitClose: false,
                                                 bufferedRequestCount: 0,
                                                 corkedRequestsFree:
                                                  { next:
                                                     { next: null,
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] },
                                                    entry: null,
                                                    finish: [Function: bound onCorkedFinish] } },
                                              writable: false,
                                              allowHalfOpen: false,
                                              _sockname: null,
                                              _pendingData: null,
                                              _pendingEncoding: '',
                                              server: null,
                                              _server: null,
                                              parser: null,
                                              _httpMessage:
                                               ClientRequest {
                                                 _events:
                                                  [Object: null prototype] {
                                                    response: [Function],
                                                    error: [Function],
                                                    prefinish: [Function: requestOnPrefinish] },
                                                 _eventsCount: 3,
                                                 _maxListeners: undefined,
                                                 output: [],
                                                 outputEncodings: [],
                                                 outputCallbacks: [],
                                                 outputSize: 0,
                                                 writable: true,
                                                 _last: false,
                                                 chunkedEncoding: false,
                                                 shouldKeepAlive: false,
                                                 useChunkedEncodingByDefault: true,
                                                 sendDate: false,
                                                 _removedConnection: false,
                                                 _removedContLen: false,
                                                 _removedTE: false,
                                                 _contentLength: null,
                                                 _hasBody: true,
                                                 _trailer: '',
                                                 finished: true,
                                                 _headerSent: true,
                                                 socket: [Circular],
                                                 connection: [Circular],
                                                 _header:
                                                  'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                 _onPendingData: [Function: noopPendingOutput],
                                                 agent: [Circular],
                                                 socketPath: undefined,
                                                 timeout: undefined,
                                                 method: 'POST',
                                                 path: '/',
                                                 _ended: true,
                                                 res:
                                                  IncomingMessage {
                                                    _readableState:
                                                     ReadableState {
                                                       objectMode: false,
                                                       highWaterMark: 16384,
                                                       buffer: BufferList { head: null, tail: null, length: 0 },
                                                       length: 0,
                                                       pipes: null,
                                                       pipesCount: 0,
                                                       flowing: true,
                                                       ended: true,
                                                       endEmitted: true,
                                                       reading: false,
                                                       sync: true,
                                                       needReadable: false,
                                                       emittedReadable: false,
                                                       readableListening: false,
                                                       resumeScheduled: false,
                                                       paused: false,
                                                       emitClose: true,
                                                       destroyed: false,
                                                       defaultEncoding: 'utf8',
                                                       awaitDrain: 0,
                                                       readingMore: true,
                                                       decoder: null,
                                                       encoding: null },
                                                    readable: false,
                                                    _events:
                                                     [Object: null prototype] {
                                                       end: [ [Function: responseOnEnd], [Function] ],
                                                       data: [Function],
                                                       close: [Function] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    httpVersionMajor: 1,
                                                    httpVersionMinor: 1,
                                                    httpVersion: '1.1',
                                                    complete: true,
                                                    headers:
                                                     { 'content-type': 'application/json; charset=utf-8',
                                                       connection: 'close',
                                                       'content-length': '1231',
                                                       date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                    rawHeaders:
                                                     [ 'content-type',
                                                       'application/json; charset=utf-8',
                                                       'connection',
                                                       'close',
                                                       'content-length',
                                                       '1231',
                                                       'date',
                                                       'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                    trailers: {},
                                                    rawTrailers: [],
                                                    aborted: false,
                                                    upgrade: false,
                                                    url: '',
                                                    method: null,
                                                    statusCode: 200,
                                                    statusMessage: 'OK',
                                                    client: [Circular],
                                                    _consuming: false,
                                                    _dumped: false,
                                                    req: [Circular] },
                                                 aborted: undefined,
                                                 timeoutCb: null,
                                                 upgradeOrConnect: false,
                                                 parser: null,
                                                 maxHeadersCount: null,
                                                 [Symbol(isCorked)]: false,
                                                 [Symbol(outHeadersKey)]:
                                                  [Object: null prototype] {
                                                    'content-type': [ 'Content-Type', 'application/json' ],
                                                    connection: [ 'Connection', 'keep-alive' ],
                                                    host: [ 'Host', 'localhost:12537' ],
                                                    'user-agent':
                                                     [ 'User-Agent',
                                                       'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                    'content-length': [ 'Content-Length', '118' ],
                                                    cookie2: [ 'cookie2', '' ],
                                                    cookie: [ 'cookie', '' ] } },
                                              [Symbol(asyncId)]: 8,
                                              [Symbol(lastWriteQueueSize)]: 0,
                                              [Symbol(timeout)]: null,
                                              [Symbol(kBytesRead)]: 0,
                                              [Symbol(kBytesWritten)]: 0 } ] },
                                      freeSockets: {},
                                      keepAliveMsecs: 1000,
                                      keepAlive: true,
                                      maxSockets: Infinity,
                                      maxFreeSockets: 256 },
                                   timeout: 0,
                                   headers: undefined,
                                   connected: true,
                                   sendAsync: [Function] } },
                             providers:
                              { WebsocketProvider: [Function: WebsocketProvider],
                                HttpProvider: [Function: HttpProvider],
                                IpcProvider: [Function: IpcProvider] },
                             subscriptions: {} },
                          accounts: undefined,
                          defaultBlock: 'latest_state',
                          defaultAccount: null },
                       request: [Function: bound ],
                       call: 'net_version' },
                    getGasPrice:
                     { [Function: send]
                       method:
                        Method {
                          name: 'getGasPrice',
                          call: 'cfx_gasPrice',
                          params: 0,
                          inputFormatter: undefined,
                          outputFormatter: undefined,
                          transformPayload: undefined,
                          extraFormatters: undefined,
                          requestManager:
                           RequestManager {
                             provider:
                              Provider {
                                provider:
                                 HttpProvider {
                                   host: 'http://localhost:12537',
                                   httpAgent:
                                    Agent {
                                      _events: [Object: null prototype] { free: [Function] },
                                      _eventsCount: 1,
                                      _maxListeners: undefined,
                                      defaultPort: 80,
                                      protocol: 'http:',
                                      options: { keepAlive: true, path: null },
                                      requests: {},
                                      sockets:
                                       { 'localhost:12537:':
                                          [ Socket {
                                              connecting: false,
                                              _hadError: false,
                                              _handle:
                                               TCP {
                                                 reading: true,
                                                 onread: [Function: onStreamRead],
                                                 onconnection: null,
                                                 [Symbol(owner)]: [Circular] },
                                              _parent: null,
                                              _host: 'localhost',
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: false,
                                                 endEmitted: false,
                                                 reading: true,
                                                 sync: false,
                                                 needReadable: true,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: false,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: false,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: true,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [Function: onReadableStreamEnd],
                                                 free: [Function: onFree],
                                                 close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                 agentRemove: [Function: onRemove],
                                                 drain: [Function: ondrain],
                                                 error: [Function: socketErrorListener],
                                                 finish:
                                                  { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                              _eventsCount: 7,
                                              _maxListeners: undefined,
                                              _writableState:
                                               WritableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 finalCalled: true,
                                                 needDrain: false,
                                                 ending: true,
                                                 ended: true,
                                                 finished: false,
                                                 destroyed: false,
                                                 decodeStrings: false,
                                                 defaultEncoding: 'utf8',
                                                 length: 0,
                                                 writing: false,
                                                 corked: 0,
                                                 sync: false,
                                                 bufferProcessing: false,
                                                 onwrite: [Function: bound onwrite],
                                                 writecb: null,
                                                 writelen: 0,
                                                 bufferedRequest: null,
                                                 lastBufferedRequest: null,
                                                 pendingcb: 1,
                                                 prefinished: false,
                                                 errorEmitted: false,
                                                 emitClose: false,
                                                 bufferedRequestCount: 0,
                                                 corkedRequestsFree:
                                                  { next:
                                                     { next: null,
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] },
                                                    entry: null,
                                                    finish: [Function: bound onCorkedFinish] } },
                                              writable: false,
                                              allowHalfOpen: false,
                                              _sockname: null,
                                              _pendingData: null,
                                              _pendingEncoding: '',
                                              server: null,
                                              _server: null,
                                              parser: null,
                                              _httpMessage:
                                               ClientRequest {
                                                 _events:
                                                  [Object: null prototype] {
                                                    response: [Function],
                                                    error: [Function],
                                                    prefinish: [Function: requestOnPrefinish] },
                                                 _eventsCount: 3,
                                                 _maxListeners: undefined,
                                                 output: [],
                                                 outputEncodings: [],
                                                 outputCallbacks: [],
                                                 outputSize: 0,
                                                 writable: true,
                                                 _last: false,
                                                 chunkedEncoding: false,
                                                 shouldKeepAlive: false,
                                                 useChunkedEncodingByDefault: true,
                                                 sendDate: false,
                                                 _removedConnection: false,
                                                 _removedContLen: false,
                                                 _removedTE: false,
                                                 _contentLength: null,
                                                 _hasBody: true,
                                                 _trailer: '',
                                                 finished: true,
                                                 _headerSent: true,
                                                 socket: [Circular],
                                                 connection: [Circular],
                                                 _header:
                                                  'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                 _onPendingData: [Function: noopPendingOutput],
                                                 agent: [Circular],
                                                 socketPath: undefined,
                                                 timeout: undefined,
                                                 method: 'POST',
                                                 path: '/',
                                                 _ended: true,
                                                 res:
                                                  IncomingMessage {
                                                    _readableState:
                                                     ReadableState {
                                                       objectMode: false,
                                                       highWaterMark: 16384,
                                                       buffer: BufferList { head: null, tail: null, length: 0 },
                                                       length: 0,
                                                       pipes: null,
                                                       pipesCount: 0,
                                                       flowing: true,
                                                       ended: true,
                                                       endEmitted: true,
                                                       reading: false,
                                                       sync: true,
                                                       needReadable: false,
                                                       emittedReadable: false,
                                                       readableListening: false,
                                                       resumeScheduled: false,
                                                       paused: false,
                                                       emitClose: true,
                                                       destroyed: false,
                                                       defaultEncoding: 'utf8',
                                                       awaitDrain: 0,
                                                       readingMore: true,
                                                       decoder: null,
                                                       encoding: null },
                                                    readable: false,
                                                    _events:
                                                     [Object: null prototype] {
                                                       end: [ [Function: responseOnEnd], [Function] ],
                                                       data: [Function],
                                                       close: [Function] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    httpVersionMajor: 1,
                                                    httpVersionMinor: 1,
                                                    httpVersion: '1.1',
                                                    complete: true,
                                                    headers:
                                                     { 'content-type': 'application/json; charset=utf-8',
                                                       connection: 'close',
                                                       'content-length': '1231',
                                                       date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                    rawHeaders:
                                                     [ 'content-type',
                                                       'application/json; charset=utf-8',
                                                       'connection',
                                                       'close',
                                                       'content-length',
                                                       '1231',
                                                       'date',
                                                       'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                    trailers: {},
                                                    rawTrailers: [],
                                                    aborted: false,
                                                    upgrade: false,
                                                    url: '',
                                                    method: null,
                                                    statusCode: 200,
                                                    statusMessage: 'OK',
                                                    client: [Circular],
                                                    _consuming: false,
                                                    _dumped: false,
                                                    req: [Circular] },
                                                 aborted: undefined,
                                                 timeoutCb: null,
                                                 upgradeOrConnect: false,
                                                 parser: null,
                                                 maxHeadersCount: null,
                                                 [Symbol(isCorked)]: false,
                                                 [Symbol(outHeadersKey)]:
                                                  [Object: null prototype] {
                                                    'content-type': [ 'Content-Type', 'application/json' ],
                                                    connection: [ 'Connection', 'keep-alive' ],
                                                    host: [ 'Host', 'localhost:12537' ],
                                                    'user-agent':
                                                     [ 'User-Agent',
                                                       'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                    'content-length': [ 'Content-Length', '118' ],
                                                    cookie2: [ 'cookie2', '' ],
                                                    cookie: [ 'cookie', '' ] } },
                                              [Symbol(asyncId)]: 8,
                                              [Symbol(lastWriteQueueSize)]: 0,
                                              [Symbol(timeout)]: null,
                                              [Symbol(kBytesRead)]: 0,
                                              [Symbol(kBytesWritten)]: 0 } ] },
                                      freeSockets: {},
                                      keepAliveMsecs: 1000,
                                      keepAlive: true,
                                      maxSockets: Infinity,
                                      maxFreeSockets: 256 },
                                   timeout: 0,
                                   headers: undefined,
                                   connected: true,
                                   sendAsync: [Function] } },
                             providers:
                              { WebsocketProvider: [Function: WebsocketProvider],
                                HttpProvider: [Function: HttpProvider],
                                IpcProvider: [Function: IpcProvider] },
                             subscriptions: {} },
                          accounts: undefined,
                          defaultBlock: 'latest_state',
                          defaultAccount: null },
                       request: [Function: bound ],
                       call: 'cfx_gasPrice' },
                    getTransactionCount:
                     { [Function: send]
                       method:
                        Method {
                          name: 'getTransactionCount',
                          call: 'cfx_getTransactionCount',
                          params: 2,
                          inputFormatter: [ [Function], [Function] ],
                          outputFormatter: undefined,
                          transformPayload: undefined,
                          extraFormatters: undefined,
                          requestManager:
                           RequestManager {
                             provider:
                              Provider {
                                provider:
                                 HttpProvider {
                                   host: 'http://localhost:12537',
                                   httpAgent:
                                    Agent {
                                      _events: [Object: null prototype] { free: [Function] },
                                      _eventsCount: 1,
                                      _maxListeners: undefined,
                                      defaultPort: 80,
                                      protocol: 'http:',
                                      options: { keepAlive: true, path: null },
                                      requests: {},
                                      sockets:
                                       { 'localhost:12537:':
                                          [ Socket {
                                              connecting: false,
                                              _hadError: false,
                                              _handle:
                                               TCP {
                                                 reading: true,
                                                 onread: [Function: onStreamRead],
                                                 onconnection: null,
                                                 [Symbol(owner)]: [Circular] },
                                              _parent: null,
                                              _host: 'localhost',
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: false,
                                                 endEmitted: false,
                                                 reading: true,
                                                 sync: false,
                                                 needReadable: true,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: false,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: false,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: true,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [Function: onReadableStreamEnd],
                                                 free: [Function: onFree],
                                                 close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                 agentRemove: [Function: onRemove],
                                                 drain: [Function: ondrain],
                                                 error: [Function: socketErrorListener],
                                                 finish:
                                                  { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                              _eventsCount: 7,
                                              _maxListeners: undefined,
                                              _writableState:
                                               WritableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 finalCalled: true,
                                                 needDrain: false,
                                                 ending: true,
                                                 ended: true,
                                                 finished: false,
                                                 destroyed: false,
                                                 decodeStrings: false,
                                                 defaultEncoding: 'utf8',
                                                 length: 0,
                                                 writing: false,
                                                 corked: 0,
                                                 sync: false,
                                                 bufferProcessing: false,
                                                 onwrite: [Function: bound onwrite],
                                                 writecb: null,
                                                 writelen: 0,
                                                 bufferedRequest: null,
                                                 lastBufferedRequest: null,
                                                 pendingcb: 1,
                                                 prefinished: false,
                                                 errorEmitted: false,
                                                 emitClose: false,
                                                 bufferedRequestCount: 0,
                                                 corkedRequestsFree:
                                                  { next:
                                                     { next: null,
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] },
                                                    entry: null,
                                                    finish: [Function: bound onCorkedFinish] } },
                                              writable: false,
                                              allowHalfOpen: false,
                                              _sockname: null,
                                              _pendingData: null,
                                              _pendingEncoding: '',
                                              server: null,
                                              _server: null,
                                              parser: null,
                                              _httpMessage:
                                               ClientRequest {
                                                 _events:
                                                  [Object: null prototype] {
                                                    response: [Function],
                                                    error: [Function],
                                                    prefinish: [Function: requestOnPrefinish] },
                                                 _eventsCount: 3,
                                                 _maxListeners: undefined,
                                                 output: [],
                                                 outputEncodings: [],
                                                 outputCallbacks: [],
                                                 outputSize: 0,
                                                 writable: true,
                                                 _last: false,
                                                 chunkedEncoding: false,
                                                 shouldKeepAlive: false,
                                                 useChunkedEncodingByDefault: true,
                                                 sendDate: false,
                                                 _removedConnection: false,
                                                 _removedContLen: false,
                                                 _removedTE: false,
                                                 _contentLength: null,
                                                 _hasBody: true,
                                                 _trailer: '',
                                                 finished: true,
                                                 _headerSent: true,
                                                 socket: [Circular],
                                                 connection: [Circular],
                                                 _header:
                                                  'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                 _onPendingData: [Function: noopPendingOutput],
                                                 agent: [Circular],
                                                 socketPath: undefined,
                                                 timeout: undefined,
                                                 method: 'POST',
                                                 path: '/',
                                                 _ended: true,
                                                 res:
                                                  IncomingMessage {
                                                    _readableState:
                                                     ReadableState {
                                                       objectMode: false,
                                                       highWaterMark: 16384,
                                                       buffer: BufferList { head: null, tail: null, length: 0 },
                                                       length: 0,
                                                       pipes: null,
                                                       pipesCount: 0,
                                                       flowing: true,
                                                       ended: true,
                                                       endEmitted: true,
                                                       reading: false,
                                                       sync: true,
                                                       needReadable: false,
                                                       emittedReadable: false,
                                                       readableListening: false,
                                                       resumeScheduled: false,
                                                       paused: false,
                                                       emitClose: true,
                                                       destroyed: false,
                                                       defaultEncoding: 'utf8',
                                                       awaitDrain: 0,
                                                       readingMore: true,
                                                       decoder: null,
                                                       encoding: null },
                                                    readable: false,
                                                    _events:
                                                     [Object: null prototype] {
                                                       end: [ [Function: responseOnEnd], [Function] ],
                                                       data: [Function],
                                                       close: [Function] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    httpVersionMajor: 1,
                                                    httpVersionMinor: 1,
                                                    httpVersion: '1.1',
                                                    complete: true,
                                                    headers:
                                                     { 'content-type': 'application/json; charset=utf-8',
                                                       connection: 'close',
                                                       'content-length': '1231',
                                                       date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                    rawHeaders:
                                                     [ 'content-type',
                                                       'application/json; charset=utf-8',
                                                       'connection',
                                                       'close',
                                                       'content-length',
                                                       '1231',
                                                       'date',
                                                       'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                    trailers: {},
                                                    rawTrailers: [],
                                                    aborted: false,
                                                    upgrade: false,
                                                    url: '',
                                                    method: null,
                                                    statusCode: 200,
                                                    statusMessage: 'OK',
                                                    client: [Circular],
                                                    _consuming: false,
                                                    _dumped: false,
                                                    req: [Circular] },
                                                 aborted: undefined,
                                                 timeoutCb: null,
                                                 upgradeOrConnect: false,
                                                 parser: null,
                                                 maxHeadersCount: null,
                                                 [Symbol(isCorked)]: false,
                                                 [Symbol(outHeadersKey)]:
                                                  [Object: null prototype] {
                                                    'content-type': [ 'Content-Type', 'application/json' ],
                                                    connection: [ 'Connection', 'keep-alive' ],
                                                    host: [ 'Host', 'localhost:12537' ],
                                                    'user-agent':
                                                     [ 'User-Agent',
                                                       'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                    'content-length': [ 'Content-Length', '118' ],
                                                    cookie2: [ 'cookie2', '' ],
                                                    cookie: [ 'cookie', '' ] } },
                                              [Symbol(asyncId)]: 8,
                                              [Symbol(lastWriteQueueSize)]: 0,
                                              [Symbol(timeout)]: null,
                                              [Symbol(kBytesRead)]: 0,
                                              [Symbol(kBytesWritten)]: 0 } ] },
                                      freeSockets: {},
                                      keepAliveMsecs: 1000,
                                      keepAlive: true,
                                      maxSockets: Infinity,
                                      maxFreeSockets: 256 },
                                   timeout: 0,
                                   headers: undefined,
                                   connected: true,
                                   sendAsync: [Function] } },
                             providers:
                              { WebsocketProvider: [Function: WebsocketProvider],
                                HttpProvider: [Function: HttpProvider],
                                IpcProvider: [Function: IpcProvider] },
                             subscriptions: {} },
                          accounts: undefined,
                          defaultBlock: 'latest_state',
                          defaultAccount: null },
                       request: [Function: bound ],
                       call: 'cfx_getTransactionCount' } },
                 wallet:
                  Wallet {
                    _accounts: [Circular],
                    length: 0,
                    defaultKeyName: 'web3js_wallet' } } },
           Iban:
            { [Function: Iban]
              toAddress: [Function],
              toIban: [Function],
              fromAddress: [Function],
              fromBban: [Function],
              createIndirect: [Function],
              isValid: [Function] },
           abi: ABICoder {},
           getNodeInfo:
            { [Function: send]
              method:
               Method {
                 name: 'getNodeInfo',
                 call: 'web3_clientVersion',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'web3_clientVersion' },
           getProtocolVersion:
            { [Function: send]
              method:
               Method {
                 name: 'getProtocolVersion',
                 call: 'cfx_protocolVersion',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_protocolVersion' },
           getCoinbase:
            { [Function: send]
              method:
               Method {
                 name: 'getCoinbase',
                 call: 'cfx_coinbase',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_coinbase' },
           isMining:
            { [Function: send]
              method:
               Method {
                 name: 'isMining',
                 call: 'cfx_mining',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_mining' },
           getHashrate:
            { [Function: send]
              method:
               Method {
                 name: 'getHashrate',
                 call: 'cfx_hashrate',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: [Function: hexToNumber],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_hashrate' },
           isSyncing:
            { [Function: send]
              method:
               Method {
                 name: 'isSyncing',
                 call: 'cfx_syncing',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: [Function: outputSyncingFormatter],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_syncing' },
           getGasPrice:
            { [Function: send]
              method:
               Method {
                 name: 'getGasPrice',
                 call: 'cfx_gasPrice',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: [Function: outputBigNumberFormatter],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_gasPrice' },
           getAccounts:
            { [Function: send]
              method:
               Method {
                 name: 'getAccounts',
                 call: 'cfx_accounts',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: [Function: toChecksumAddress],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_accounts' },
           getBlockNumber:
            { [Function: send]
              method:
               Method {
                 name: 'getBlockNumber',
                 call: 'cfx_blockNumber',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: [Function: hexToNumber],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_blockNumber' },
           getBalance:
            { [Function: send]
              method:
               Method {
                 name: 'getBalance',
                 call: 'cfx_getBalance',
                 params: 2,
                 inputFormatter:
                  [ [Function: inputAddressFormatter],
                    [Function: inputDefaultBlockNumberFormatter] ],
                 outputFormatter: [Function: outputBigNumberFormatter],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_getBalance' },
           getStorageAt:
            { [Function: send]
              method:
               Method {
                 name: 'getStorageAt',
                 call: 'cfx_getStorageAt',
                 params: 3,
                 inputFormatter:
                  [ [Function: inputAddressFormatter],
                    [Function: numberToHex],
                    [Function: inputDefaultBlockNumberFormatter] ],
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_getStorageAt' },
           getCode:
            { [Function: send]
              method:
               Method {
                 name: 'getCode',
                 call: 'cfx_getCode',
                 params: 2,
                 inputFormatter:
                  [ [Function: inputAddressFormatter],
                    [Function: inputDefaultBlockNumberFormatter] ],
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_getCode' },
           getBlock:
            { [Function: send]
              method:
               Method {
                 name: 'getBlock',
                 call: [Function: blockCall],
                 params: 2,
                 inputFormatter: [ [Function: inputBlockNumberFormatter], [Function] ],
                 outputFormatter: [Function: outputBlockFormatter],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: [Function: blockCall] },
           getBlockTransactionCount:
            { [Function: send]
              method:
               Method {
                 name: 'getBlockTransactionCount',
                 call: [Function: getBlockTransactionCountCall],
                 params: 1,
                 inputFormatter: [ [Function: inputBlockNumberFormatter] ],
                 outputFormatter: [Function: hexToNumber],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: [Function: getBlockTransactionCountCall] },
           getTransaction:
            { [Function: send]
              method:
               Method {
                 name: 'getTransaction',
                 call: 'cfx_getTransactionByHash',
                 params: 1,
                 inputFormatter: [ null ],
                 outputFormatter: [Function: outputTransactionFormatter],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_getTransactionByHash' },
           getTransactionFromBlock:
            { [Function: send]
              method:
               Method {
                 name: 'getTransactionFromBlock',
                 call: [Function: transactionFromBlockCall],
                 params: 2,
                 inputFormatter:
                  [ [Function: inputBlockNumberFormatter],
                    [Function: numberToHex] ],
                 outputFormatter: [Function: outputTransactionFormatter],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: [Function: transactionFromBlockCall] },
           getTransactionReceipt:
            { [Function: send]
              method:
               Method {
                 name: 'getTransactionReceipt',
                 call: 'cfx_getTransactionReceipt',
                 params: 1,
                 inputFormatter: [ null ],
                 outputFormatter: [Function: outputTransactionReceiptFormatter],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_getTransactionReceipt' },
           getTransactionCount:
            { [Function: send]
              method:
               Method {
                 name: 'getTransactionCount',
                 call: 'cfx_getTransactionCount',
                 params: 2,
                 inputFormatter:
                  [ [Function: inputAddressFormatter],
                    [Function: inputDefaultBlockNumberFormatter] ],
                 outputFormatter: [Function: hexToNumber],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_getTransactionCount' },
           sendSignedTransaction:
            { [Function: send]
              method:
               Method {
                 name: 'sendSignedTransaction',
                 call: 'cfx_sendRawTransaction',
                 params: 1,
                 inputFormatter: [ null ],
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_sendRawTransaction' },
           signTransaction:
            { [Function: send]
              method:
               Method {
                 name: 'signTransaction',
                 call: 'cfx_signTransaction',
                 params: 1,
                 inputFormatter: [ [Function: inputTransactionFormatter] ],
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_signTransaction' },
           sendTransaction:
            { [Function: send]
              method:
               Method {
                 name: 'sendTransaction',
                 call: 'cfx_sendTransaction',
                 params: 1,
                 inputFormatter: [ [Function: inputTransactionFormatter] ],
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_sendTransaction' },
           sign:
            { [Function: send]
              method:
               Method {
                 name: 'sign',
                 call: 'cfx_sign',
                 params: 2,
                 inputFormatter:
                  [ [Function: inputSignFormatter],
                    [Function: inputAddressFormatter] ],
                 outputFormatter: undefined,
                 transformPayload: [Function: transformPayload],
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_sign' },
           call:
            { [Function: send]
              method:
               Method {
                 name: 'call',
                 call: 'cfx_call',
                 params: 2,
                 inputFormatter:
                  [ [Function: inputCallFormatter],
                    [Function: inputDefaultBlockNumberFormatter] ],
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_call' },
           estimateGas:
            { [Function: send]
              method:
               Method {
                 name: 'estimateGas',
                 call: 'cfx_estimateGas',
                 params: 1,
                 inputFormatter: [ [Function: inputCallFormatter] ],
                 outputFormatter: [Function: hexToNumber],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_estimateGas' },
           submitWork:
            { [Function: send]
              method:
               Method {
                 name: 'submitWork',
                 call: 'cfx_submitWork',
                 params: 3,
                 inputFormatter: undefined,
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_submitWork' },
           getWork:
            { [Function: send]
              method:
               Method {
                 name: 'getWork',
                 call: 'cfx_getWork',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_getWork' },
           getPastLogs:
            { [Function: send]
              method:
               Method {
                 name: 'getPastLogs',
                 call: 'cfx_getLogs',
                 params: 1,
                 inputFormatter: [ [Function: inputLogFormatter] ],
                 outputFormatter: [Function: outputLogFormatter],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts:
                  Accounts {
                    currentProvider: [Getter/Setter],
                    _requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets:
                                 { 'localhost:12537:':
                                    [ Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           paused: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           free: [Function: onFree],
                                           close: [ [Function: onClose], [Function: socketCloseListener] ],
                                           agentRemove: [Function: onRemove],
                                           drain: [Function: ondrain],
                                           error: [Function: socketErrorListener],
                                           finish:
                                            { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                        _eventsCount: 7,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: true,
                                           needDrain: false,
                                           ending: true,
                                           ended: true,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 1,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] },
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: false,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        parser: null,
                                        _httpMessage:
                                         ClientRequest {
                                           _events:
                                            [Object: null prototype] {
                                              response: [Function],
                                              error: [Function],
                                              prefinish: [Function: requestOnPrefinish] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           output: [],
                                           outputEncodings: [],
                                           outputCallbacks: [],
                                           outputSize: 0,
                                           writable: true,
                                           _last: false,
                                           chunkedEncoding: false,
                                           shouldKeepAlive: false,
                                           useChunkedEncodingByDefault: true,
                                           sendDate: false,
                                           _removedConnection: false,
                                           _removedContLen: false,
                                           _removedTE: false,
                                           _contentLength: null,
                                           _hasBody: true,
                                           _trailer: '',
                                           finished: true,
                                           _headerSent: true,
                                           socket: [Circular],
                                           connection: [Circular],
                                           _header:
                                            'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                           _onPendingData: [Function: noopPendingOutput],
                                           agent: [Circular],
                                           socketPath: undefined,
                                           timeout: undefined,
                                           method: 'POST',
                                           path: '/',
                                           _ended: true,
                                           res:
                                            IncomingMessage {
                                              _readableState:
                                               ReadableState {
                                                 objectMode: false,
                                                 highWaterMark: 16384,
                                                 buffer: BufferList { head: null, tail: null, length: 0 },
                                                 length: 0,
                                                 pipes: null,
                                                 pipesCount: 0,
                                                 flowing: true,
                                                 ended: true,
                                                 endEmitted: true,
                                                 reading: false,
                                                 sync: true,
                                                 needReadable: false,
                                                 emittedReadable: false,
                                                 readableListening: false,
                                                 resumeScheduled: false,
                                                 paused: false,
                                                 emitClose: true,
                                                 destroyed: false,
                                                 defaultEncoding: 'utf8',
                                                 awaitDrain: 0,
                                                 readingMore: true,
                                                 decoder: null,
                                                 encoding: null },
                                              readable: false,
                                              _events:
                                               [Object: null prototype] {
                                                 end: [ [Function: responseOnEnd], [Function] ],
                                                 data: [Function],
                                                 close: [Function] },
                                              _eventsCount: 3,
                                              _maxListeners: undefined,
                                              socket: [Circular],
                                              connection: [Circular],
                                              httpVersionMajor: 1,
                                              httpVersionMinor: 1,
                                              httpVersion: '1.1',
                                              complete: true,
                                              headers:
                                               { 'content-type': 'application/json; charset=utf-8',
                                                 connection: 'close',
                                                 'content-length': '1231',
                                                 date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                              rawHeaders:
                                               [ 'content-type',
                                                 'application/json; charset=utf-8',
                                                 'connection',
                                                 'close',
                                                 'content-length',
                                                 '1231',
                                                 'date',
                                                 'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                              trailers: {},
                                              rawTrailers: [],
                                              aborted: false,
                                              upgrade: false,
                                              url: '',
                                              method: null,
                                              statusCode: 200,
                                              statusMessage: 'OK',
                                              client: [Circular],
                                              _consuming: false,
                                              _dumped: false,
                                              req: [Circular] },
                                           aborted: undefined,
                                           timeoutCb: null,
                                           upgradeOrConnect: false,
                                           parser: null,
                                           maxHeadersCount: null,
                                           [Symbol(isCorked)]: false,
                                           [Symbol(outHeadersKey)]:
                                            [Object: null prototype] {
                                              'content-type': [ 'Content-Type', 'application/json' ],
                                              connection: [ 'Connection', 'keep-alive' ],
                                              host: [ 'Host', 'localhost:12537' ],
                                              'user-agent':
                                               [ 'User-Agent',
                                                 'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                              'content-length': [ 'Content-Length', '118' ],
                                              cookie2: [ 'cookie2', '' ],
                                              cookie: [ 'cookie', '' ] } },
                                        [Symbol(asyncId)]: 8,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 } ] },
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: true,
                             sendAsync: [Function] } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    givenProvider: null,
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    _provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets:
                              { 'localhost:12537:':
                                 [ Socket {
                                     connecting: false,
                                     _hadError: false,
                                     _handle:
                                      TCP {
                                        reading: true,
                                        onread: [Function: onStreamRead],
                                        onconnection: null,
                                        [Symbol(owner)]: [Circular] },
                                     _parent: null,
                                     _host: 'localhost',
                                     _readableState:
                                      ReadableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        buffer: BufferList { head: null, tail: null, length: 0 },
                                        length: 0,
                                        pipes: null,
                                        pipesCount: 0,
                                        flowing: true,
                                        ended: false,
                                        endEmitted: false,
                                        reading: true,
                                        sync: false,
                                        needReadable: true,
                                        emittedReadable: false,
                                        readableListening: false,
                                        resumeScheduled: false,
                                        paused: false,
                                        emitClose: false,
                                        destroyed: false,
                                        defaultEncoding: 'utf8',
                                        awaitDrain: 0,
                                        readingMore: false,
                                        decoder: null,
                                        encoding: null },
                                     readable: true,
                                     _events:
                                      [Object: null prototype] {
                                        end: [Function: onReadableStreamEnd],
                                        free: [Function: onFree],
                                        close: [ [Function: onClose], [Function: socketCloseListener] ],
                                        agentRemove: [Function: onRemove],
                                        drain: [Function: ondrain],
                                        error: [Function: socketErrorListener],
                                        finish:
                                         { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                     _eventsCount: 7,
                                     _maxListeners: undefined,
                                     _writableState:
                                      WritableState {
                                        objectMode: false,
                                        highWaterMark: 16384,
                                        finalCalled: true,
                                        needDrain: false,
                                        ending: true,
                                        ended: true,
                                        finished: false,
                                        destroyed: false,
                                        decodeStrings: false,
                                        defaultEncoding: 'utf8',
                                        length: 0,
                                        writing: false,
                                        corked: 0,
                                        sync: false,
                                        bufferProcessing: false,
                                        onwrite: [Function: bound onwrite],
                                        writecb: null,
                                        writelen: 0,
                                        bufferedRequest: null,
                                        lastBufferedRequest: null,
                                        pendingcb: 1,
                                        prefinished: false,
                                        errorEmitted: false,
                                        emitClose: false,
                                        bufferedRequestCount: 0,
                                        corkedRequestsFree:
                                         { next:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] },
                                           entry: null,
                                           finish: [Function: bound onCorkedFinish] } },
                                     writable: false,
                                     allowHalfOpen: false,
                                     _sockname: null,
                                     _pendingData: null,
                                     _pendingEncoding: '',
                                     server: null,
                                     _server: null,
                                     parser: null,
                                     _httpMessage:
                                      ClientRequest {
                                        _events:
                                         [Object: null prototype] {
                                           response: [Function],
                                           error: [Function],
                                           prefinish: [Function: requestOnPrefinish] },
                                        _eventsCount: 3,
                                        _maxListeners: undefined,
                                        output: [],
                                        outputEncodings: [],
                                        outputCallbacks: [],
                                        outputSize: 0,
                                        writable: true,
                                        _last: false,
                                        chunkedEncoding: false,
                                        shouldKeepAlive: false,
                                        useChunkedEncodingByDefault: true,
                                        sendDate: false,
                                        _removedConnection: false,
                                        _removedContLen: false,
                                        _removedTE: false,
                                        _contentLength: null,
                                        _hasBody: true,
                                        _trailer: '',
                                        finished: true,
                                        _headerSent: true,
                                        socket: [Circular],
                                        connection: [Circular],
                                        _header:
                                         'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                        _onPendingData: [Function: noopPendingOutput],
                                        agent: [Circular],
                                        socketPath: undefined,
                                        timeout: undefined,
                                        method: 'POST',
                                        path: '/',
                                        _ended: true,
                                        res:
                                         IncomingMessage {
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: true,
                                              endEmitted: true,
                                              reading: false,
                                              sync: true,
                                              needReadable: false,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              paused: false,
                                              emitClose: true,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: true,
                                              decoder: null,
                                              encoding: null },
                                           readable: false,
                                           _events:
                                            [Object: null prototype] {
                                              end: [ [Function: responseOnEnd], [Function] ],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 3,
                                           _maxListeners: undefined,
                                           socket: [Circular],
                                           connection: [Circular],
                                           httpVersionMajor: 1,
                                           httpVersionMinor: 1,
                                           httpVersion: '1.1',
                                           complete: true,
                                           headers:
                                            { 'content-type': 'application/json; charset=utf-8',
                                              connection: 'close',
                                              'content-length': '1231',
                                              date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                           rawHeaders:
                                            [ 'content-type',
                                              'application/json; charset=utf-8',
                                              'connection',
                                              'close',
                                              'content-length',
                                              '1231',
                                              'date',
                                              'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                           trailers: {},
                                           rawTrailers: [],
                                           aborted: false,
                                           upgrade: false,
                                           url: '',
                                           method: null,
                                           statusCode: 200,
                                           statusMessage: 'OK',
                                           client: [Circular],
                                           _consuming: false,
                                           _dumped: false,
                                           req: [Circular] },
                                        aborted: undefined,
                                        timeoutCb: null,
                                        upgradeOrConnect: false,
                                        parser: null,
                                        maxHeadersCount: null,
                                        [Symbol(isCorked)]: false,
                                        [Symbol(outHeadersKey)]:
                                         [Object: null prototype] {
                                           'content-type': [ 'Content-Type', 'application/json' ],
                                           connection: [ 'Connection', 'keep-alive' ],
                                           host: [ 'Host', 'localhost:12537' ],
                                           'user-agent':
                                            [ 'User-Agent',
                                              'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                           'content-length': [ 'Content-Length', '118' ],
                                           cookie2: [ 'cookie2', '' ],
                                           cookie: [ 'cookie', '' ] } },
                                     [Symbol(asyncId)]: 8,
                                     [Symbol(lastWriteQueueSize)]: 0,
                                     [Symbol(timeout)]: null,
                                     [Symbol(kBytesRead)]: 0,
                                     [Symbol(kBytesWritten)]: 0 } ] },
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: true,
                          sendAsync: [Function] } },
                    setProvider: [Function],
                    _ethereumCall:
                     { getId:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getId',
                             call: 'net_version',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: [Function: hexToNumber],
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'net_version' },
                       getGasPrice:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getGasPrice',
                             call: 'cfx_gasPrice',
                             params: 0,
                             inputFormatter: undefined,
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_gasPrice' },
                       getTransactionCount:
                        { [Function: send]
                          method:
                           Method {
                             name: 'getTransactionCount',
                             call: 'cfx_getTransactionCount',
                             params: 2,
                             inputFormatter: [ [Function], [Function] ],
                             outputFormatter: undefined,
                             transformPayload: undefined,
                             extraFormatters: undefined,
                             requestManager:
                              RequestManager {
                                provider:
                                 Provider {
                                   provider:
                                    HttpProvider {
                                      host: 'http://localhost:12537',
                                      httpAgent:
                                       Agent {
                                         _events: [Object: null prototype] { free: [Function] },
                                         _eventsCount: 1,
                                         _maxListeners: undefined,
                                         defaultPort: 80,
                                         protocol: 'http:',
                                         options: { keepAlive: true, path: null },
                                         requests: {},
                                         sockets:
                                          { 'localhost:12537:':
                                             [ Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    paused: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    free: [Function: onFree],
                                                    close: [ [Function: onClose], [Function: socketCloseListener] ],
                                                    agentRemove: [Function: onRemove],
                                                    drain: [Function: ondrain],
                                                    error: [Function: socketErrorListener],
                                                    finish:
                                                     { [Function: bound onceWrapper] listener: [Function: destroy] } },
                                                 _eventsCount: 7,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: true,
                                                    needDrain: false,
                                                    ending: true,
                                                    ended: true,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 1,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next:
                                                        { next: null,
                                                          entry: null,
                                                          finish: [Function: bound onCorkedFinish] },
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: false,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 parser: null,
                                                 _httpMessage:
                                                  ClientRequest {
                                                    _events:
                                                     [Object: null prototype] {
                                                       response: [Function],
                                                       error: [Function],
                                                       prefinish: [Function: requestOnPrefinish] },
                                                    _eventsCount: 3,
                                                    _maxListeners: undefined,
                                                    output: [],
                                                    outputEncodings: [],
                                                    outputCallbacks: [],
                                                    outputSize: 0,
                                                    writable: true,
                                                    _last: false,
                                                    chunkedEncoding: false,
                                                    shouldKeepAlive: false,
                                                    useChunkedEncodingByDefault: true,
                                                    sendDate: false,
                                                    _removedConnection: false,
                                                    _removedContLen: false,
                                                    _removedTE: false,
                                                    _contentLength: null,
                                                    _hasBody: true,
                                                    _trailer: '',
                                                    finished: true,
                                                    _headerSent: true,
                                                    socket: [Circular],
                                                    connection: [Circular],
                                                    _header:
                                                     'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                                                    _onPendingData: [Function: noopPendingOutput],
                                                    agent: [Circular],
                                                    socketPath: undefined,
                                                    timeout: undefined,
                                                    method: 'POST',
                                                    path: '/',
                                                    _ended: true,
                                                    res:
                                                     IncomingMessage {
                                                       _readableState:
                                                        ReadableState {
                                                          objectMode: false,
                                                          highWaterMark: 16384,
                                                          buffer: BufferList { head: null, tail: null, length: 0 },
                                                          length: 0,
                                                          pipes: null,
                                                          pipesCount: 0,
                                                          flowing: true,
                                                          ended: true,
                                                          endEmitted: true,
                                                          reading: false,
                                                          sync: true,
                                                          needReadable: false,
                                                          emittedReadable: false,
                                                          readableListening: false,
                                                          resumeScheduled: false,
                                                          paused: false,
                                                          emitClose: true,
                                                          destroyed: false,
                                                          defaultEncoding: 'utf8',
                                                          awaitDrain: 0,
                                                          readingMore: true,
                                                          decoder: null,
                                                          encoding: null },
                                                       readable: false,
                                                       _events:
                                                        [Object: null prototype] {
                                                          end: [ [Function: responseOnEnd], [Function] ],
                                                          data: [Function],
                                                          close: [Function] },
                                                       _eventsCount: 3,
                                                       _maxListeners: undefined,
                                                       socket: [Circular],
                                                       connection: [Circular],
                                                       httpVersionMajor: 1,
                                                       httpVersionMinor: 1,
                                                       httpVersion: '1.1',
                                                       complete: true,
                                                       headers:
                                                        { 'content-type': 'application/json; charset=utf-8',
                                                          connection: 'close',
                                                          'content-length': '1231',
                                                          date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                                                       rawHeaders:
                                                        [ 'content-type',
                                                          'application/json; charset=utf-8',
                                                          'connection',
                                                          'close',
                                                          'content-length',
                                                          '1231',
                                                          'date',
                                                          'Fri, 29 Nov 2019 07:43:06 GMT' ],
                                                       trailers: {},
                                                       rawTrailers: [],
                                                       aborted: false,
                                                       upgrade: false,
                                                       url: '',
                                                       method: null,
                                                       statusCode: 200,
                                                       statusMessage: 'OK',
                                                       client: [Circular],
                                                       _consuming: false,
                                                       _dumped: false,
                                                       req: [Circular] },
                                                    aborted: undefined,
                                                    timeoutCb: null,
                                                    upgradeOrConnect: false,
                                                    parser: null,
                                                    maxHeadersCount: null,
                                                    [Symbol(isCorked)]: false,
                                                    [Symbol(outHeadersKey)]:
                                                     [Object: null prototype] {
                                                       'content-type': [ 'Content-Type', 'application/json' ],
                                                       connection: [ 'Connection', 'keep-alive' ],
                                                       host: [ 'Host', 'localhost:12537' ],
                                                       'user-agent':
                                                        [ 'User-Agent',
                                                          'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                                                       'content-length': [ 'Content-Length', '118' ],
                                                       cookie2: [ 'cookie2', '' ],
                                                       cookie: [ 'cookie', '' ] } },
                                                 [Symbol(asyncId)]: 8,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 } ] },
                                         freeSockets: {},
                                         keepAliveMsecs: 1000,
                                         keepAlive: true,
                                         maxSockets: Infinity,
                                         maxFreeSockets: 256 },
                                      timeout: 0,
                                      headers: undefined,
                                      connected: true,
                                      sendAsync: [Function] } },
                                providers:
                                 { WebsocketProvider: [Function: WebsocketProvider],
                                   HttpProvider: [Function: HttpProvider],
                                   IpcProvider: [Function: IpcProvider] },
                                subscriptions: {} },
                             accounts: undefined,
                             defaultBlock: 'latest_state',
                             defaultAccount: null },
                          request: [Function: bound ],
                          call: 'cfx_getTransactionCount' } },
                    wallet:
                     Wallet {
                       _accounts: [Circular],
                       length: 0,
                       defaultKeyName: 'web3js_wallet' } },
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_getLogs' },
           subscribe: [Function] } },
     class_defaults: {},
     currentProvider:
      HttpProvider {
        host: 'http://localhost:12537',
        httpAgent:
         Agent {
           _events: [Object: null prototype] { free: [Function] },
           _eventsCount: 1,
           _maxListeners: undefined,
           defaultPort: 80,
           protocol: 'http:',
           options: { keepAlive: true, path: null },
           requests: {},
           sockets:
            { 'localhost:12537:':
               [ Socket {
                   connecting: false,
                   _hadError: false,
                   _handle:
                    TCP {
                      reading: true,
                      onread: [Function: onStreamRead],
                      onconnection: null,
                      [Symbol(owner)]: [Circular] },
                   _parent: null,
                   _host: 'localhost',
                   _readableState:
                    ReadableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      buffer: BufferList { head: null, tail: null, length: 0 },
                      length: 0,
                      pipes: null,
                      pipesCount: 0,
                      flowing: true,
                      ended: false,
                      endEmitted: false,
                      reading: true,
                      sync: false,
                      needReadable: true,
                      emittedReadable: false,
                      readableListening: false,
                      resumeScheduled: false,
                      paused: false,
                      emitClose: false,
                      destroyed: false,
                      defaultEncoding: 'utf8',
                      awaitDrain: 0,
                      readingMore: false,
                      decoder: null,
                      encoding: null },
                   readable: true,
                   _events:
                    [Object: null prototype] {
                      end: [Function: onReadableStreamEnd],
                      free: [Function: onFree],
                      close: [ [Function: onClose], [Function: socketCloseListener] ],
                      agentRemove: [Function: onRemove],
                      drain: [Function: ondrain],
                      error: [Function: socketErrorListener],
                      finish:
                       { [Function: bound onceWrapper] listener: [Function: destroy] } },
                   _eventsCount: 7,
                   _maxListeners: undefined,
                   _writableState:
                    WritableState {
                      objectMode: false,
                      highWaterMark: 16384,
                      finalCalled: true,
                      needDrain: false,
                      ending: true,
                      ended: true,
                      finished: false,
                      destroyed: false,
                      decodeStrings: false,
                      defaultEncoding: 'utf8',
                      length: 0,
                      writing: false,
                      corked: 0,
                      sync: false,
                      bufferProcessing: false,
                      onwrite: [Function: bound onwrite],
                      writecb: null,
                      writelen: 0,
                      bufferedRequest: null,
                      lastBufferedRequest: null,
                      pendingcb: 1,
                      prefinished: false,
                      errorEmitted: false,
                      emitClose: false,
                      bufferedRequestCount: 0,
                      corkedRequestsFree:
                       { next:
                          { next: null,
                            entry: null,
                            finish: [Function: bound onCorkedFinish] },
                         entry: null,
                         finish: [Function: bound onCorkedFinish] } },
                   writable: false,
                   allowHalfOpen: false,
                   _sockname: null,
                   _pendingData: null,
                   _pendingEncoding: '',
                   server: null,
                   _server: null,
                   parser: null,
                   _httpMessage:
                    ClientRequest {
                      _events:
                       [Object: null prototype] {
                         response: [Function],
                         error: [Function],
                         prefinish: [Function: requestOnPrefinish] },
                      _eventsCount: 3,
                      _maxListeners: undefined,
                      output: [],
                      outputEncodings: [],
                      outputCallbacks: [],
                      outputSize: 0,
                      writable: true,
                      _last: false,
                      chunkedEncoding: false,
                      shouldKeepAlive: false,
                      useChunkedEncodingByDefault: true,
                      sendDate: false,
                      _removedConnection: false,
                      _removedContLen: false,
                      _removedTE: false,
                      _contentLength: null,
                      _hasBody: true,
                      _trailer: '',
                      finished: true,
                      _headerSent: true,
                      socket: [Circular],
                      connection: [Circular],
                      _header:
                       'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                      _onPendingData: [Function: noopPendingOutput],
                      agent: [Circular],
                      socketPath: undefined,
                      timeout: undefined,
                      method: 'POST',
                      path: '/',
                      _ended: true,
                      res:
                       IncomingMessage {
                         _readableState:
                          ReadableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: null,
                            pipesCount: 0,
                            flowing: true,
                            ended: true,
                            endEmitted: true,
                            reading: false,
                            sync: true,
                            needReadable: false,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            paused: false,
                            emitClose: true,
                            destroyed: false,
                            defaultEncoding: 'utf8',
                            awaitDrain: 0,
                            readingMore: true,
                            decoder: null,
                            encoding: null },
                         readable: false,
                         _events:
                          [Object: null prototype] {
                            end: [ [Function: responseOnEnd], [Function] ],
                            data: [Function],
                            close: [Function] },
                         _eventsCount: 3,
                         _maxListeners: undefined,
                         socket: [Circular],
                         connection: [Circular],
                         httpVersionMajor: 1,
                         httpVersionMinor: 1,
                         httpVersion: '1.1',
                         complete: true,
                         headers:
                          { 'content-type': 'application/json; charset=utf-8',
                            connection: 'close',
                            'content-length': '1231',
                            date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                         rawHeaders:
                          [ 'content-type',
                            'application/json; charset=utf-8',
                            'connection',
                            'close',
                            'content-length',
                            '1231',
                            'date',
                            'Fri, 29 Nov 2019 07:43:06 GMT' ],
                         trailers: {},
                         rawTrailers: [],
                         aborted: false,
                         upgrade: false,
                         url: '',
                         method: null,
                         statusCode: 200,
                         statusMessage: 'OK',
                         client: [Circular],
                         _consuming: false,
                         _dumped: false,
                         req: [Circular] },
                      aborted: undefined,
                      timeoutCb: null,
                      upgradeOrConnect: false,
                      parser: null,
                      maxHeadersCount: null,
                      [Symbol(isCorked)]: false,
                      [Symbol(outHeadersKey)]:
                       [Object: null prototype] {
                         'content-type': [ 'Content-Type', 'application/json' ],
                         connection: [ 'Connection', 'keep-alive' ],
                         host: [ 'Host', 'localhost:12537' ],
                         'user-agent':
                          [ 'User-Agent',
                            'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                         'content-length': [ 'Content-Length', '118' ],
                         cookie2: [ 'cookie2', '' ],
                         cookie: [ 'cookie', '' ] } },
                   [Symbol(asyncId)]: 8,
                   [Symbol(lastWriteQueueSize)]: 0,
                   [Symbol(timeout)]: null,
                   [Symbol(kBytesRead)]: 0,
                   [Symbol(kBytesWritten)]: 0 } ] },
           freeSockets: {},
           keepAliveMsecs: 1000,
           keepAlive: true,
           maxSockets: Infinity,
           maxFreeSockets: 256 },
        timeout: 0,
        headers: undefined,
        connected: true,
        sendAsync: [Function] } },
  abi:
   [ { constant: false,
       inputs: [ { name: 'addr', type: 'address' } ],
       name: 'getBalanceInEth',
       outputs: [ { name: '', type: 'uint256' } ],
       payable: false,
       type: 'function',
       signature: '0x7bd703e8' },
     { constant: false,
       inputs:
        [ { name: 'receiver', type: 'address' },
          { name: 'amount', type: 'uint256' } ],
       name: 'sendCoin',
       outputs: [ { name: 'sufficient', type: 'bool' } ],
       payable: false,
       type: 'function',
       signature: '0x90b98a11' },
     { constant: false,
       inputs: [ { name: 'addr', type: 'address' } ],
       name: 'getBalance',
       outputs: [ { name: '', type: 'uint256' } ],
       payable: false,
       type: 'function',
       signature: '0xf8b2cb4f' },
     { inputs: [],
       payable: false,
       type: 'constructor',
       constant: undefined },
     { anonymous: false,
       inputs:
        [ { indexed: true, name: '_from', type: 'address' },
          { indexed: true, name: '_to', type: 'address' },
          { indexed: false, name: '_value', type: 'uint256' } ],
       name: 'Transfer',
       type: 'event',
       constant: undefined,
       payable: undefined,
       signature:
        '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' } ],
  contract:
   Contract {
     currentProvider: [Getter/Setter],
     _requestManager:
      RequestManager {
        provider:
         Provider {
           provider:
            HttpProvider {
              host: 'http://localhost:12537',
              httpAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 80,
                 protocol: 'http:',
                 options: { keepAlive: true, path: null },
                 requests: {},
                 sockets:
                  { 'localhost:12537:':
                     [ Socket {
                         connecting: false,
                         _hadError: false,
                         _handle:
                          TCP {
                            reading: true,
                            onread: [Function: onStreamRead],
                            onconnection: null,
                            [Symbol(owner)]: [Circular] },
                         _parent: null,
                         _host: 'localhost',
                         _readableState:
                          ReadableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            buffer: BufferList { head: null, tail: null, length: 0 },
                            length: 0,
                            pipes: null,
                            pipesCount: 0,
                            flowing: true,
                            ended: false,
                            endEmitted: false,
                            reading: true,
                            sync: false,
                            needReadable: true,
                            emittedReadable: false,
                            readableListening: false,
                            resumeScheduled: false,
                            paused: false,
                            emitClose: false,
                            destroyed: false,
                            defaultEncoding: 'utf8',
                            awaitDrain: 0,
                            readingMore: false,
                            decoder: null,
                            encoding: null },
                         readable: true,
                         _events:
                          [Object: null prototype] {
                            end: [Function: onReadableStreamEnd],
                            free: [Function: onFree],
                            close: [ [Function: onClose], [Function: socketCloseListener] ],
                            agentRemove: [Function: onRemove],
                            drain: [Function: ondrain],
                            error: [Function: socketErrorListener],
                            finish:
                             { [Function: bound onceWrapper] listener: [Function: destroy] } },
                         _eventsCount: 7,
                         _maxListeners: undefined,
                         _writableState:
                          WritableState {
                            objectMode: false,
                            highWaterMark: 16384,
                            finalCalled: true,
                            needDrain: false,
                            ending: true,
                            ended: true,
                            finished: false,
                            destroyed: false,
                            decodeStrings: false,
                            defaultEncoding: 'utf8',
                            length: 0,
                            writing: false,
                            corked: 0,
                            sync: false,
                            bufferProcessing: false,
                            onwrite: [Function: bound onwrite],
                            writecb: null,
                            writelen: 0,
                            bufferedRequest: null,
                            lastBufferedRequest: null,
                            pendingcb: 1,
                            prefinished: false,
                            errorEmitted: false,
                            emitClose: false,
                            bufferedRequestCount: 0,
                            corkedRequestsFree:
                             { next:
                                { next: null,
                                  entry: null,
                                  finish: [Function: bound onCorkedFinish] },
                               entry: null,
                               finish: [Function: bound onCorkedFinish] } },
                         writable: false,
                         allowHalfOpen: false,
                         _sockname: null,
                         _pendingData: null,
                         _pendingEncoding: '',
                         server: null,
                         _server: null,
                         parser: null,
                         _httpMessage:
                          ClientRequest {
                            _events:
                             [Object: null prototype] {
                               response: [Function],
                               error: [Function],
                               prefinish: [Function: requestOnPrefinish] },
                            _eventsCount: 3,
                            _maxListeners: undefined,
                            output: [],
                            outputEncodings: [],
                            outputCallbacks: [],
                            outputSize: 0,
                            writable: true,
                            _last: false,
                            chunkedEncoding: false,
                            shouldKeepAlive: false,
                            useChunkedEncodingByDefault: true,
                            sendDate: false,
                            _removedConnection: false,
                            _removedContLen: false,
                            _removedTE: false,
                            _contentLength: null,
                            _hasBody: true,
                            _trailer: '',
                            finished: true,
                            _headerSent: true,
                            socket: [Circular],
                            connection: [Circular],
                            _header:
                             'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                            _onPendingData: [Function: noopPendingOutput],
                            agent: [Circular],
                            socketPath: undefined,
                            timeout: undefined,
                            method: 'POST',
                            path: '/',
                            _ended: true,
                            res:
                             IncomingMessage {
                               _readableState:
                                ReadableState {
                                  objectMode: false,
                                  highWaterMark: 16384,
                                  buffer: BufferList { head: null, tail: null, length: 0 },
                                  length: 0,
                                  pipes: null,
                                  pipesCount: 0,
                                  flowing: true,
                                  ended: true,
                                  endEmitted: true,
                                  reading: false,
                                  sync: true,
                                  needReadable: false,
                                  emittedReadable: false,
                                  readableListening: false,
                                  resumeScheduled: false,
                                  paused: false,
                                  emitClose: true,
                                  destroyed: false,
                                  defaultEncoding: 'utf8',
                                  awaitDrain: 0,
                                  readingMore: true,
                                  decoder: null,
                                  encoding: null },
                               readable: false,
                               _events:
                                [Object: null prototype] {
                                  end: [ [Function: responseOnEnd], [Function] ],
                                  data: [Function],
                                  close: [Function] },
                               _eventsCount: 3,
                               _maxListeners: undefined,
                               socket: [Circular],
                               connection: [Circular],
                               httpVersionMajor: 1,
                               httpVersionMinor: 1,
                               httpVersion: '1.1',
                               complete: true,
                               headers:
                                { 'content-type': 'application/json; charset=utf-8',
                                  connection: 'close',
                                  'content-length': '1231',
                                  date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                               rawHeaders:
                                [ 'content-type',
                                  'application/json; charset=utf-8',
                                  'connection',
                                  'close',
                                  'content-length',
                                  '1231',
                                  'date',
                                  'Fri, 29 Nov 2019 07:43:06 GMT' ],
                               trailers: {},
                               rawTrailers: [],
                               aborted: false,
                               upgrade: false,
                               url: '',
                               method: null,
                               statusCode: 200,
                               statusMessage: 'OK',
                               client: [Circular],
                               _consuming: false,
                               _dumped: false,
                               req: [Circular] },
                            aborted: undefined,
                            timeoutCb: null,
                            upgradeOrConnect: false,
                            parser: null,
                            maxHeadersCount: null,
                            [Symbol(isCorked)]: false,
                            [Symbol(outHeadersKey)]:
                             [Object: null prototype] {
                               'content-type': [ 'Content-Type', 'application/json' ],
                               connection: [ 'Connection', 'keep-alive' ],
                               host: [ 'Host', 'localhost:12537' ],
                               'user-agent':
                                [ 'User-Agent',
                                  'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                               'content-length': [ 'Content-Length', '118' ],
                               cookie2: [ 'cookie2', '' ],
                               cookie: [ 'cookie', '' ] } },
                         [Symbol(asyncId)]: 8,
                         [Symbol(lastWriteQueueSize)]: 0,
                         [Symbol(timeout)]: null,
                         [Symbol(kBytesRead)]: 0,
                         [Symbol(kBytesWritten)]: 0 } ] },
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: true,
                 maxSockets: Infinity,
                 maxFreeSockets: 256 },
              timeout: 0,
              headers: undefined,
              connected: true,
              sendAsync: [Function] } },
        providers:
         { WebsocketProvider: [Function: WebsocketProvider],
           HttpProvider: [Function: HttpProvider],
           IpcProvider: [Function: IpcProvider] },
        subscriptions: {} },
     givenProvider: null,
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     _provider:
      Provider {
        provider:
         HttpProvider {
           host: 'http://localhost:12537',
           httpAgent:
            Agent {
              _events: [Object: null prototype] { free: [Function] },
              _eventsCount: 1,
              _maxListeners: undefined,
              defaultPort: 80,
              protocol: 'http:',
              options: { keepAlive: true, path: null },
              requests: {},
              sockets:
               { 'localhost:12537:':
                  [ Socket {
                      connecting: false,
                      _hadError: false,
                      _handle:
                       TCP {
                         reading: true,
                         onread: [Function: onStreamRead],
                         onconnection: null,
                         [Symbol(owner)]: [Circular] },
                      _parent: null,
                      _host: 'localhost',
                      _readableState:
                       ReadableState {
                         objectMode: false,
                         highWaterMark: 16384,
                         buffer: BufferList { head: null, tail: null, length: 0 },
                         length: 0,
                         pipes: null,
                         pipesCount: 0,
                         flowing: true,
                         ended: false,
                         endEmitted: false,
                         reading: true,
                         sync: false,
                         needReadable: true,
                         emittedReadable: false,
                         readableListening: false,
                         resumeScheduled: false,
                         paused: false,
                         emitClose: false,
                         destroyed: false,
                         defaultEncoding: 'utf8',
                         awaitDrain: 0,
                         readingMore: false,
                         decoder: null,
                         encoding: null },
                      readable: true,
                      _events:
                       [Object: null prototype] {
                         end: [Function: onReadableStreamEnd],
                         free: [Function: onFree],
                         close: [ [Function: onClose], [Function: socketCloseListener] ],
                         agentRemove: [Function: onRemove],
                         drain: [Function: ondrain],
                         error: [Function: socketErrorListener],
                         finish:
                          { [Function: bound onceWrapper] listener: [Function: destroy] } },
                      _eventsCount: 7,
                      _maxListeners: undefined,
                      _writableState:
                       WritableState {
                         objectMode: false,
                         highWaterMark: 16384,
                         finalCalled: true,
                         needDrain: false,
                         ending: true,
                         ended: true,
                         finished: false,
                         destroyed: false,
                         decodeStrings: false,
                         defaultEncoding: 'utf8',
                         length: 0,
                         writing: false,
                         corked: 0,
                         sync: false,
                         bufferProcessing: false,
                         onwrite: [Function: bound onwrite],
                         writecb: null,
                         writelen: 0,
                         bufferedRequest: null,
                         lastBufferedRequest: null,
                         pendingcb: 1,
                         prefinished: false,
                         errorEmitted: false,
                         emitClose: false,
                         bufferedRequestCount: 0,
                         corkedRequestsFree:
                          { next:
                             { next: null,
                               entry: null,
                               finish: [Function: bound onCorkedFinish] },
                            entry: null,
                            finish: [Function: bound onCorkedFinish] } },
                      writable: false,
                      allowHalfOpen: false,
                      _sockname: null,
                      _pendingData: null,
                      _pendingEncoding: '',
                      server: null,
                      _server: null,
                      parser: null,
                      _httpMessage:
                       ClientRequest {
                         _events:
                          [Object: null prototype] {
                            response: [Function],
                            error: [Function],
                            prefinish: [Function: requestOnPrefinish] },
                         _eventsCount: 3,
                         _maxListeners: undefined,
                         output: [],
                         outputEncodings: [],
                         outputCallbacks: [],
                         outputSize: 0,
                         writable: true,
                         _last: false,
                         chunkedEncoding: false,
                         shouldKeepAlive: false,
                         useChunkedEncodingByDefault: true,
                         sendDate: false,
                         _removedConnection: false,
                         _removedContLen: false,
                         _removedTE: false,
                         _contentLength: null,
                         _hasBody: true,
                         _trailer: '',
                         finished: true,
                         _headerSent: true,
                         socket: [Circular],
                         connection: [Circular],
                         _header:
                          'POST / HTTP/1.1\r\nContent-Type: application/json\r\nConnection: keep-alive\r\nHost: localhost:12537\r\nUser-Agent: Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51\r\nContent-Length: 118\r\ncookie2: \r\ncookie: \r\n\r\n',
                         _onPendingData: [Function: noopPendingOutput],
                         agent: [Circular],
                         socketPath: undefined,
                         timeout: undefined,
                         method: 'POST',
                         path: '/',
                         _ended: true,
                         res:
                          IncomingMessage {
                            _readableState:
                             ReadableState {
                               objectMode: false,
                               highWaterMark: 16384,
                               buffer: BufferList { head: null, tail: null, length: 0 },
                               length: 0,
                               pipes: null,
                               pipesCount: 0,
                               flowing: true,
                               ended: true,
                               endEmitted: true,
                               reading: false,
                               sync: true,
                               needReadable: false,
                               emittedReadable: false,
                               readableListening: false,
                               resumeScheduled: false,
                               paused: false,
                               emitClose: true,
                               destroyed: false,
                               defaultEncoding: 'utf8',
                               awaitDrain: 0,
                               readingMore: true,
                               decoder: null,
                               encoding: null },
                            readable: false,
                            _events:
                             [Object: null prototype] {
                               end: [ [Function: responseOnEnd], [Function] ],
                               data: [Function],
                               close: [Function] },
                            _eventsCount: 3,
                            _maxListeners: undefined,
                            socket: [Circular],
                            connection: [Circular],
                            httpVersionMajor: 1,
                            httpVersionMinor: 1,
                            httpVersion: '1.1',
                            complete: true,
                            headers:
                             { 'content-type': 'application/json; charset=utf-8',
                               connection: 'close',
                               'content-length': '1231',
                               date: 'Fri, 29 Nov 2019 07:43:06 GMT' },
                            rawHeaders:
                             [ 'content-type',
                               'application/json; charset=utf-8',
                               'connection',
                               'close',
                               'content-length',
                               '1231',
                               'date',
                               'Fri, 29 Nov 2019 07:43:06 GMT' ],
                            trailers: {},
                            rawTrailers: [],
                            aborted: false,
                            upgrade: false,
                            url: '',
                            method: null,
                            statusCode: 200,
                            statusMessage: 'OK',
                            client: [Circular],
                            _consuming: false,
                            _dumped: false,
                            req: [Circular] },
                         aborted: undefined,
                         timeoutCb: null,
                         upgradeOrConnect: false,
                         parser: null,
                         maxHeadersCount: null,
                         [Symbol(isCorked)]: false,
                         [Symbol(outHeadersKey)]:
                          [Object: null prototype] {
                            'content-type': [ 'Content-Type', 'application/json' ],
                            connection: [ 'Connection', 'keep-alive' ],
                            host: [ 'Host', 'localhost:12537' ],
                            'user-agent':
                             [ 'User-Agent',
                               'Mozilla/5.0 (Darwin x64) node.js/10.15.3 v8/6.8.275.32-node.51' ],
                            'content-length': [ 'Content-Length', '118' ],
                            cookie2: [ 'cookie2', '' ],
                            cookie: [ 'cookie', '' ] } },
                      [Symbol(asyncId)]: 8,
                      [Symbol(lastWriteQueueSize)]: 0,
                      [Symbol(timeout)]: null,
                      [Symbol(kBytesRead)]: 0,
                      [Symbol(kBytesWritten)]: 0 } ] },
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256 },
           timeout: 0,
           headers: undefined,
           connected: true,
           sendAsync: [Function] } },
     setProvider: [Function],
     BatchRequest: [Function: bound Batch],
     extend:
      { [Function: ex]
        formatters:
         { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
           inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
           inputCallFormatter: [Function: inputCallFormatter],
           inputTransactionFormatter: [Function: inputTransactionFormatter],
           inputAddressFormatter: [Function: inputAddressFormatter],
           inputPostFormatter: [Function: inputPostFormatter],
           inputLogFormatter: [Function: inputLogFormatter],
           inputSignFormatter: [Function: inputSignFormatter],
           outputBigNumberFormatter: [Function: outputBigNumberFormatter],
           outputTransactionFormatter: [Function: outputTransactionFormatter],
           outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
           outputBlockFormatter: [Function: outputBlockFormatter],
           outputLogFormatter: [Function: outputLogFormatter],
           outputPostFormatter: [Function: outputPostFormatter],
           outputSyncingFormatter: [Function: outputSyncingFormatter] },
        utils:
         { _fireError: [Function: _fireError],
           _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
           _flattenTypes: [Function: _flattenTypes],
           randomHex: [Function: randomHex],
           _:
            { [Function: _]
              _: [Circular],
              VERSION: '1.9.1',
              iteratee: [Function: builtinIteratee],
              forEach: [Function],
              each: [Function],
              collect: [Function],
              map: [Function],
              inject: [Function],
              foldl: [Function],
              reduce: [Function],
              foldr: [Function],
              reduceRight: [Function],
              detect: [Function],
              find: [Function],
              select: [Function],
              filter: [Function],
              reject: [Function],
              all: [Function],
              every: [Function],
              any: [Function],
              some: [Function],
              include: [Function],
              includes: [Function],
              contains: [Function],
              invoke: [Function],
              pluck: [Function],
              where: [Function],
              findWhere: [Function],
              max: [Function],
              min: [Function],
              shuffle: [Function],
              sample: [Function],
              sortBy: [Function],
              groupBy: [Function],
              indexBy: [Function],
              countBy: [Function],
              toArray: [Function],
              size: [Function],
              partition: [Function],
              take: [Function],
              head: [Function],
              first: [Function],
              initial: [Function],
              last: [Function],
              drop: [Function],
              tail: [Function],
              rest: [Function],
              compact: [Function],
              flatten: [Function],
              without: [Function],
              unique: [Function],
              uniq: [Function],
              union: [Function],
              intersection: [Function],
              difference: [Function],
              unzip: [Function],
              zip: [Function],
              object: [Function],
              findIndex: [Function],
              findLastIndex: [Function],
              sortedIndex: [Function],
              indexOf: [Function],
              lastIndexOf: [Function],
              range: [Function],
              chunk: [Function],
              bind: [Function],
              partial: { [Function] placeholder: [Circular] },
              bindAll: [Function],
              memoize: [Function],
              delay: [Function],
              defer: [Function: bound],
              throttle: [Function],
              debounce: [Function],
              wrap: [Function],
              negate: [Function],
              compose: [Function],
              after: [Function],
              before: [Function],
              once: [Function: bound],
              restArguments: [Function: restArguments],
              keys: [Function],
              allKeys: [Function],
              values: [Function],
              mapObject: [Function],
              pairs: [Function],
              invert: [Function],
              methods: [Function],
              functions: [Function],
              extend: [Function],
              assign: [Function],
              extendOwn: [Function],
              findKey: [Function],
              pick: [Function],
              omit: [Function],
              defaults: [Function],
              create: [Function],
              clone: [Function],
              tap: [Function],
              isMatch: [Function],
              isEqual: [Function],
              isEmpty: [Function],
              isElement: [Function],
              isArray: [Function: isArray],
              isObject: [Function],
              isArguments: [Function],
              isFunction: [Function],
              isString: [Function],
              isNumber: [Function],
              isDate: [Function],
              isRegExp: [Function],
              isError: [Function],
              isSymbol: [Function],
              isMap: [Function],
              isWeakMap: [Function],
              isSet: [Function],
              isWeakSet: [Function],
              isFinite: [Function],
              isNaN: [Function],
              isBoolean: [Function],
              isNull: [Function],
              isUndefined: [Function],
              has: [Function],
              noConflict: [Function],
              identity: [Function],
              constant: [Function],
              noop: [Function],
              property: [Function],
              propertyOf: [Function],
              matches: [Function],
              matcher: [Function],
              times: [Function],
              random: [Function],
              now: [Function: now],
              escape: [Function],
              unescape: [Function],
              result: [Function],
              uniqueId: [Function],
              templateSettings:
               { evaluate: /<%([\s\S]+?)%>/g,
                 interpolate: /<%=([\s\S]+?)%>/g,
                 escape: /<%-([\s\S]+?)%>/g },
              template: [Function],
              chain: [Function],
              mixin: [Function] },
           BN:
            { [Function: BN]
              BN: [Circular],
              wordSize: 26,
              isBN: [Function: isBN],
              max: [Function: max],
              min: [Function: min],
              red: [Function: red],
              _prime: [Function: prime],
              mont: [Function: mont] },
           isBN: [Function: isBN],
           isBigNumber: [Function: isBigNumber],
           isHex: [Function: isHex],
           isHexStrict: [Function: isHexStrict],
           sha3:
            { [Function: sha3]
              _Hash:
               { keccak256: [Function],
                 keccak512: [Function],
                 keccak256s: [Function],
                 keccak512s: [Function] } },
           keccak256:
            { [Function: sha3]
              _Hash:
               { keccak256: [Function],
                 keccak512: [Function],
                 keccak256s: [Function],
                 keccak512s: [Function] } },
           soliditySha3: [Function: soliditySha3],
           isAddress: [Function: isAddress],
           checkAddressChecksum: [Function: checkAddressChecksum],
           toChecksumAddress: [Function: toChecksumAddress],
           toHex: [Function: toHex],
           toBN: [Function: toBN],
           bytesToHex: [Function: bytesToHex],
           hexToBytes: [Function: hexToBytes],
           hexToNumberString: [Function: hexToNumberString],
           hexToNumber: [Function: hexToNumber],
           toDecimal: [Function: hexToNumber],
           numberToHex: [Function: numberToHex],
           fromDecimal: [Function: numberToHex],
           hexToUtf8: [Function: hexToUtf8],
           hexToString: [Function: hexToUtf8],
           toUtf8: [Function: hexToUtf8],
           utf8ToHex: [Function: utf8ToHex],
           stringToHex: [Function: utf8ToHex],
           fromUtf8: [Function: utf8ToHex],
           hexToAscii: [Function: hexToAscii],
           toAscii: [Function: hexToAscii],
           asciiToHex: [Function: asciiToHex],
           fromAscii: [Function: asciiToHex],
           unitMap:
            { noether: '0',
              wei: '1',
              kwei: '1000',
              Kwei: '1000',
              babbage: '1000',
              femtoether: '1000',
              mwei: '1000000',
              Mwei: '1000000',
              lovelace: '1000000',
              picoether: '1000000',
              gwei: '1000000000',
              Gwei: '1000000000',
              shannon: '1000000000',
              nanoether: '1000000000',
              nano: '1000000000',
              szabo: '1000000000000',
              microether: '1000000000000',
              micro: '1000000000000',
              finney: '1000000000000000',
              milliether: '1000000000000000',
              milli: '1000000000000000',
              ether: '1000000000000000000',
              kether: '1000000000000000000000',
              grand: '1000000000000000000000',
              mether: '1000000000000000000000000',
              gether: '1000000000000000000000000000',
              tether: '1000000000000000000000000000000' },
           toWei: [Function: toWei],
           fromWei: [Function: fromWei],
           padLeft: [Function: leftPad],
           leftPad: [Function: leftPad],
           padRight: [Function: rightPad],
           rightPad: [Function: rightPad],
           toTwosComplement: [Function: toTwosComplement] },
        Method: [Function: Method] },
     clearSubscriptions: [Function],
     options: { address: [Getter/Setter], jsonInterface: [Getter/Setter] },
     defaultAccount: [Getter/Setter],
     defaultBlock: [Getter/Setter],
     methods:
      { getBalanceInEth: [Function: bound _createTxObject],
        '0x7bd703e8': [Function: bound _createTxObject],
        'getBalanceInEth(address)': [Function: bound _createTxObject],
        sendCoin: [Function: bound _createTxObject],
        '0x90b98a11': [Function: bound _createTxObject],
        'sendCoin(address,uint256)': [Function: bound _createTxObject],
        getBalance: [Function: bound _createTxObject],
        '0xf8b2cb4f': [Function: bound _createTxObject],
        'getBalance(address)': [Function: bound _createTxObject] },
     events:
      { Transfer: [Function: bound ],
        '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef': [Function: bound ],
        'Transfer(address,address,uint256)': [Function: bound ],
        allEvents: [Function: bound ] },
     _address: '0xb3247fA6b8e674F86055a74DFa8b35c6C339dDF9',
     _jsonInterface:
      [ { constant: false,
          inputs: [ { name: 'addr', type: 'address' } ],
          name: 'getBalanceInEth',
          outputs: [ { name: '', type: 'uint256' } ],
          payable: false,
          type: 'function',
          signature: '0x7bd703e8' },
        { constant: false,
          inputs:
           [ { name: 'receiver', type: 'address' },
             { name: 'amount', type: 'uint256' } ],
          name: 'sendCoin',
          outputs: [ { name: 'sufficient', type: 'bool' } ],
          payable: false,
          type: 'function',
          signature: '0x90b98a11' },
        { constant: false,
          inputs: [ { name: 'addr', type: 'address' } ],
          name: 'getBalance',
          outputs: [ { name: '', type: 'uint256' } ],
          payable: false,
          type: 'function',
          signature: '0xf8b2cb4f' },
        { inputs: [],
          payable: false,
          type: 'constructor',
          constant: undefined },
        { anonymous: false,
          inputs:
           [ { indexed: true, name: '_from', type: 'address' },
             { indexed: true, name: '_to', type: 'address' },
             { indexed: false, name: '_value', type: 'uint256' } ],
          name: 'Transfer',
          type: 'event',
          constant: undefined,
          payable: undefined,
          signature:
           '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' } ] },
  getBalanceInEth: { [Function] call: [Function], sendTransaction: [Function] },
  'getBalanceInEth(address)': { [Function] call: [Function], sendTransaction: [Function] },
  sendCoin: { [Function] call: [Function], sendTransaction: [Function] },
  'sendCoin(address,uint256)': { [Function] call: [Function], sendTransaction: [Function] },
  getBalance: { [Function] call: [Function], sendTransaction: [Function] },
  'getBalance(address)': { [Function] call: [Function], sendTransaction: [Function] },
  sendTransaction: [Function],
  send: [Function] }
