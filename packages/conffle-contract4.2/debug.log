set provider
set provider
set provider
set provider
set provider
ConfluxWeb {
  currentProvider: [Getter/Setter],
  _requestManager:
   RequestManager {
     provider: Provider { provider: [HttpProvider] },
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     subscriptions: {} },
  givenProvider: null,
  providers:
   { WebsocketProvider: [Function: WebsocketProvider],
     HttpProvider: [Function: HttpProvider],
     IpcProvider: [Function: IpcProvider] },
  _provider:
   Provider {
     provider:
      HttpProvider {
        host: 'http://localhost:12537',
        httpAgent: [Agent],
        timeout: 0,
        headers: undefined,
        connected: false } },
  setProvider: [Function],
  BatchRequest: [Function: bound Batch],
  extend:
   { [Function: ex]
     formatters:
      { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     utils:
      { _fireError: [Function: _fireError],
        _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
        _flattenTypes: [Function: _flattenTypes],
        randomHex: [Function: randomHex],
        _: [Function],
        BN: [Function],
        isBN: [Function: isBN],
        isBigNumber: [Function: isBigNumber],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        sha3: [Function],
        keccak256: [Function],
        soliditySha3: [Function: soliditySha3],
        isAddress: [Function: isAddress],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toChecksumAddress: [Function: toChecksumAddress],
        toHex: [Function: toHex],
        toBN: [Function: toBN],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        hexToNumberString: [Function: hexToNumberString],
        hexToNumber: [Function: hexToNumber],
        toDecimal: [Function: hexToNumber],
        numberToHex: [Function: numberToHex],
        fromDecimal: [Function: numberToHex],
        hexToUtf8: [Function: hexToUtf8],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        utf8ToHex: [Function: utf8ToHex],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        hexToAscii: [Function: hexToAscii],
        toAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        fromAscii: [Function: asciiToHex],
        unitMap: [Object],
        toWei: [Function: toWei],
        fromWei: [Function: fromWei],
        padLeft: [Function: leftPad],
        leftPad: [Function: leftPad],
        padRight: [Function: rightPad],
        rightPad: [Function: rightPad],
        toTwosComplement: [Function: toTwosComplement] },
     Method: [Function: Method] },
  version: '1.2.2-alpha.0',
  utils:
   { _fireError: [Function: _fireError],
     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
     _flattenTypes: [Function: _flattenTypes],
     randomHex: [Function: randomHex],
     _:
      { [Function: _]
        _: [Circular],
        VERSION: '1.9.1',
        iteratee: [Function: builtinIteratee],
        forEach: [Function],
        each: [Function],
        collect: [Function],
        map: [Function],
        inject: [Function],
        foldl: [Function],
        reduce: [Function],
        foldr: [Function],
        reduceRight: [Function],
        detect: [Function],
        find: [Function],
        select: [Function],
        filter: [Function],
        reject: [Function],
        all: [Function],
        every: [Function],
        any: [Function],
        some: [Function],
        include: [Function],
        includes: [Function],
        contains: [Function],
        invoke: [Function],
        pluck: [Function],
        where: [Function],
        findWhere: [Function],
        max: [Function],
        min: [Function],
        shuffle: [Function],
        sample: [Function],
        sortBy: [Function],
        groupBy: [Function],
        indexBy: [Function],
        countBy: [Function],
        toArray: [Function],
        size: [Function],
        partition: [Function],
        take: [Function],
        head: [Function],
        first: [Function],
        initial: [Function],
        last: [Function],
        drop: [Function],
        tail: [Function],
        rest: [Function],
        compact: [Function],
        flatten: [Function],
        without: [Function],
        unique: [Function],
        uniq: [Function],
        union: [Function],
        intersection: [Function],
        difference: [Function],
        unzip: [Function],
        zip: [Function],
        object: [Function],
        findIndex: [Function],
        findLastIndex: [Function],
        sortedIndex: [Function],
        indexOf: [Function],
        lastIndexOf: [Function],
        range: [Function],
        chunk: [Function],
        bind: [Function],
        partial: [Function],
        bindAll: [Function],
        memoize: [Function],
        delay: [Function],
        defer: [Function: bound],
        throttle: [Function],
        debounce: [Function],
        wrap: [Function],
        negate: [Function],
        compose: [Function],
        after: [Function],
        before: [Function],
        once: [Function: bound],
        restArguments: [Function: restArguments],
        keys: [Function],
        allKeys: [Function],
        values: [Function],
        mapObject: [Function],
        pairs: [Function],
        invert: [Function],
        methods: [Function],
        functions: [Function],
        extend: [Function],
        assign: [Function],
        extendOwn: [Function],
        findKey: [Function],
        pick: [Function],
        omit: [Function],
        defaults: [Function],
        create: [Function],
        clone: [Function],
        tap: [Function],
        isMatch: [Function],
        isEqual: [Function],
        isEmpty: [Function],
        isElement: [Function],
        isArray: [Function: isArray],
        isObject: [Function],
        isArguments: [Function],
        isFunction: [Function],
        isString: [Function],
        isNumber: [Function],
        isDate: [Function],
        isRegExp: [Function],
        isError: [Function],
        isSymbol: [Function],
        isMap: [Function],
        isWeakMap: [Function],
        isSet: [Function],
        isWeakSet: [Function],
        isFinite: [Function],
        isNaN: [Function],
        isBoolean: [Function],
        isNull: [Function],
        isUndefined: [Function],
        has: [Function],
        noConflict: [Function],
        identity: [Function],
        constant: [Function],
        noop: [Function],
        property: [Function],
        propertyOf: [Function],
        matches: [Function],
        matcher: [Function],
        times: [Function],
        random: [Function],
        now: [Function: now],
        escape: [Function],
        unescape: [Function],
        result: [Function],
        uniqueId: [Function],
        templateSettings: [Object],
        template: [Function],
        chain: [Function],
        mixin: [Function] },
     BN:
      { [Function: BN]
        BN: [Circular],
        wordSize: 26,
        isBN: [Function: isBN],
        max: [Function: max],
        min: [Function: min],
        red: [Function: red],
        _prime: [Function: prime],
        mont: [Function: mont] },
     isBN: [Function: isBN],
     isBigNumber: [Function: isBigNumber],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     sha3: { [Function: sha3] _Hash: [Object] },
     keccak256: { [Function: sha3] _Hash: [Object] },
     soliditySha3: [Function: soliditySha3],
     isAddress: [Function: isAddress],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toChecksumAddress: [Function: toChecksumAddress],
     toHex: [Function: toHex],
     toBN: [Function: toBN],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     hexToNumberString: [Function: hexToNumberString],
     hexToNumber: [Function: hexToNumber],
     toDecimal: [Function: hexToNumber],
     numberToHex: [Function: numberToHex],
     fromDecimal: [Function: numberToHex],
     hexToUtf8: [Function: hexToUtf8],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     utf8ToHex: [Function: utf8ToHex],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     hexToAscii: [Function: hexToAscii],
     toAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     fromAscii: [Function: asciiToHex],
     unitMap:
      { noether: '0',
        wei: '1',
        kwei: '1000',
        Kwei: '1000',
        babbage: '1000',
        femtoether: '1000',
        mwei: '1000000',
        Mwei: '1000000',
        lovelace: '1000000',
        picoether: '1000000',
        gwei: '1000000000',
        Gwei: '1000000000',
        shannon: '1000000000',
        nanoether: '1000000000',
        nano: '1000000000',
        szabo: '1000000000000',
        microether: '1000000000000',
        micro: '1000000000000',
        finney: '1000000000000000',
        milliether: '1000000000000000',
        milli: '1000000000000000',
        ether: '1000000000000000000',
        kether: '1000000000000000000000',
        grand: '1000000000000000000000',
        mether: '1000000000000000000000000',
        gether: '1000000000000000000000000000',
        tether: '1000000000000000000000000000000' },
     toWei: [Function: toWei],
     fromWei: [Function: fromWei],
     padLeft: [Function: leftPad],
     leftPad: [Function: leftPad],
     padRight: [Function: rightPad],
     rightPad: [Function: rightPad],
     toTwosComplement: [Function: toTwosComplement] },
  cfx:
   Cfx {
     currentProvider: [Getter/Setter],
     _requestManager:
      RequestManager { provider: [Provider], providers: [Object], subscriptions: {} },
     givenProvider: null,
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     _provider: Provider { provider: [HttpProvider] },
     setProvider: [Function],
     BatchRequest: [Function: bound Batch],
     extend:
      { [Function: ex]
        formatters: [Object],
        utils: [Object],
        Method: [Function: Method] },
     defaultAccount: [Getter/Setter],
     defaultBlock: [Getter/Setter],
     clearSubscriptions: [Function],
     net:
      Net {
        currentProvider: [Getter/Setter],
        _requestManager: [RequestManager],
        givenProvider: null,
        providers: [Object],
        _provider: [Provider],
        setProvider: [Function],
        BatchRequest: [Function: bound Batch],
        extend: [Function],
        getId: [Function],
        isListening: [Function],
        getPeerCount: [Function],
        getNetworkType: [Function: bound getNetworkType] },
     accounts:
      Accounts {
        currentProvider: [Getter/Setter],
        _requestManager: [RequestManager],
        givenProvider: null,
        providers: [Object],
        _provider: [Provider],
        setProvider: [Function],
        _ethereumCall: [Object],
        wallet: [Wallet] },
     Contract:
      { [Function: Contract]
        setProvider: [Function],
        defaultAccount: null,
        defaultBlock: 'latest_state',
        currentProvider: [Getter/Setter],
        _requestManager: [RequestManager],
        givenProvider: null,
        providers: [Object],
        _provider: [Provider],
        BatchRequest: [Function: bound Batch],
        extend: [Function],
        _ethAccounts: [Accounts] },
     Iban:
      { [Function: Iban]
        toAddress: [Function],
        toIban: [Function],
        fromAddress: [Function],
        fromBban: [Function],
        createIndirect: [Function],
        isValid: [Function] },
     abi: ABICoder {},
     getNodeInfo:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'web3_clientVersion' },
     getProtocolVersion:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_protocolVersion' },
     getCoinbase:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_coinbase' },
     isMining:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_mining' },
     getHashrate:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_hashrate' },
     isSyncing:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_syncing' },
     getGasPrice:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_gasPrice' },
     getAccounts:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_accounts' },
     getBlockNumber:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_blockNumber' },
     getBalance:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_getBalance' },
     getStorageAt:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_getStorageAt' },
     getCode:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_getCode' },
     getBlock:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: [Function: blockCall] },
     getBlockTransactionCount:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: [Function: getBlockTransactionCountCall] },
     getTransaction:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_getTransactionByHash' },
     getTransactionFromBlock:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: [Function: transactionFromBlockCall] },
     getTransactionReceipt:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_getTransactionReceipt' },
     getTransactionCount:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_getTransactionCount' },
     sendSignedTransaction:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_sendRawTransaction' },
     signTransaction:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_signTransaction' },
     sendTransaction:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_sendTransaction' },
     sign:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_sign' },
     call:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_call' },
     estimateGas:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_estimateGas' },
     submitWork:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_submitWork' },
     getWork:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_getWork' },
     getPastLogs:
      { [Function: send]
        method: [Method],
        request: [Function: bound ],
        call: 'cfx_getLogs' },
     subscribe: [Function] } }
HttpProvider {
  host: 'http://localhost:12537',
  httpAgent:
   Agent {
     _events: [Object: null prototype] { free: [Function] },
     _eventsCount: 1,
     _maxListeners: undefined,
     defaultPort: 80,
     protocol: 'http:',
     options: { keepAlive: true, path: null },
     requests: {},
     sockets: {},
     freeSockets: {},
     keepAliveMsecs: 1000,
     keepAlive: true,
     maxSockets: Infinity,
     maxFreeSockets: 256 },
  timeout: 0,
  headers: undefined,
  connected: false }
1--------------------------------
2--------------------------------
3--------------------------------
network_id: 123456
9090990909090909090909090
9090990909090909090909090:0xb3247fa6b8e674f86055a74dfa8b35c6c339ddf9
ConfluxWeb {
  currentProvider: [Getter/Setter],
  _requestManager:
   RequestManager {
     provider:
      Provider {
        provider:
         HttpProvider {
           host: 'http://localhost:12537',
           httpAgent:
            Agent {
              _events: [Object: null prototype] { free: [Function] },
              _eventsCount: 1,
              _maxListeners: undefined,
              defaultPort: 80,
              protocol: 'http:',
              options: { keepAlive: true, path: null },
              requests: {},
              sockets: {},
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256 },
           timeout: 0,
           headers: undefined,
           connected: false } },
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     subscriptions: {} },
  givenProvider: null,
  providers:
   { WebsocketProvider: [Function: WebsocketProvider],
     HttpProvider: [Function: HttpProvider],
     IpcProvider: [Function: IpcProvider] },
  _provider:
   Provider {
     provider:
      HttpProvider {
        host: 'http://localhost:12537',
        httpAgent:
         Agent {
           _events: [Object: null prototype] { free: [Function] },
           _eventsCount: 1,
           _maxListeners: undefined,
           defaultPort: 80,
           protocol: 'http:',
           options: { keepAlive: true, path: null },
           requests: {},
           sockets: {},
           freeSockets: {},
           keepAliveMsecs: 1000,
           keepAlive: true,
           maxSockets: Infinity,
           maxFreeSockets: 256 },
        timeout: 0,
        headers: undefined,
        connected: false } },
  setProvider: [Function],
  BatchRequest: [Function: bound Batch],
  extend:
   { [Function: ex]
     formatters:
      { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     utils:
      { _fireError: [Function: _fireError],
        _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
        _flattenTypes: [Function: _flattenTypes],
        randomHex: [Function: randomHex],
        _:
         { [Function: _]
           _: [Circular],
           VERSION: '1.9.1',
           iteratee: [Function: builtinIteratee],
           forEach: [Function],
           each: [Function],
           collect: [Function],
           map: [Function],
           inject: [Function],
           foldl: [Function],
           reduce: [Function],
           foldr: [Function],
           reduceRight: [Function],
           detect: [Function],
           find: [Function],
           select: [Function],
           filter: [Function],
           reject: [Function],
           all: [Function],
           every: [Function],
           any: [Function],
           some: [Function],
           include: [Function],
           includes: [Function],
           contains: [Function],
           invoke: [Function],
           pluck: [Function],
           where: [Function],
           findWhere: [Function],
           max: [Function],
           min: [Function],
           shuffle: [Function],
           sample: [Function],
           sortBy: [Function],
           groupBy: [Function],
           indexBy: [Function],
           countBy: [Function],
           toArray: [Function],
           size: [Function],
           partition: [Function],
           take: [Function],
           head: [Function],
           first: [Function],
           initial: [Function],
           last: [Function],
           drop: [Function],
           tail: [Function],
           rest: [Function],
           compact: [Function],
           flatten: [Function],
           without: [Function],
           unique: [Function],
           uniq: [Function],
           union: [Function],
           intersection: [Function],
           difference: [Function],
           unzip: [Function],
           zip: [Function],
           object: [Function],
           findIndex: [Function],
           findLastIndex: [Function],
           sortedIndex: [Function],
           indexOf: [Function],
           lastIndexOf: [Function],
           range: [Function],
           chunk: [Function],
           bind: [Function],
           partial: { [Function] placeholder: [Circular] },
           bindAll: [Function],
           memoize: [Function],
           delay: [Function],
           defer: [Function: bound],
           throttle: [Function],
           debounce: [Function],
           wrap: [Function],
           negate: [Function],
           compose: [Function],
           after: [Function],
           before: [Function],
           once: [Function: bound],
           restArguments: [Function: restArguments],
           keys: [Function],
           allKeys: [Function],
           values: [Function],
           mapObject: [Function],
           pairs: [Function],
           invert: [Function],
           methods: [Function],
           functions: [Function],
           extend: [Function],
           assign: [Function],
           extendOwn: [Function],
           findKey: [Function],
           pick: [Function],
           omit: [Function],
           defaults: [Function],
           create: [Function],
           clone: [Function],
           tap: [Function],
           isMatch: [Function],
           isEqual: [Function],
           isEmpty: [Function],
           isElement: [Function],
           isArray: [Function: isArray],
           isObject: [Function],
           isArguments: [Function],
           isFunction: [Function],
           isString: [Function],
           isNumber: [Function],
           isDate: [Function],
           isRegExp: [Function],
           isError: [Function],
           isSymbol: [Function],
           isMap: [Function],
           isWeakMap: [Function],
           isSet: [Function],
           isWeakSet: [Function],
           isFinite: [Function],
           isNaN: [Function],
           isBoolean: [Function],
           isNull: [Function],
           isUndefined: [Function],
           has: [Function],
           noConflict: [Function],
           identity: [Function],
           constant: [Function],
           noop: [Function],
           property: [Function],
           propertyOf: [Function],
           matches: [Function],
           matcher: [Function],
           times: [Function],
           random: [Function],
           now: [Function: now],
           escape: [Function],
           unescape: [Function],
           result: [Function],
           uniqueId: [Function],
           templateSettings:
            { evaluate: /<%([\s\S]+?)%>/g,
              interpolate: /<%=([\s\S]+?)%>/g,
              escape: /<%-([\s\S]+?)%>/g },
           template: [Function],
           chain: [Function],
           mixin: [Function] },
        BN:
         { [Function: BN]
           BN: [Circular],
           wordSize: 26,
           isBN: [Function: isBN],
           max: [Function: max],
           min: [Function: min],
           red: [Function: red],
           _prime: [Function: prime],
           mont: [Function: mont] },
        isBN: [Function: isBN],
        isBigNumber: [Function: isBigNumber],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        sha3:
         { [Function: sha3]
           _Hash:
            { keccak256: [Function],
              keccak512: [Function],
              keccak256s: [Function],
              keccak512s: [Function] } },
        keccak256:
         { [Function: sha3]
           _Hash:
            { keccak256: [Function],
              keccak512: [Function],
              keccak256s: [Function],
              keccak512s: [Function] } },
        soliditySha3: [Function: soliditySha3],
        isAddress: [Function: isAddress],
        checkAddressChecksum: [Function: checkAddressChecksum],
        toChecksumAddress: [Function: toChecksumAddress],
        toHex: [Function: toHex],
        toBN: [Function: toBN],
        bytesToHex: [Function: bytesToHex],
        hexToBytes: [Function: hexToBytes],
        hexToNumberString: [Function: hexToNumberString],
        hexToNumber: [Function: hexToNumber],
        toDecimal: [Function: hexToNumber],
        numberToHex: [Function: numberToHex],
        fromDecimal: [Function: numberToHex],
        hexToUtf8: [Function: hexToUtf8],
        hexToString: [Function: hexToUtf8],
        toUtf8: [Function: hexToUtf8],
        utf8ToHex: [Function: utf8ToHex],
        stringToHex: [Function: utf8ToHex],
        fromUtf8: [Function: utf8ToHex],
        hexToAscii: [Function: hexToAscii],
        toAscii: [Function: hexToAscii],
        asciiToHex: [Function: asciiToHex],
        fromAscii: [Function: asciiToHex],
        unitMap:
         { noether: '0',
           wei: '1',
           kwei: '1000',
           Kwei: '1000',
           babbage: '1000',
           femtoether: '1000',
           mwei: '1000000',
           Mwei: '1000000',
           lovelace: '1000000',
           picoether: '1000000',
           gwei: '1000000000',
           Gwei: '1000000000',
           shannon: '1000000000',
           nanoether: '1000000000',
           nano: '1000000000',
           szabo: '1000000000000',
           microether: '1000000000000',
           micro: '1000000000000',
           finney: '1000000000000000',
           milliether: '1000000000000000',
           milli: '1000000000000000',
           ether: '1000000000000000000',
           kether: '1000000000000000000000',
           grand: '1000000000000000000000',
           mether: '1000000000000000000000000',
           gether: '1000000000000000000000000000',
           tether: '1000000000000000000000000000000' },
        toWei: [Function: toWei],
        fromWei: [Function: fromWei],
        padLeft: [Function: leftPad],
        leftPad: [Function: leftPad],
        padRight: [Function: rightPad],
        rightPad: [Function: rightPad],
        toTwosComplement: [Function: toTwosComplement] },
     Method: [Function: Method] },
  version: '1.2.2-alpha.0',
  utils:
   { _fireError: [Function: _fireError],
     _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
     _flattenTypes: [Function: _flattenTypes],
     randomHex: [Function: randomHex],
     _:
      { [Function: _]
        _: [Circular],
        VERSION: '1.9.1',
        iteratee: [Function: builtinIteratee],
        forEach: [Function],
        each: [Function],
        collect: [Function],
        map: [Function],
        inject: [Function],
        foldl: [Function],
        reduce: [Function],
        foldr: [Function],
        reduceRight: [Function],
        detect: [Function],
        find: [Function],
        select: [Function],
        filter: [Function],
        reject: [Function],
        all: [Function],
        every: [Function],
        any: [Function],
        some: [Function],
        include: [Function],
        includes: [Function],
        contains: [Function],
        invoke: [Function],
        pluck: [Function],
        where: [Function],
        findWhere: [Function],
        max: [Function],
        min: [Function],
        shuffle: [Function],
        sample: [Function],
        sortBy: [Function],
        groupBy: [Function],
        indexBy: [Function],
        countBy: [Function],
        toArray: [Function],
        size: [Function],
        partition: [Function],
        take: [Function],
        head: [Function],
        first: [Function],
        initial: [Function],
        last: [Function],
        drop: [Function],
        tail: [Function],
        rest: [Function],
        compact: [Function],
        flatten: [Function],
        without: [Function],
        unique: [Function],
        uniq: [Function],
        union: [Function],
        intersection: [Function],
        difference: [Function],
        unzip: [Function],
        zip: [Function],
        object: [Function],
        findIndex: [Function],
        findLastIndex: [Function],
        sortedIndex: [Function],
        indexOf: [Function],
        lastIndexOf: [Function],
        range: [Function],
        chunk: [Function],
        bind: [Function],
        partial: { [Function] placeholder: [Circular] },
        bindAll: [Function],
        memoize: [Function],
        delay: [Function],
        defer: [Function: bound],
        throttle: [Function],
        debounce: [Function],
        wrap: [Function],
        negate: [Function],
        compose: [Function],
        after: [Function],
        before: [Function],
        once: [Function: bound],
        restArguments: [Function: restArguments],
        keys: [Function],
        allKeys: [Function],
        values: [Function],
        mapObject: [Function],
        pairs: [Function],
        invert: [Function],
        methods: [Function],
        functions: [Function],
        extend: [Function],
        assign: [Function],
        extendOwn: [Function],
        findKey: [Function],
        pick: [Function],
        omit: [Function],
        defaults: [Function],
        create: [Function],
        clone: [Function],
        tap: [Function],
        isMatch: [Function],
        isEqual: [Function],
        isEmpty: [Function],
        isElement: [Function],
        isArray: [Function: isArray],
        isObject: [Function],
        isArguments: [Function],
        isFunction: [Function],
        isString: [Function],
        isNumber: [Function],
        isDate: [Function],
        isRegExp: [Function],
        isError: [Function],
        isSymbol: [Function],
        isMap: [Function],
        isWeakMap: [Function],
        isSet: [Function],
        isWeakSet: [Function],
        isFinite: [Function],
        isNaN: [Function],
        isBoolean: [Function],
        isNull: [Function],
        isUndefined: [Function],
        has: [Function],
        noConflict: [Function],
        identity: [Function],
        constant: [Function],
        noop: [Function],
        property: [Function],
        propertyOf: [Function],
        matches: [Function],
        matcher: [Function],
        times: [Function],
        random: [Function],
        now: [Function: now],
        escape: [Function],
        unescape: [Function],
        result: [Function],
        uniqueId: [Function],
        templateSettings:
         { evaluate: /<%([\s\S]+?)%>/g,
           interpolate: /<%=([\s\S]+?)%>/g,
           escape: /<%-([\s\S]+?)%>/g },
        template: [Function],
        chain: [Function],
        mixin: [Function] },
     BN:
      { [Function: BN]
        BN: [Circular],
        wordSize: 26,
        isBN: [Function: isBN],
        max: [Function: max],
        min: [Function: min],
        red: [Function: red],
        _prime: [Function: prime],
        mont: [Function: mont] },
     isBN: [Function: isBN],
     isBigNumber: [Function: isBigNumber],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     sha3:
      { [Function: sha3]
        _Hash:
         { keccak256: [Function],
           keccak512: [Function],
           keccak256s: [Function],
           keccak512s: [Function] } },
     keccak256:
      { [Function: sha3]
        _Hash:
         { keccak256: [Function],
           keccak512: [Function],
           keccak256s: [Function],
           keccak512s: [Function] } },
     soliditySha3: [Function: soliditySha3],
     isAddress: [Function: isAddress],
     checkAddressChecksum: [Function: checkAddressChecksum],
     toChecksumAddress: [Function: toChecksumAddress],
     toHex: [Function: toHex],
     toBN: [Function: toBN],
     bytesToHex: [Function: bytesToHex],
     hexToBytes: [Function: hexToBytes],
     hexToNumberString: [Function: hexToNumberString],
     hexToNumber: [Function: hexToNumber],
     toDecimal: [Function: hexToNumber],
     numberToHex: [Function: numberToHex],
     fromDecimal: [Function: numberToHex],
     hexToUtf8: [Function: hexToUtf8],
     hexToString: [Function: hexToUtf8],
     toUtf8: [Function: hexToUtf8],
     utf8ToHex: [Function: utf8ToHex],
     stringToHex: [Function: utf8ToHex],
     fromUtf8: [Function: utf8ToHex],
     hexToAscii: [Function: hexToAscii],
     toAscii: [Function: hexToAscii],
     asciiToHex: [Function: asciiToHex],
     fromAscii: [Function: asciiToHex],
     unitMap:
      { noether: '0',
        wei: '1',
        kwei: '1000',
        Kwei: '1000',
        babbage: '1000',
        femtoether: '1000',
        mwei: '1000000',
        Mwei: '1000000',
        lovelace: '1000000',
        picoether: '1000000',
        gwei: '1000000000',
        Gwei: '1000000000',
        shannon: '1000000000',
        nanoether: '1000000000',
        nano: '1000000000',
        szabo: '1000000000000',
        microether: '1000000000000',
        micro: '1000000000000',
        finney: '1000000000000000',
        milliether: '1000000000000000',
        milli: '1000000000000000',
        ether: '1000000000000000000',
        kether: '1000000000000000000000',
        grand: '1000000000000000000000',
        mether: '1000000000000000000000000',
        gether: '1000000000000000000000000000',
        tether: '1000000000000000000000000000000' },
     toWei: [Function: toWei],
     fromWei: [Function: fromWei],
     padLeft: [Function: leftPad],
     leftPad: [Function: leftPad],
     padRight: [Function: rightPad],
     rightPad: [Function: rightPad],
     toTwosComplement: [Function: toTwosComplement] },
  cfx:
   Cfx {
     currentProvider: [Getter/Setter],
     _requestManager:
      RequestManager {
        provider:
         Provider {
           provider:
            HttpProvider {
              host: 'http://localhost:12537',
              httpAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 80,
                 protocol: 'http:',
                 options: { keepAlive: true, path: null },
                 requests: {},
                 sockets: {},
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: true,
                 maxSockets: Infinity,
                 maxFreeSockets: 256 },
              timeout: 0,
              headers: undefined,
              connected: false } },
        providers:
         { WebsocketProvider: [Function: WebsocketProvider],
           HttpProvider: [Function: HttpProvider],
           IpcProvider: [Function: IpcProvider] },
        subscriptions: {} },
     givenProvider: null,
     providers:
      { WebsocketProvider: [Function: WebsocketProvider],
        HttpProvider: [Function: HttpProvider],
        IpcProvider: [Function: IpcProvider] },
     _provider:
      Provider {
        provider:
         HttpProvider {
           host: 'http://localhost:12537',
           httpAgent:
            Agent {
              _events: [Object: null prototype] { free: [Function] },
              _eventsCount: 1,
              _maxListeners: undefined,
              defaultPort: 80,
              protocol: 'http:',
              options: { keepAlive: true, path: null },
              requests: {},
              sockets: {},
              freeSockets: {},
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256 },
           timeout: 0,
           headers: undefined,
           connected: false } },
     setProvider: [Function],
     BatchRequest: [Function: bound Batch],
     extend:
      { [Function: ex]
        formatters:
         { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
           inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
           inputCallFormatter: [Function: inputCallFormatter],
           inputTransactionFormatter: [Function: inputTransactionFormatter],
           inputAddressFormatter: [Function: inputAddressFormatter],
           inputPostFormatter: [Function: inputPostFormatter],
           inputLogFormatter: [Function: inputLogFormatter],
           inputSignFormatter: [Function: inputSignFormatter],
           outputBigNumberFormatter: [Function: outputBigNumberFormatter],
           outputTransactionFormatter: [Function: outputTransactionFormatter],
           outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
           outputBlockFormatter: [Function: outputBlockFormatter],
           outputLogFormatter: [Function: outputLogFormatter],
           outputPostFormatter: [Function: outputPostFormatter],
           outputSyncingFormatter: [Function: outputSyncingFormatter] },
        utils:
         { _fireError: [Function: _fireError],
           _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
           _flattenTypes: [Function: _flattenTypes],
           randomHex: [Function: randomHex],
           _:
            { [Function: _]
              _: [Circular],
              VERSION: '1.9.1',
              iteratee: [Function: builtinIteratee],
              forEach: [Function],
              each: [Function],
              collect: [Function],
              map: [Function],
              inject: [Function],
              foldl: [Function],
              reduce: [Function],
              foldr: [Function],
              reduceRight: [Function],
              detect: [Function],
              find: [Function],
              select: [Function],
              filter: [Function],
              reject: [Function],
              all: [Function],
              every: [Function],
              any: [Function],
              some: [Function],
              include: [Function],
              includes: [Function],
              contains: [Function],
              invoke: [Function],
              pluck: [Function],
              where: [Function],
              findWhere: [Function],
              max: [Function],
              min: [Function],
              shuffle: [Function],
              sample: [Function],
              sortBy: [Function],
              groupBy: [Function],
              indexBy: [Function],
              countBy: [Function],
              toArray: [Function],
              size: [Function],
              partition: [Function],
              take: [Function],
              head: [Function],
              first: [Function],
              initial: [Function],
              last: [Function],
              drop: [Function],
              tail: [Function],
              rest: [Function],
              compact: [Function],
              flatten: [Function],
              without: [Function],
              unique: [Function],
              uniq: [Function],
              union: [Function],
              intersection: [Function],
              difference: [Function],
              unzip: [Function],
              zip: [Function],
              object: [Function],
              findIndex: [Function],
              findLastIndex: [Function],
              sortedIndex: [Function],
              indexOf: [Function],
              lastIndexOf: [Function],
              range: [Function],
              chunk: [Function],
              bind: [Function],
              partial: { [Function] placeholder: [Circular] },
              bindAll: [Function],
              memoize: [Function],
              delay: [Function],
              defer: [Function: bound],
              throttle: [Function],
              debounce: [Function],
              wrap: [Function],
              negate: [Function],
              compose: [Function],
              after: [Function],
              before: [Function],
              once: [Function: bound],
              restArguments: [Function: restArguments],
              keys: [Function],
              allKeys: [Function],
              values: [Function],
              mapObject: [Function],
              pairs: [Function],
              invert: [Function],
              methods: [Function],
              functions: [Function],
              extend: [Function],
              assign: [Function],
              extendOwn: [Function],
              findKey: [Function],
              pick: [Function],
              omit: [Function],
              defaults: [Function],
              create: [Function],
              clone: [Function],
              tap: [Function],
              isMatch: [Function],
              isEqual: [Function],
              isEmpty: [Function],
              isElement: [Function],
              isArray: [Function: isArray],
              isObject: [Function],
              isArguments: [Function],
              isFunction: [Function],
              isString: [Function],
              isNumber: [Function],
              isDate: [Function],
              isRegExp: [Function],
              isError: [Function],
              isSymbol: [Function],
              isMap: [Function],
              isWeakMap: [Function],
              isSet: [Function],
              isWeakSet: [Function],
              isFinite: [Function],
              isNaN: [Function],
              isBoolean: [Function],
              isNull: [Function],
              isUndefined: [Function],
              has: [Function],
              noConflict: [Function],
              identity: [Function],
              constant: [Function],
              noop: [Function],
              property: [Function],
              propertyOf: [Function],
              matches: [Function],
              matcher: [Function],
              times: [Function],
              random: [Function],
              now: [Function: now],
              escape: [Function],
              unescape: [Function],
              result: [Function],
              uniqueId: [Function],
              templateSettings:
               { evaluate: /<%([\s\S]+?)%>/g,
                 interpolate: /<%=([\s\S]+?)%>/g,
                 escape: /<%-([\s\S]+?)%>/g },
              template: [Function],
              chain: [Function],
              mixin: [Function] },
           BN:
            { [Function: BN]
              BN: [Circular],
              wordSize: 26,
              isBN: [Function: isBN],
              max: [Function: max],
              min: [Function: min],
              red: [Function: red],
              _prime: [Function: prime],
              mont: [Function: mont] },
           isBN: [Function: isBN],
           isBigNumber: [Function: isBigNumber],
           isHex: [Function: isHex],
           isHexStrict: [Function: isHexStrict],
           sha3:
            { [Function: sha3]
              _Hash:
               { keccak256: [Function],
                 keccak512: [Function],
                 keccak256s: [Function],
                 keccak512s: [Function] } },
           keccak256:
            { [Function: sha3]
              _Hash:
               { keccak256: [Function],
                 keccak512: [Function],
                 keccak256s: [Function],
                 keccak512s: [Function] } },
           soliditySha3: [Function: soliditySha3],
           isAddress: [Function: isAddress],
           checkAddressChecksum: [Function: checkAddressChecksum],
           toChecksumAddress: [Function: toChecksumAddress],
           toHex: [Function: toHex],
           toBN: [Function: toBN],
           bytesToHex: [Function: bytesToHex],
           hexToBytes: [Function: hexToBytes],
           hexToNumberString: [Function: hexToNumberString],
           hexToNumber: [Function: hexToNumber],
           toDecimal: [Function: hexToNumber],
           numberToHex: [Function: numberToHex],
           fromDecimal: [Function: numberToHex],
           hexToUtf8: [Function: hexToUtf8],
           hexToString: [Function: hexToUtf8],
           toUtf8: [Function: hexToUtf8],
           utf8ToHex: [Function: utf8ToHex],
           stringToHex: [Function: utf8ToHex],
           fromUtf8: [Function: utf8ToHex],
           hexToAscii: [Function: hexToAscii],
           toAscii: [Function: hexToAscii],
           asciiToHex: [Function: asciiToHex],
           fromAscii: [Function: asciiToHex],
           unitMap:
            { noether: '0',
              wei: '1',
              kwei: '1000',
              Kwei: '1000',
              babbage: '1000',
              femtoether: '1000',
              mwei: '1000000',
              Mwei: '1000000',
              lovelace: '1000000',
              picoether: '1000000',
              gwei: '1000000000',
              Gwei: '1000000000',
              shannon: '1000000000',
              nanoether: '1000000000',
              nano: '1000000000',
              szabo: '1000000000000',
              microether: '1000000000000',
              micro: '1000000000000',
              finney: '1000000000000000',
              milliether: '1000000000000000',
              milli: '1000000000000000',
              ether: '1000000000000000000',
              kether: '1000000000000000000000',
              grand: '1000000000000000000000',
              mether: '1000000000000000000000000',
              gether: '1000000000000000000000000000',
              tether: '1000000000000000000000000000000' },
           toWei: [Function: toWei],
           fromWei: [Function: fromWei],
           padLeft: [Function: leftPad],
           leftPad: [Function: leftPad],
           padRight: [Function: rightPad],
           rightPad: [Function: rightPad],
           toTwosComplement: [Function: toTwosComplement] },
        Method: [Function: Method] },
     defaultAccount: [Getter/Setter],
     defaultBlock: [Getter/Setter],
     clearSubscriptions: [Function],
     net:
      Net {
        currentProvider: [Getter/Setter],
        _requestManager:
         RequestManager {
           provider:
            Provider {
              provider:
               HttpProvider {
                 host: 'http://localhost:12537',
                 httpAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { keepAlive: true, path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 timeout: 0,
                 headers: undefined,
                 connected: false } },
           providers:
            { WebsocketProvider: [Function: WebsocketProvider],
              HttpProvider: [Function: HttpProvider],
              IpcProvider: [Function: IpcProvider] },
           subscriptions: {} },
        givenProvider: null,
        providers:
         { WebsocketProvider: [Function: WebsocketProvider],
           HttpProvider: [Function: HttpProvider],
           IpcProvider: [Function: IpcProvider] },
        _provider:
         Provider {
           provider:
            HttpProvider {
              host: 'http://localhost:12537',
              httpAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 80,
                 protocol: 'http:',
                 options: { keepAlive: true, path: null },
                 requests: {},
                 sockets: {},
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: true,
                 maxSockets: Infinity,
                 maxFreeSockets: 256 },
              timeout: 0,
              headers: undefined,
              connected: false } },
        setProvider: [Function],
        BatchRequest: [Function: bound Batch],
        extend:
         { [Function: ex]
           formatters:
            { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
              inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
              inputCallFormatter: [Function: inputCallFormatter],
              inputTransactionFormatter: [Function: inputTransactionFormatter],
              inputAddressFormatter: [Function: inputAddressFormatter],
              inputPostFormatter: [Function: inputPostFormatter],
              inputLogFormatter: [Function: inputLogFormatter],
              inputSignFormatter: [Function: inputSignFormatter],
              outputBigNumberFormatter: [Function: outputBigNumberFormatter],
              outputTransactionFormatter: [Function: outputTransactionFormatter],
              outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
              outputBlockFormatter: [Function: outputBlockFormatter],
              outputLogFormatter: [Function: outputLogFormatter],
              outputPostFormatter: [Function: outputPostFormatter],
              outputSyncingFormatter: [Function: outputSyncingFormatter] },
           utils:
            { _fireError: [Function: _fireError],
              _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
              _flattenTypes: [Function: _flattenTypes],
              randomHex: [Function: randomHex],
              _:
               { [Function: _]
                 _: [Circular],
                 VERSION: '1.9.1',
                 iteratee: [Function: builtinIteratee],
                 forEach: [Function],
                 each: [Function],
                 collect: [Function],
                 map: [Function],
                 inject: [Function],
                 foldl: [Function],
                 reduce: [Function],
                 foldr: [Function],
                 reduceRight: [Function],
                 detect: [Function],
                 find: [Function],
                 select: [Function],
                 filter: [Function],
                 reject: [Function],
                 all: [Function],
                 every: [Function],
                 any: [Function],
                 some: [Function],
                 include: [Function],
                 includes: [Function],
                 contains: [Function],
                 invoke: [Function],
                 pluck: [Function],
                 where: [Function],
                 findWhere: [Function],
                 max: [Function],
                 min: [Function],
                 shuffle: [Function],
                 sample: [Function],
                 sortBy: [Function],
                 groupBy: [Function],
                 indexBy: [Function],
                 countBy: [Function],
                 toArray: [Function],
                 size: [Function],
                 partition: [Function],
                 take: [Function],
                 head: [Function],
                 first: [Function],
                 initial: [Function],
                 last: [Function],
                 drop: [Function],
                 tail: [Function],
                 rest: [Function],
                 compact: [Function],
                 flatten: [Function],
                 without: [Function],
                 unique: [Function],
                 uniq: [Function],
                 union: [Function],
                 intersection: [Function],
                 difference: [Function],
                 unzip: [Function],
                 zip: [Function],
                 object: [Function],
                 findIndex: [Function],
                 findLastIndex: [Function],
                 sortedIndex: [Function],
                 indexOf: [Function],
                 lastIndexOf: [Function],
                 range: [Function],
                 chunk: [Function],
                 bind: [Function],
                 partial: { [Function] placeholder: [Circular] },
                 bindAll: [Function],
                 memoize: [Function],
                 delay: [Function],
                 defer: [Function: bound],
                 throttle: [Function],
                 debounce: [Function],
                 wrap: [Function],
                 negate: [Function],
                 compose: [Function],
                 after: [Function],
                 before: [Function],
                 once: [Function: bound],
                 restArguments: [Function: restArguments],
                 keys: [Function],
                 allKeys: [Function],
                 values: [Function],
                 mapObject: [Function],
                 pairs: [Function],
                 invert: [Function],
                 methods: [Function],
                 functions: [Function],
                 extend: [Function],
                 assign: [Function],
                 extendOwn: [Function],
                 findKey: [Function],
                 pick: [Function],
                 omit: [Function],
                 defaults: [Function],
                 create: [Function],
                 clone: [Function],
                 tap: [Function],
                 isMatch: [Function],
                 isEqual: [Function],
                 isEmpty: [Function],
                 isElement: [Function],
                 isArray: [Function: isArray],
                 isObject: [Function],
                 isArguments: [Function],
                 isFunction: [Function],
                 isString: [Function],
                 isNumber: [Function],
                 isDate: [Function],
                 isRegExp: [Function],
                 isError: [Function],
                 isSymbol: [Function],
                 isMap: [Function],
                 isWeakMap: [Function],
                 isSet: [Function],
                 isWeakSet: [Function],
                 isFinite: [Function],
                 isNaN: [Function],
                 isBoolean: [Function],
                 isNull: [Function],
                 isUndefined: [Function],
                 has: [Function],
                 noConflict: [Function],
                 identity: [Function],
                 constant: [Function],
                 noop: [Function],
                 property: [Function],
                 propertyOf: [Function],
                 matches: [Function],
                 matcher: [Function],
                 times: [Function],
                 random: [Function],
                 now: [Function: now],
                 escape: [Function],
                 unescape: [Function],
                 result: [Function],
                 uniqueId: [Function],
                 templateSettings:
                  { evaluate: /<%([\s\S]+?)%>/g,
                    interpolate: /<%=([\s\S]+?)%>/g,
                    escape: /<%-([\s\S]+?)%>/g },
                 template: [Function],
                 chain: [Function],
                 mixin: [Function] },
              BN:
               { [Function: BN]
                 BN: [Circular],
                 wordSize: 26,
                 isBN: [Function: isBN],
                 max: [Function: max],
                 min: [Function: min],
                 red: [Function: red],
                 _prime: [Function: prime],
                 mont: [Function: mont] },
              isBN: [Function: isBN],
              isBigNumber: [Function: isBigNumber],
              isHex: [Function: isHex],
              isHexStrict: [Function: isHexStrict],
              sha3:
               { [Function: sha3]
                 _Hash:
                  { keccak256: [Function],
                    keccak512: [Function],
                    keccak256s: [Function],
                    keccak512s: [Function] } },
              keccak256:
               { [Function: sha3]
                 _Hash:
                  { keccak256: [Function],
                    keccak512: [Function],
                    keccak256s: [Function],
                    keccak512s: [Function] } },
              soliditySha3: [Function: soliditySha3],
              isAddress: [Function: isAddress],
              checkAddressChecksum: [Function: checkAddressChecksum],
              toChecksumAddress: [Function: toChecksumAddress],
              toHex: [Function: toHex],
              toBN: [Function: toBN],
              bytesToHex: [Function: bytesToHex],
              hexToBytes: [Function: hexToBytes],
              hexToNumberString: [Function: hexToNumberString],
              hexToNumber: [Function: hexToNumber],
              toDecimal: [Function: hexToNumber],
              numberToHex: [Function: numberToHex],
              fromDecimal: [Function: numberToHex],
              hexToUtf8: [Function: hexToUtf8],
              hexToString: [Function: hexToUtf8],
              toUtf8: [Function: hexToUtf8],
              utf8ToHex: [Function: utf8ToHex],
              stringToHex: [Function: utf8ToHex],
              fromUtf8: [Function: utf8ToHex],
              hexToAscii: [Function: hexToAscii],
              toAscii: [Function: hexToAscii],
              asciiToHex: [Function: asciiToHex],
              fromAscii: [Function: asciiToHex],
              unitMap:
               { noether: '0',
                 wei: '1',
                 kwei: '1000',
                 Kwei: '1000',
                 babbage: '1000',
                 femtoether: '1000',
                 mwei: '1000000',
                 Mwei: '1000000',
                 lovelace: '1000000',
                 picoether: '1000000',
                 gwei: '1000000000',
                 Gwei: '1000000000',
                 shannon: '1000000000',
                 nanoether: '1000000000',
                 nano: '1000000000',
                 szabo: '1000000000000',
                 microether: '1000000000000',
                 micro: '1000000000000',
                 finney: '1000000000000000',
                 milliether: '1000000000000000',
                 milli: '1000000000000000',
                 ether: '1000000000000000000',
                 kether: '1000000000000000000000',
                 grand: '1000000000000000000000',
                 mether: '1000000000000000000000000',
                 gether: '1000000000000000000000000000',
                 tether: '1000000000000000000000000000000' },
              toWei: [Function: toWei],
              fromWei: [Function: fromWei],
              padLeft: [Function: leftPad],
              leftPad: [Function: leftPad],
              padRight: [Function: rightPad],
              rightPad: [Function: rightPad],
              toTwosComplement: [Function: toTwosComplement] },
           Method: [Function: Method] },
        getId:
         { [Function: send]
           method:
            Method {
              name: 'getId',
              call: 'net_version',
              params: 0,
              inputFormatter: undefined,
              outputFormatter: [Function: hexToNumber],
              transformPayload: undefined,
              extraFormatters: undefined,
              requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              accounts: undefined,
              defaultBlock: 'latest_state',
              defaultAccount: null },
           request: [Function: bound ],
           call: 'net_version' },
        isListening:
         { [Function: send]
           method:
            Method {
              name: 'isListening',
              call: 'net_listening',
              params: 0,
              inputFormatter: undefined,
              outputFormatter: undefined,
              transformPayload: undefined,
              extraFormatters: undefined,
              requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              accounts: undefined,
              defaultBlock: 'latest_state',
              defaultAccount: null },
           request: [Function: bound ],
           call: 'net_listening' },
        getPeerCount:
         { [Function: send]
           method:
            Method {
              name: 'getPeerCount',
              call: 'net_peerCount',
              params: 0,
              inputFormatter: undefined,
              outputFormatter: [Function: hexToNumber],
              transformPayload: undefined,
              extraFormatters: undefined,
              requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              accounts: undefined,
              defaultBlock: 'latest_state',
              defaultAccount: null },
           request: [Function: bound ],
           call: 'net_peerCount' },
        getNetworkType: [Function: bound getNetworkType] },
     accounts:
      Accounts {
        currentProvider: [Getter/Setter],
        _requestManager:
         RequestManager {
           provider:
            Provider {
              provider:
               HttpProvider {
                 host: 'http://localhost:12537',
                 httpAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { keepAlive: true, path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 timeout: 0,
                 headers: undefined,
                 connected: false } },
           providers:
            { WebsocketProvider: [Function: WebsocketProvider],
              HttpProvider: [Function: HttpProvider],
              IpcProvider: [Function: IpcProvider] },
           subscriptions: {} },
        givenProvider: null,
        providers:
         { WebsocketProvider: [Function: WebsocketProvider],
           HttpProvider: [Function: HttpProvider],
           IpcProvider: [Function: IpcProvider] },
        _provider:
         Provider {
           provider:
            HttpProvider {
              host: 'http://localhost:12537',
              httpAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 80,
                 protocol: 'http:',
                 options: { keepAlive: true, path: null },
                 requests: {},
                 sockets: {},
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: true,
                 maxSockets: Infinity,
                 maxFreeSockets: 256 },
              timeout: 0,
              headers: undefined,
              connected: false } },
        setProvider: [Function],
        _ethereumCall:
         { getId:
            { [Function: send]
              method:
               Method {
                 name: 'getId',
                 call: 'net_version',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: [Function: hexToNumber],
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets: {},
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: false } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts: undefined,
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'net_version' },
           getGasPrice:
            { [Function: send]
              method:
               Method {
                 name: 'getGasPrice',
                 call: 'cfx_gasPrice',
                 params: 0,
                 inputFormatter: undefined,
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets: {},
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: false } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts: undefined,
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_gasPrice' },
           getTransactionCount:
            { [Function: send]
              method:
               Method {
                 name: 'getTransactionCount',
                 call: 'cfx_getTransactionCount',
                 params: 2,
                 inputFormatter: [ [Function], [Function] ],
                 outputFormatter: undefined,
                 transformPayload: undefined,
                 extraFormatters: undefined,
                 requestManager:
                  RequestManager {
                    provider:
                     Provider {
                       provider:
                        HttpProvider {
                          host: 'http://localhost:12537',
                          httpAgent:
                           Agent {
                             _events: [Object: null prototype] { free: [Function] },
                             _eventsCount: 1,
                             _maxListeners: undefined,
                             defaultPort: 80,
                             protocol: 'http:',
                             options: { keepAlive: true, path: null },
                             requests: {},
                             sockets: {},
                             freeSockets: {},
                             keepAliveMsecs: 1000,
                             keepAlive: true,
                             maxSockets: Infinity,
                             maxFreeSockets: 256 },
                          timeout: 0,
                          headers: undefined,
                          connected: false } },
                    providers:
                     { WebsocketProvider: [Function: WebsocketProvider],
                       HttpProvider: [Function: HttpProvider],
                       IpcProvider: [Function: IpcProvider] },
                    subscriptions: {} },
                 accounts: undefined,
                 defaultBlock: 'latest_state',
                 defaultAccount: null },
              request: [Function: bound ],
              call: 'cfx_getTransactionCount' } },
        wallet:
         Wallet {
           _accounts: [Circular],
           length: 0,
           defaultKeyName: 'web3js_wallet' } },
     Contract:
      { [Function: Contract]
        setProvider: [Function],
        defaultAccount: null,
        defaultBlock: 'latest_state',
        currentProvider: [Getter/Setter],
        _requestManager:
         RequestManager {
           provider:
            Provider {
              provider:
               HttpProvider {
                 host: 'http://localhost:12537',
                 httpAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { keepAlive: true, path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 timeout: 0,
                 headers: undefined,
                 connected: false } },
           providers:
            { WebsocketProvider: [Function: WebsocketProvider],
              HttpProvider: [Function: HttpProvider],
              IpcProvider: [Function: IpcProvider] },
           subscriptions: {} },
        givenProvider: null,
        providers:
         { WebsocketProvider: [Function: WebsocketProvider],
           HttpProvider: [Function: HttpProvider],
           IpcProvider: [Function: IpcProvider] },
        _provider:
         Provider {
           provider:
            HttpProvider {
              host: 'http://localhost:12537',
              httpAgent:
               Agent {
                 _events: [Object: null prototype] { free: [Function] },
                 _eventsCount: 1,
                 _maxListeners: undefined,
                 defaultPort: 80,
                 protocol: 'http:',
                 options: { keepAlive: true, path: null },
                 requests: {},
                 sockets: {},
                 freeSockets: {},
                 keepAliveMsecs: 1000,
                 keepAlive: true,
                 maxSockets: Infinity,
                 maxFreeSockets: 256 },
              timeout: 0,
              headers: undefined,
              connected: false } },
        BatchRequest: [Function: bound Batch],
        extend:
         { [Function: ex]
           formatters:
            { inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
              inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
              inputCallFormatter: [Function: inputCallFormatter],
              inputTransactionFormatter: [Function: inputTransactionFormatter],
              inputAddressFormatter: [Function: inputAddressFormatter],
              inputPostFormatter: [Function: inputPostFormatter],
              inputLogFormatter: [Function: inputLogFormatter],
              inputSignFormatter: [Function: inputSignFormatter],
              outputBigNumberFormatter: [Function: outputBigNumberFormatter],
              outputTransactionFormatter: [Function: outputTransactionFormatter],
              outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
              outputBlockFormatter: [Function: outputBlockFormatter],
              outputLogFormatter: [Function: outputLogFormatter],
              outputPostFormatter: [Function: outputPostFormatter],
              outputSyncingFormatter: [Function: outputSyncingFormatter] },
           utils:
            { _fireError: [Function: _fireError],
              _jsonInterfaceMethodToString: [Function: _jsonInterfaceMethodToString],
              _flattenTypes: [Function: _flattenTypes],
              randomHex: [Function: randomHex],
              _:
               { [Function: _]
                 _: [Circular],
                 VERSION: '1.9.1',
                 iteratee: [Function: builtinIteratee],
                 forEach: [Function],
                 each: [Function],
                 collect: [Function],
                 map: [Function],
                 inject: [Function],
                 foldl: [Function],
                 reduce: [Function],
                 foldr: [Function],
                 reduceRight: [Function],
                 detect: [Function],
                 find: [Function],
                 select: [Function],
                 filter: [Function],
                 reject: [Function],
                 all: [Function],
                 every: [Function],
                 any: [Function],
                 some: [Function],
                 include: [Function],
                 includes: [Function],
                 contains: [Function],
                 invoke: [Function],
                 pluck: [Function],
                 where: [Function],
                 findWhere: [Function],
                 max: [Function],
                 min: [Function],
                 shuffle: [Function],
                 sample: [Function],
                 sortBy: [Function],
                 groupBy: [Function],
                 indexBy: [Function],
                 countBy: [Function],
                 toArray: [Function],
                 size: [Function],
                 partition: [Function],
                 take: [Function],
                 head: [Function],
                 first: [Function],
                 initial: [Function],
                 last: [Function],
                 drop: [Function],
                 tail: [Function],
                 rest: [Function],
                 compact: [Function],
                 flatten: [Function],
                 without: [Function],
                 unique: [Function],
                 uniq: [Function],
                 union: [Function],
                 intersection: [Function],
                 difference: [Function],
                 unzip: [Function],
                 zip: [Function],
                 object: [Function],
                 findIndex: [Function],
                 findLastIndex: [Function],
                 sortedIndex: [Function],
                 indexOf: [Function],
                 lastIndexOf: [Function],
                 range: [Function],
                 chunk: [Function],
                 bind: [Function],
                 partial: { [Function] placeholder: [Circular] },
                 bindAll: [Function],
                 memoize: [Function],
                 delay: [Function],
                 defer: [Function: bound],
                 throttle: [Function],
                 debounce: [Function],
                 wrap: [Function],
                 negate: [Function],
                 compose: [Function],
                 after: [Function],
                 before: [Function],
                 once: [Function: bound],
                 restArguments: [Function: restArguments],
                 keys: [Function],
                 allKeys: [Function],
                 values: [Function],
                 mapObject: [Function],
                 pairs: [Function],
                 invert: [Function],
                 methods: [Function],
                 functions: [Function],
                 extend: [Function],
                 assign: [Function],
                 extendOwn: [Function],
                 findKey: [Function],
                 pick: [Function],
                 omit: [Function],
                 defaults: [Function],
                 create: [Function],
                 clone: [Function],
                 tap: [Function],
                 isMatch: [Function],
                 isEqual: [Function],
                 isEmpty: [Function],
                 isElement: [Function],
                 isArray: [Function: isArray],
                 isObject: [Function],
                 isArguments: [Function],
                 isFunction: [Function],
                 isString: [Function],
                 isNumber: [Function],
                 isDate: [Function],
                 isRegExp: [Function],
                 isError: [Function],
                 isSymbol: [Function],
                 isMap: [Function],
                 isWeakMap: [Function],
                 isSet: [Function],
                 isWeakSet: [Function],
                 isFinite: [Function],
                 isNaN: [Function],
                 isBoolean: [Function],
                 isNull: [Function],
                 isUndefined: [Function],
                 has: [Function],
                 noConflict: [Function],
                 identity: [Function],
                 constant: [Function],
                 noop: [Function],
                 property: [Function],
                 propertyOf: [Function],
                 matches: [Function],
                 matcher: [Function],
                 times: [Function],
                 random: [Function],
                 now: [Function: now],
                 escape: [Function],
                 unescape: [Function],
                 result: [Function],
                 uniqueId: [Function],
                 templateSettings:
                  { evaluate: /<%([\s\S]+?)%>/g,
                    interpolate: /<%=([\s\S]+?)%>/g,
                    escape: /<%-([\s\S]+?)%>/g },
                 template: [Function],
                 chain: [Function],
                 mixin: [Function] },
              BN:
               { [Function: BN]
                 BN: [Circular],
                 wordSize: 26,
                 isBN: [Function: isBN],
                 max: [Function: max],
                 min: [Function: min],
                 red: [Function: red],
                 _prime: [Function: prime],
                 mont: [Function: mont] },
              isBN: [Function: isBN],
              isBigNumber: [Function: isBigNumber],
              isHex: [Function: isHex],
              isHexStrict: [Function: isHexStrict],
              sha3:
               { [Function: sha3]
                 _Hash:
                  { keccak256: [Function],
                    keccak512: [Function],
                    keccak256s: [Function],
                    keccak512s: [Function] } },
              keccak256:
               { [Function: sha3]
                 _Hash:
                  { keccak256: [Function],
                    keccak512: [Function],
                    keccak256s: [Function],
                    keccak512s: [Function] } },
              soliditySha3: [Function: soliditySha3],
              isAddress: [Function: isAddress],
              checkAddressChecksum: [Function: checkAddressChecksum],
              toChecksumAddress: [Function: toChecksumAddress],
              toHex: [Function: toHex],
              toBN: [Function: toBN],
              bytesToHex: [Function: bytesToHex],
              hexToBytes: [Function: hexToBytes],
              hexToNumberString: [Function: hexToNumberString],
              hexToNumber: [Function: hexToNumber],
              toDecimal: [Function: hexToNumber],
              numberToHex: [Function: numberToHex],
              fromDecimal: [Function: numberToHex],
              hexToUtf8: [Function: hexToUtf8],
              hexToString: [Function: hexToUtf8],
              toUtf8: [Function: hexToUtf8],
              utf8ToHex: [Function: utf8ToHex],
              stringToHex: [Function: utf8ToHex],
              fromUtf8: [Function: utf8ToHex],
              hexToAscii: [Function: hexToAscii],
              toAscii: [Function: hexToAscii],
              asciiToHex: [Function: asciiToHex],
              fromAscii: [Function: asciiToHex],
              unitMap:
               { noether: '0',
                 wei: '1',
                 kwei: '1000',
                 Kwei: '1000',
                 babbage: '1000',
                 femtoether: '1000',
                 mwei: '1000000',
                 Mwei: '1000000',
                 lovelace: '1000000',
                 picoether: '1000000',
                 gwei: '1000000000',
                 Gwei: '1000000000',
                 shannon: '1000000000',
                 nanoether: '1000000000',
                 nano: '1000000000',
                 szabo: '1000000000000',
                 microether: '1000000000000',
                 micro: '1000000000000',
                 finney: '1000000000000000',
                 milliether: '1000000000000000',
                 milli: '1000000000000000',
                 ether: '1000000000000000000',
                 kether: '1000000000000000000000',
                 grand: '1000000000000000000000',
                 mether: '1000000000000000000000000',
                 gether: '1000000000000000000000000000',
                 tether: '1000000000000000000000000000000' },
              toWei: [Function: toWei],
              fromWei: [Function: fromWei],
              padLeft: [Function: leftPad],
              leftPad: [Function: leftPad],
              padRight: [Function: rightPad],
              rightPad: [Function: rightPad],
              toTwosComplement: [Function: toTwosComplement] },
           Method: [Function: Method] },
        _ethAccounts:
         Accounts {
           currentProvider: [Getter/Setter],
           _requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           givenProvider: null,
           providers:
            { WebsocketProvider: [Function: WebsocketProvider],
              HttpProvider: [Function: HttpProvider],
              IpcProvider: [Function: IpcProvider] },
           _provider:
            Provider {
              provider:
               HttpProvider {
                 host: 'http://localhost:12537',
                 httpAgent:
                  Agent {
                    _events: [Object: null prototype] { free: [Function] },
                    _eventsCount: 1,
                    _maxListeners: undefined,
                    defaultPort: 80,
                    protocol: 'http:',
                    options: { keepAlive: true, path: null },
                    requests: {},
                    sockets: {},
                    freeSockets: {},
                    keepAliveMsecs: 1000,
                    keepAlive: true,
                    maxSockets: Infinity,
                    maxFreeSockets: 256 },
                 timeout: 0,
                 headers: undefined,
                 connected: false } },
           setProvider: [Function],
           _ethereumCall:
            { getId:
               { [Function: send]
                 method:
                  Method {
                    name: 'getId',
                    call: 'net_version',
                    params: 0,
                    inputFormatter: undefined,
                    outputFormatter: [Function: hexToNumber],
                    transformPayload: undefined,
                    extraFormatters: undefined,
                    requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets: {},
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: false } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    accounts: undefined,
                    defaultBlock: 'latest_state',
                    defaultAccount: null },
                 request: [Function: bound ],
                 call: 'net_version' },
              getGasPrice:
               { [Function: send]
                 method:
                  Method {
                    name: 'getGasPrice',
                    call: 'cfx_gasPrice',
                    params: 0,
                    inputFormatter: undefined,
                    outputFormatter: undefined,
                    transformPayload: undefined,
                    extraFormatters: undefined,
                    requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets: {},
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: false } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    accounts: undefined,
                    defaultBlock: 'latest_state',
                    defaultAccount: null },
                 request: [Function: bound ],
                 call: 'cfx_gasPrice' },
              getTransactionCount:
               { [Function: send]
                 method:
                  Method {
                    name: 'getTransactionCount',
                    call: 'cfx_getTransactionCount',
                    params: 2,
                    inputFormatter: [ [Function], [Function] ],
                    outputFormatter: undefined,
                    transformPayload: undefined,
                    extraFormatters: undefined,
                    requestManager:
                     RequestManager {
                       provider:
                        Provider {
                          provider:
                           HttpProvider {
                             host: 'http://localhost:12537',
                             httpAgent:
                              Agent {
                                _events: [Object: null prototype] { free: [Function] },
                                _eventsCount: 1,
                                _maxListeners: undefined,
                                defaultPort: 80,
                                protocol: 'http:',
                                options: { keepAlive: true, path: null },
                                requests: {},
                                sockets: {},
                                freeSockets: {},
                                keepAliveMsecs: 1000,
                                keepAlive: true,
                                maxSockets: Infinity,
                                maxFreeSockets: 256 },
                             timeout: 0,
                             headers: undefined,
                             connected: false } },
                       providers:
                        { WebsocketProvider: [Function: WebsocketProvider],
                          HttpProvider: [Function: HttpProvider],
                          IpcProvider: [Function: IpcProvider] },
                       subscriptions: {} },
                    accounts: undefined,
                    defaultBlock: 'latest_state',
                    defaultAccount: null },
                 request: [Function: bound ],
                 call: 'cfx_getTransactionCount' } },
           wallet:
            Wallet {
              _accounts: [Circular],
              length: 0,
              defaultKeyName: 'web3js_wallet' } } },
     Iban:
      { [Function: Iban]
        toAddress: [Function],
        toIban: [Function],
        fromAddress: [Function],
        fromBban: [Function],
        createIndirect: [Function],
        isValid: [Function] },
     abi: ABICoder {},
     getNodeInfo:
      { [Function: send]
        method:
         Method {
           name: 'getNodeInfo',
           call: 'web3_clientVersion',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'web3_clientVersion' },
     getProtocolVersion:
      { [Function: send]
        method:
         Method {
           name: 'getProtocolVersion',
           call: 'cfx_protocolVersion',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_protocolVersion' },
     getCoinbase:
      { [Function: send]
        method:
         Method {
           name: 'getCoinbase',
           call: 'cfx_coinbase',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_coinbase' },
     isMining:
      { [Function: send]
        method:
         Method {
           name: 'isMining',
           call: 'cfx_mining',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_mining' },
     getHashrate:
      { [Function: send]
        method:
         Method {
           name: 'getHashrate',
           call: 'cfx_hashrate',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: [Function: hexToNumber],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_hashrate' },
     isSyncing:
      { [Function: send]
        method:
         Method {
           name: 'isSyncing',
           call: 'cfx_syncing',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: [Function: outputSyncingFormatter],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_syncing' },
     getGasPrice:
      { [Function: send]
        method:
         Method {
           name: 'getGasPrice',
           call: 'cfx_gasPrice',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: [Function: outputBigNumberFormatter],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_gasPrice' },
     getAccounts:
      { [Function: send]
        method:
         Method {
           name: 'getAccounts',
           call: 'cfx_accounts',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: [Function: toChecksumAddress],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_accounts' },
     getBlockNumber:
      { [Function: send]
        method:
         Method {
           name: 'getBlockNumber',
           call: 'cfx_blockNumber',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: [Function: hexToNumber],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_blockNumber' },
     getBalance:
      { [Function: send]
        method:
         Method {
           name: 'getBalance',
           call: 'cfx_getBalance',
           params: 2,
           inputFormatter:
            [ [Function: inputAddressFormatter],
              [Function: inputDefaultBlockNumberFormatter] ],
           outputFormatter: [Function: outputBigNumberFormatter],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_getBalance' },
     getStorageAt:
      { [Function: send]
        method:
         Method {
           name: 'getStorageAt',
           call: 'cfx_getStorageAt',
           params: 3,
           inputFormatter:
            [ [Function: inputAddressFormatter],
              [Function: numberToHex],
              [Function: inputDefaultBlockNumberFormatter] ],
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_getStorageAt' },
     getCode:
      { [Function: send]
        method:
         Method {
           name: 'getCode',
           call: 'cfx_getCode',
           params: 2,
           inputFormatter:
            [ [Function: inputAddressFormatter],
              [Function: inputDefaultBlockNumberFormatter] ],
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_getCode' },
     getBlock:
      { [Function: send]
        method:
         Method {
           name: 'getBlock',
           call: [Function: blockCall],
           params: 2,
           inputFormatter: [ [Function: inputBlockNumberFormatter], [Function] ],
           outputFormatter: [Function: outputBlockFormatter],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: [Function: blockCall] },
     getBlockTransactionCount:
      { [Function: send]
        method:
         Method {
           name: 'getBlockTransactionCount',
           call: [Function: getBlockTransactionCountCall],
           params: 1,
           inputFormatter: [ [Function: inputBlockNumberFormatter] ],
           outputFormatter: [Function: hexToNumber],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: [Function: getBlockTransactionCountCall] },
     getTransaction:
      { [Function: send]
        method:
         Method {
           name: 'getTransaction',
           call: 'cfx_getTransactionByHash',
           params: 1,
           inputFormatter: [ null ],
           outputFormatter: [Function: outputTransactionFormatter],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_getTransactionByHash' },
     getTransactionFromBlock:
      { [Function: send]
        method:
         Method {
           name: 'getTransactionFromBlock',
           call: [Function: transactionFromBlockCall],
           params: 2,
           inputFormatter:
            [ [Function: inputBlockNumberFormatter],
              [Function: numberToHex] ],
           outputFormatter: [Function: outputTransactionFormatter],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: [Function: transactionFromBlockCall] },
     getTransactionReceipt:
      { [Function: send]
        method:
         Method {
           name: 'getTransactionReceipt',
           call: 'cfx_getTransactionReceipt',
           params: 1,
           inputFormatter: [ null ],
           outputFormatter: [Function: outputTransactionReceiptFormatter],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_getTransactionReceipt' },
     getTransactionCount:
      { [Function: send]
        method:
         Method {
           name: 'getTransactionCount',
           call: 'cfx_getTransactionCount',
           params: 2,
           inputFormatter:
            [ [Function: inputAddressFormatter],
              [Function: inputDefaultBlockNumberFormatter] ],
           outputFormatter: [Function: hexToNumber],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_getTransactionCount' },
     sendSignedTransaction:
      { [Function: send]
        method:
         Method {
           name: 'sendSignedTransaction',
           call: 'cfx_sendRawTransaction',
           params: 1,
           inputFormatter: [ null ],
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_sendRawTransaction' },
     signTransaction:
      { [Function: send]
        method:
         Method {
           name: 'signTransaction',
           call: 'cfx_signTransaction',
           params: 1,
           inputFormatter: [ [Function: inputTransactionFormatter] ],
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_signTransaction' },
     sendTransaction:
      { [Function: send]
        method:
         Method {
           name: 'sendTransaction',
           call: 'cfx_sendTransaction',
           params: 1,
           inputFormatter: [ [Function: inputTransactionFormatter] ],
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_sendTransaction' },
     sign:
      { [Function: send]
        method:
         Method {
           name: 'sign',
           call: 'cfx_sign',
           params: 2,
           inputFormatter:
            [ [Function: inputSignFormatter],
              [Function: inputAddressFormatter] ],
           outputFormatter: undefined,
           transformPayload: [Function: transformPayload],
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_sign' },
     call:
      { [Function: send]
        method:
         Method {
           name: 'call',
           call: 'cfx_call',
           params: 2,
           inputFormatter:
            [ [Function: inputCallFormatter],
              [Function: inputDefaultBlockNumberFormatter] ],
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_call' },
     estimateGas:
      { [Function: send]
        method:
         Method {
           name: 'estimateGas',
           call: 'cfx_estimateGas',
           params: 1,
           inputFormatter: [ [Function: inputCallFormatter] ],
           outputFormatter: [Function: hexToNumber],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_estimateGas' },
     submitWork:
      { [Function: send]
        method:
         Method {
           name: 'submitWork',
           call: 'cfx_submitWork',
           params: 3,
           inputFormatter: undefined,
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_submitWork' },
     getWork:
      { [Function: send]
        method:
         Method {
           name: 'getWork',
           call: 'cfx_getWork',
           params: 0,
           inputFormatter: undefined,
           outputFormatter: undefined,
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_getWork' },
     getPastLogs:
      { [Function: send]
        method:
         Method {
           name: 'getPastLogs',
           call: 'cfx_getLogs',
           params: 1,
           inputFormatter: [ [Function: inputLogFormatter] ],
           outputFormatter: [Function: outputLogFormatter],
           transformPayload: undefined,
           extraFormatters: undefined,
           requestManager:
            RequestManager {
              provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              subscriptions: {} },
           accounts:
            Accounts {
              currentProvider: [Getter/Setter],
              _requestManager:
               RequestManager {
                 provider:
                  Provider {
                    provider:
                     HttpProvider {
                       host: 'http://localhost:12537',
                       httpAgent:
                        Agent {
                          _events: [Object: null prototype] { free: [Function] },
                          _eventsCount: 1,
                          _maxListeners: undefined,
                          defaultPort: 80,
                          protocol: 'http:',
                          options: { keepAlive: true, path: null },
                          requests: {},
                          sockets: {},
                          freeSockets: {},
                          keepAliveMsecs: 1000,
                          keepAlive: true,
                          maxSockets: Infinity,
                          maxFreeSockets: 256 },
                       timeout: 0,
                       headers: undefined,
                       connected: false } },
                 providers:
                  { WebsocketProvider: [Function: WebsocketProvider],
                    HttpProvider: [Function: HttpProvider],
                    IpcProvider: [Function: IpcProvider] },
                 subscriptions: {} },
              givenProvider: null,
              providers:
               { WebsocketProvider: [Function: WebsocketProvider],
                 HttpProvider: [Function: HttpProvider],
                 IpcProvider: [Function: IpcProvider] },
              _provider:
               Provider {
                 provider:
                  HttpProvider {
                    host: 'http://localhost:12537',
                    httpAgent:
                     Agent {
                       _events: [Object: null prototype] { free: [Function] },
                       _eventsCount: 1,
                       _maxListeners: undefined,
                       defaultPort: 80,
                       protocol: 'http:',
                       options: { keepAlive: true, path: null },
                       requests: {},
                       sockets: {},
                       freeSockets: {},
                       keepAliveMsecs: 1000,
                       keepAlive: true,
                       maxSockets: Infinity,
                       maxFreeSockets: 256 },
                    timeout: 0,
                    headers: undefined,
                    connected: false } },
              setProvider: [Function],
              _ethereumCall:
               { getId:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getId',
                       call: 'net_version',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: [Function: hexToNumber],
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'net_version' },
                 getGasPrice:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getGasPrice',
                       call: 'cfx_gasPrice',
                       params: 0,
                       inputFormatter: undefined,
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_gasPrice' },
                 getTransactionCount:
                  { [Function: send]
                    method:
                     Method {
                       name: 'getTransactionCount',
                       call: 'cfx_getTransactionCount',
                       params: 2,
                       inputFormatter: [ [Function], [Function] ],
                       outputFormatter: undefined,
                       transformPayload: undefined,
                       extraFormatters: undefined,
                       requestManager:
                        RequestManager {
                          provider:
                           Provider {
                             provider:
                              HttpProvider {
                                host: 'http://localhost:12537',
                                httpAgent:
                                 Agent {
                                   _events: [Object: null prototype] { free: [Function] },
                                   _eventsCount: 1,
                                   _maxListeners: undefined,
                                   defaultPort: 80,
                                   protocol: 'http:',
                                   options: { keepAlive: true, path: null },
                                   requests: {},
                                   sockets: {},
                                   freeSockets: {},
                                   keepAliveMsecs: 1000,
                                   keepAlive: true,
                                   maxSockets: Infinity,
                                   maxFreeSockets: 256 },
                                timeout: 0,
                                headers: undefined,
                                connected: false } },
                          providers:
                           { WebsocketProvider: [Function: WebsocketProvider],
                             HttpProvider: [Function: HttpProvider],
                             IpcProvider: [Function: IpcProvider] },
                          subscriptions: {} },
                       accounts: undefined,
                       defaultBlock: 'latest_state',
                       defaultAccount: null },
                    request: [Function: bound ],
                    call: 'cfx_getTransactionCount' } },
              wallet:
               Wallet {
                 _accounts: [Circular],
                 length: 0,
                 defaultKeyName: 'web3js_wallet' } },
           defaultBlock: 'latest_state',
           defaultAccount: null },
        request: [Function: bound ],
        call: 'cfx_getLogs' },
     subscribe: [Function] } }
xxdfdsfasfsdaf
ERROR! Cannot read property 'apply' of undefined
